// app/api/notifications/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';
import { 
  getMockNotifications, 
  addNotification, 
  setMockNotifications,
  type Notification 
} from '@/lib/notifications-data';

// GET /api/notifications - –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const GET = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'notifications', action: 'read' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üîî API: –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

        const { user } = req;
        const url = new URL(req.url);
        const page = parseInt(url.searchParams.get('page') || '1');
        const limit = parseInt(url.searchParams.get('limit') || '20');
        const unreadOnly = url.searchParams.get('unreadOnly') === 'true';
        const category = url.searchParams.get('category');
        const priority = url.searchParams.get('priority');
        const type = url.searchParams.get('type');

        const mockNotifications = getMockNotifications();

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let userNotifications = mockNotifications.filter((notification: Notification) => 
          notification.userId === user.id || notification.userId === 'all'
        );

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        if (unreadOnly) {
          userNotifications = userNotifications.filter((n: Notification) => !n.read);
        }

        if (category) {
          userNotifications = userNotifications.filter((n: Notification) => n.category === category);
        }

        if (priority) {
          userNotifications = userNotifications.filter((n: Notification) => n.priority === priority);
        }

        if (type) {
          userNotifications = userNotifications.filter((n: Notification) => n.type === type);
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        userNotifications.sort((a: Notification, b: Notification) => 
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const startIndex = (page - 1) * limit;
        const endIndex = startIndex + limit;
        const paginatedNotifications = userNotifications.slice(startIndex, endIndex);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const stats = {
          total: userNotifications.length,
          unread: userNotifications.filter((n: Notification) => !n.read).length,
          byPriority: {
            high: userNotifications.filter((n: Notification) => n.priority === 'high').length,
            medium: userNotifications.filter((n: Notification) => n.priority === 'medium').length,
            low: userNotifications.filter((n: Notification) => n.priority === 'low').length
          },
          byType: {
            info: userNotifications.filter((n: Notification) => n.type === 'info').length,
            warning: userNotifications.filter((n: Notification) => n.type === 'warning').length,
            error: userNotifications.filter((n: Notification) => n.type === 'error').length,
            success: userNotifications.filter((n: Notification) => n.type === 'success').length
          }
        };

        return NextResponse.json({
          success: true,
          data: paginatedNotifications,
          pagination: {
            page,
            limit,
            total: userNotifications.length,
            pages: Math.ceil(userNotifications.length / limit)
          },
          stats,
          filters: {
            unreadOnly,
            category,
            priority,
            type
          }
        });

      } catch (error: any) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// POST /api/notifications - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const POST = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'notifications', action: 'create' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('‚ûï API: —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');

        const body = await req.json();
        const { user } = req;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!body.title || !body.message) {
          return NextResponse.json(
            { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (title, message)' },
            { status: 400 }
          );
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞
        const validTypes = ['info', 'warning', 'error', 'success'];
        if (body.type && !validTypes.includes(body.type)) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
            { status: 400 }
          );
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        const validPriorities = ['low', 'medium', 'high'];
        if (body.priority && !validPriorities.includes(body.priority)) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' },
            { status: 400 }
          );
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const newNotification: Notification = {
          id: `notif_${Date.now()}`,
          userId: body.userId || user.id,
          type: body.type || 'info',
          title: body.title,
          message: body.message,
          read: false,
          createdAt: new Date().toISOString(),
          priority: body.priority || 'medium',
          category: body.category,
          actionUrl: body.actionUrl,
          metadata: body.metadata
        };

        addNotification(newNotification);

        console.log(`‚úÖ API: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ - ${newNotification.title}`);

        return NextResponse.json({
          success: true,
          data: newNotification,
          message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ'
        });

      } catch (error: any) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PUT /api/notifications - –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'notifications', action: 'update' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üìñ API: –º–∞—Å—Å–æ–≤–∞—è –æ—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö');

        const body = await req.json();
        const { user } = req;
        const { notificationIds, markAllAsRead = false } = body;

        let updatedCount = 0;
        const mockNotifications = getMockNotifications();

        if (markAllAsRead) {
          // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
          const updatedNotifications = mockNotifications.map((notification: Notification) => {
            if ((notification.userId === user.id || notification.userId === 'all') && !notification.read) {
              updatedCount++;
              return {
                ...notification,
                read: true,
                readAt: new Date().toISOString()
              };
            }
            return notification;
          });
          setMockNotifications(updatedNotifications);
        } else if (notificationIds && Array.isArray(notificationIds)) {
          // –û—Ç–º–µ—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
          const updatedNotifications = mockNotifications.map((notification: Notification) => {
            if (notificationIds.includes(notification.id) && 
                (notification.userId === user.id || notification.userId === 'all') && 
                !notification.read) {
              updatedCount++;
              return {
                ...notification,
                read: true,
                readAt: new Date().toISOString()
              };
            }
            return notification;
          });
          setMockNotifications(updatedNotifications);
        }

        console.log(`‚úÖ API: –æ—Ç–º–µ—á–µ–Ω–æ ${updatedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö`);

        return NextResponse.json({
          success: true,
          data: { updatedCount },
          message: `–û—Ç–º–µ—á–µ–Ω–æ ${updatedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö`
        });

      } catch (error: any) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// DELETE /api/notifications - –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'notifications', action: 'delete' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

        const body = await req.json();
        const { user } = req;
        const { notificationIds, deleteAllRead = false } = body;

        let deletedCount = 0;
        const mockNotifications = getMockNotifications();

        if (deleteAllRead) {
          // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const filteredNotifications = mockNotifications.filter((notification: Notification) => {
            const shouldDelete = (notification.userId === user.id || notification.userId === 'all') && notification.read;
            if (shouldDelete) deletedCount++;
            return !shouldDelete;
          });
          setMockNotifications(filteredNotifications);
        } else if (notificationIds && Array.isArray(notificationIds)) {
          // –£–¥–∞–ª–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          const filteredNotifications = mockNotifications.filter((notification: Notification) => {
            const shouldDelete = notificationIds.includes(notification.id) && 
                               (notification.userId === user.id || notification.userId === 'all');
            if (shouldDelete) deletedCount++;
            return !shouldDelete;
          });
          setMockNotifications(filteredNotifications);
        }

        console.log(`‚úÖ API: —É–¥–∞–ª–µ–Ω–æ ${deletedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

        return NextResponse.json({
          success: true,
          data: { deletedCount },
          message: `–£–¥–∞–ª–µ–Ω–æ ${deletedCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`
        });

      } catch (error: any) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};
