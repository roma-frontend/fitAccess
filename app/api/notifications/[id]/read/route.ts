// app/api/notifications/[id]/read/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockNotifications } from '../../route';

// PUT /api/notifications/[id]/read - –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
export const PUT = withPermissions(
  { resource: 'notifications', action: 'update' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;

      console.log(`üìñ API: –æ—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ ${id}`);

      const notificationIndex = mockNotifications.findIndex((n: any) => n.id === id);
      if (notificationIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
          { status: 404 }
        );
      }

      const notification = mockNotifications[notificationIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (notification.userId !== user.id && notification.userId !== 'all') {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é' },
          { status: 403 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —É–∂–µ
      if (notification.read) {
        return NextResponse.json({
          success: true,
          data: notification,
          message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ'
        });
      }

      // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
      mockNotifications[notificationIndex] = {
        ...notification,
        read: true,
        readAt: new Date().toISOString()
      };

      console.log(`‚úÖ API: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ - ${notification.title}`);

      return NextResponse.json({
        success: true,
        data: mockNotifications[notificationIndex],
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ'
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ' },
        { status: 500 }
      );
    }
  }
);

// DELETE /api/notifications/[id]/read - –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
export const DELETE = withPermissions(
  { resource: 'notifications', action: 'update' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;

      console.log(`üìñ API: –æ—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ ${id}`);

      const notificationIndex = mockNotifications.findIndex((n: any) => n.id === id);
      if (notificationIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
          { status: 404 }
        );
      }

      const notification = mockNotifications[notificationIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (notification.userId !== user.id && notification.userId !== 'all') {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é' },
          { status: 403 }
        );
      }

      // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
      mockNotifications[notificationIndex] = {
        ...notification,
        read: false,
        readAt: undefined
      };

      console.log(`‚úÖ API: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ - ${notification.title}`);

      return NextResponse.json({
        success: true,
        data: mockNotifications[notificationIndex],
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ'
      });

    } catch (error: any) {
      console.error('üí•–æ—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ' },
        { status: 500 }
      );
    }
  }
);
