// app/api/notifications/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockNotifications } from '../route';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞
interface RouteContext {
  params: {
    id: string;
  };
}

// GET /api/notifications/[id] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const GET = withPermissions(
  { resource: 'notifications', action: 'read' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;

      console.log(`üîî API: –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${id}`);

      const notification = mockNotifications.find((n: any) => n.id === id);
      if (!notification) {
        return NextResponse.json(
          { success: false, error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
          { status: 404 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (notification.userId !== user.id && notification.userId !== 'all') {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é' },
          { status: 403 }
        );
      }

      return NextResponse.json({
        success: true,
        data: notification
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
        { status: 500 }
      );
    }
  }
);

// PATCH /api/notifications/[id] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const PATCH = withPermissions(
  { resource: 'notifications', action: 'update' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;
      const body = await req.json();

      console.log(`üìù API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${id}`);

      const notificationIndex = mockNotifications.findIndex((n: any) => n.id === id);
      if (notificationIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
          { status: 404 }
        );
      }

      const notification = mockNotifications[notificationIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (notification.userId !== user.id && notification.userId !== 'all') {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é' },
          { status: 403 }
        );
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–ª—è
      const updatedNotification = {
        ...notification,
        ...body,
        id: notification.id, // ID –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è
        userId: notification.userId, // userId –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è
        createdAt: notification.createdAt // createdAt –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è
      };

      mockNotifications[notificationIndex] = updatedNotification;

      console.log(`‚úÖ API: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ - ${updatedNotification.title}`);

      return NextResponse.json({
        success: true,
        data: updatedNotification,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
        { status: 500 }
      );
    }
  }
);

// DELETE /api/notifications/[id] - –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export const DELETE = withPermissions(
  { resource: 'notifications', action: 'delete' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;

      console.log(`üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${id}`);

      const notificationIndex = mockNotifications.findIndex((n: any) => n.id === id);
      if (notificationIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
          { status: 404 }
        );
      }

      const notification = mockNotifications[notificationIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (notification.userId !== user.id && notification.userId !== 'all') {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é' },
          { status: 403 }
        );
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const deletedNotification = mockNotifications.splice(notificationIndex, 1)[0];

      console.log(`‚úÖ API: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ - ${deletedNotification.title}`);

      return NextResponse.json({
        success: true,
        data: deletedNotification,
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ'
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
        { status: 500 }
      );
    }
  }
);

// PUT /api/notifications/[id]/read - –ü–æ–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
export const PUT = withPermissions(
  { resource: 'notifications', action: 'update' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;

      console.log(`üëÅÔ∏è API: –ø–æ–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ ${id}`);

      const notificationIndex = mockNotifications.findIndex((n: any) => n.id === id);
      if (notificationIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
          { status: 404 }
        );
      }

      const notification = mockNotifications[notificationIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (notification.userId !== user.id && notification.userId !== 'all') {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é' },
          { status: 403 }
        );
      }

      // –ü–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
      mockNotifications[notificationIndex] = {
        ...notification,
        read: true, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'read' –≤–º–µ—Å—Ç–æ 'isRead'
        readAt: new Date().toISOString()
      };

      console.log(`‚úÖ API: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ - ${notification.title}`);

      return NextResponse.json({
        success: true,
        data: mockNotifications[notificationIndex],
        message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ'
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ' },
        { status: 500 }
      );
    }
  }
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function validateNotificationData(data: any): {
  isValid: boolean;
  errors: string[];
} {
  const errors: string[] = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  if (data.title !== undefined && (!data.title || typeof data.title !== 'string')) {
    errors.push('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π');
  }

  if (data.message !== undefined && (!data.message || typeof data.message !== 'string')) {
    errors.push('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const validTypes = ['info', 'success', 'warning', 'error'];
  if (data.type !== undefined && !validTypes.includes(data.type)) {
    errors.push(`–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: ${validTypes.join(', ')}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
  const validPriorities = ['low', 'medium', 'high'];
  if (data.priority !== undefined && !validPriorities.includes(data.priority)) {
    errors.push(`–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: ${validPriorities.join(', ')}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'read'
  if (data.read !== undefined && typeof data.read !== 'boolean') {
    errors.push('read –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
  if (data.readAt !== undefined) {
    const readAt = new Date(data.readAt);
    if (isNaN(readAt.getTime())) {
      errors.push('readAt –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç–æ–π');
    }
  }

  return {
    isValid: errors.length === 0,
    errors
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function filterNotifications(
  notifications: any[],
  filters: {
    userId?: string;
    type?: string;
    priority?: string;
    read?: boolean; // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'read'
    dateFrom?: string;
    dateTo?: string;
  }
): any[] {
  return notifications.filter(notification => {
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (filters.userId && notification.userId !== filters.userId && notification.userId !== 'all') {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    if (filters.type && notification.type !== filters.type) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (filters.priority && notification.priority !== filters.priority) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û
    if (filters.read !== undefined && notification.read !== filters.read) {
      return false;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç)
    if (filters.dateFrom) {
      const notificationDate = new Date(notification.createdAt);
      const fromDate = new Date(filters.dateFrom);
      if (notificationDate < fromDate) {
        return false;
      }
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–¥–æ)
    if (filters.dateTo) {
      const notificationDate = new Date(notification.createdAt);
      const toDate = new Date(filters.dateTo);
      if (notificationDate > toDate) {
        return false;
      }
    }

    return true;
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function sortNotifications(
  notifications: any[],
  sortBy: 'createdAt' | 'priority' | 'type' | 'read' = 'createdAt', // –ò–°–ü–†–ê–í–õ–ï–ù–û
  sortOrder: 'asc' | 'desc' = 'desc'
): any[] {
  return [...notifications].sort((a, b) => {
    let aValue, bValue;

    switch (sortBy) {
      case 'createdAt':
        aValue = new Date(a.createdAt).getTime();
        bValue = new Date(b.createdAt).getTime();
        break;
      case 'priority':
        const priorityOrder = { high: 3, medium: 2, low: 1 };
        aValue = priorityOrder[a.priority as keyof typeof priorityOrder] || 0;
        bValue = priorityOrder[b.priority as keyof typeof priorityOrder] || 0;
        break;
      case 'type':
        aValue = a.type;
        bValue = b.type;
        break;
      case 'read': // –ò–°–ü–†–ê–í–õ–ï–ù–û
        aValue = a.read ? 1 : 0;
        bValue = b.read ? 1 : 0;
        break;
      default:
        aValue = a[sortBy];
        bValue = b[sortBy];
    }

    if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
    return 0;
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export function groupNotifications(
  notifications: any[],
  groupBy: 'type' | 'priority' | 'date' | 'read'
): Record<string, any[]> {
  const groups: Record<string, any[]> = {};

  notifications.forEach(notification => {
    let groupKey: string;

    switch (groupBy) {
      case 'type':
        groupKey = notification.type;
        break;
      case 'priority':
        groupKey = notification.priority;
        break;
      case 'date':
        groupKey = new Date(notification.createdAt).toISOString().split('T')[0];
        break;
      case 'read': // –ò–°–ü–†–ê–í–õ–ï–ù–û
        groupKey = notification.read ? 'read' : 'unread';
        break;
      default:
        groupKey = 'other';
    }

    if (!groups[groupKey]) {
            groups[groupKey] = [];
    }
    groups[groupKey].push(notification);
  });

  return groups;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function getNotificationStats(notifications: any[]): {
  total: number;
  unread: number;
  read: number;
  byType: Record<string, number>;
  byPriority: Record<string, number>;
  recent: number; // –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
} {
  const now = new Date();
  const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);

  const stats = {
    total: notifications.length,
    unread: notifications.filter(n => !n.read).length, // –ò–°–ü–†–ê–í–õ–ï–ù–û
    read: notifications.filter(n => n.read).length, // –ò–°–ü–†–ê–í–õ–ï–ù–û
    byType: {} as Record<string, number>,
    byPriority: {} as Record<string, number>,
    recent: notifications.filter(n => new Date(n.createdAt) >= yesterday).length
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  notifications.forEach(notification => {
    stats.byType[notification.type] = (stats.byType[notification.type] || 0) + 1;
    stats.byPriority[notification.priority] = (stats.byPriority[notification.priority] || 0) + 1;
  });

  return stats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function createNotification(data: {
  userId: string;
  title: string;
  message: string;
  type?: 'info' | 'success' | 'warning' | 'error';
  priority?: 'low' | 'medium' | 'high';
  metadata?: any;
}): any {
  const notification = {
    id: `notification_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    userId: data.userId,
    title: data.title,
    message: data.message,
    type: data.type || 'info',
    priority: data.priority || 'medium',
    read: false, // –ò–°–ü–†–ê–í–õ–ï–ù–û
    metadata: data.metadata || {},
    createdAt: new Date().toISOString(),
    readAt: null
  };

  return notification;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function bulkUpdateNotifications(
  notifications: any[],
  notificationIds: string[],
  updates: {
    read?: boolean; // –ò–°–ü–†–ê–í–õ–ï–ù–û
    priority?: string;
  }
): {
  updated: any[];
  notFound: string[];
} {
  const updated: any[] = [];
  const notFound: string[] = [];

  notificationIds.forEach(id => {
    const index = notifications.findIndex(n => n.id === id);
    if (index !== -1) {
      notifications[index] = {
        ...notifications[index],
        ...updates,
        ...(updates.read === true && !notifications[index].readAt ? { readAt: new Date().toISOString() } : {})
      };
      updated.push(notifications[index]);
    } else {
      notFound.push(id);
    }
  });

  return { updated, notFound };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export function searchNotifications(
  notifications: any[],
  query: string,
  searchFields: ('title' | 'message' | 'type')[] = ['title', 'message']
): any[] {
  if (!query.trim()) {
    return notifications;
  }

  const searchTerm = query.toLowerCase().trim();

  return notifications.filter(notification => {
    return searchFields.some(field => {
      const fieldValue = notification[field];
      return fieldValue && fieldValue.toLowerCase().includes(searchTerm);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function exportNotifications(
  notifications: any[],
  format: 'json' | 'csv' = 'json'
): string {
  if (format === 'csv') {
    const headers = [
      'ID', 'User ID', 'Title', 'Message', 'Type', 'Priority', 
      'Read', 'Created At', 'Read At' // –ò–°–ü–†–ê–í–õ–ï–ù–û
    ];
    
    const csvRows = [
      headers.join(','),
      ...notifications.map(notification => [
        notification.id,
        notification.userId,
        `"${notification.title.replace(/"/g, '""')}"`,
        `"${notification.message.replace(/"/g, '""')}"`,
        notification.type,
        notification.priority,
        notification.read, // –ò–°–ü–†–ê–í–õ–ï–ù–û
        notification.createdAt,
        notification.readAt || ''
      ].join(','))
    ];
    
    return csvRows.join('\n');
  }

  return JSON.stringify(notifications, null, 2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function createNotificationTemplate(
  type: 'session_reminder' | 'session_cancelled' | 'payment_due' | 'welcome' | 'achievement',
  variables: Record<string, any>
): {
  title: string;
  message: string;
  type: 'info' | 'success' | 'warning' | 'error';
  priority: 'low' | 'medium' | 'high';
} {
  const templates = {
    session_reminder: {
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ',
      message: `–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ ${variables.date} –≤ ${variables.time} —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º ${variables.trainerName}`,
      type: 'info' as const,
      priority: 'medium' as const
    },
    session_cancelled: {
      title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
      message: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${variables.date} –≤ ${variables.time} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. ${variables.reason || '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`,
      type: 'warning' as const,
      priority: 'high' as const
    },
    payment_due: {
      title: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ',
      message: `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç –¥–æ ${variables.dueDate}. –°—É–º–º–∞: ${variables.amount} ‚ÇΩ`,
      type: 'warning' as const,
      priority: 'high' as const
    },
    welcome: {
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
      message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±, ${variables.clientName}! –í–∞—à —Ç—Ä–µ–Ω–µ—Ä: ${variables.trainerName}`,
      type: 'success' as const,
      priority: 'medium' as const
    },
    achievement: {
      title: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º!',
      message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏: ${variables.achievement}. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!`,
      type: 'success' as const,
      priority: 'low' as const
    }
  };

  return templates[type] || {
    title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    message: '–û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    type: 'info' as const,
    priority: 'medium' as const
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export function scheduleNotification(
  notification: any,
  scheduleTime: Date
): {
  scheduled: boolean;
  scheduledFor: string;
  delay: number;
} {
  const now = new Date();
  const delay = scheduleTime.getTime() - now.getTime();

  if (delay <= 0) {
    return {
      scheduled: false,
      scheduledFor: scheduleTime.toISOString(),
      delay: 0
    };
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–µ–π (Redis, Bull, etc.)
  console.log(`üìÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ${scheduleTime.toISOString()}`);

  return {
    scheduled: true,
    scheduledFor: scheduleTime.toISOString(),
    delay
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π
export function createEventNotification(
  eventType: 'session_created' | 'session_updated' | 'session_cancelled' | 'client_registered' | 'payment_received',
  eventData: any,
  recipientId: string
): any | null {
  const now = new Date();

  switch (eventType) {
    case 'session_created':
      return createNotification({
        userId: recipientId,
        title: '–ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        message: `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ ${eventData.date} –≤ ${eventData.startTime}`,
        type: 'info',
        priority: 'medium',
        metadata: {
          sessionId: eventData.id,
          eventType: 'session_created'
        }
      });

    case 'session_updated':
      return createNotification({
        userId: recipientId,
        title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞',
        message: `–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ ${eventData.date} –≤ ${eventData.startTime}`,
        type: 'warning',
        priority: 'medium',
        metadata: {
          sessionId: eventData.id,
          eventType: 'session_updated'
        }
      });

    case 'session_cancelled':
      return createNotification({
        userId: recipientId,
        title: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
        message: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${eventData.date} –≤ ${eventData.startTime} –æ—Ç–º–µ–Ω–µ–Ω–∞`,
        type: 'error',
        priority: 'high',
        metadata: {
          sessionId: eventData.id,
          eventType: 'session_cancelled'
        }
      });

    case 'client_registered':
      return createNotification({
        userId: recipientId,
        title: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
        message: `–ö–ª–∏–µ–Ω—Ç ${eventData.name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`,
        type: 'success',
        priority: 'low',
        metadata: {
          clientId: eventData.id,
          eventType: 'client_registered'
        }
      });

    case 'payment_received':
      return createNotification({
        userId: recipientId,
        title: '–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω',
        message: `–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É ${eventData.amount} ‚ÇΩ`,
        type: 'success',
        priority: 'low',
        metadata: {
          paymentId: eventData.id,
          amount: eventData.amount,
          eventType: 'payment_received'
        }
      });

    default:
      return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
export function checkAndCreateReminders(): any[] {
  const reminders: any[] = [];
  const now = new Date();
  const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000);

  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

  console.log(`üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: —Å–æ–∑–¥–∞–Ω–æ ${reminders.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
  
  return reminders;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export function cleanupOldNotifications(
  notifications: any[],
  daysToKeep: number = 30
): {
  removed: any[];
  remaining: any[];
} {
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

  const removed: any[] = [];
  const remaining: any[] = [];

  notifications.forEach(notification => {
    const notificationDate = new Date(notification.createdAt);
    if (notificationDate < cutoffDate && notification.read) {
      removed.push(notification);
    } else {
      remaining.push(notification);
    }
  });

  return { removed, remaining };
}

