// app/api/schedule/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';
import { mockEvents, mockTrainers, mockClients, type Event } from '@/lib/mock-data';

// GET /api/schedule - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
export const GET = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'schedule', action: 'read' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üìÖ API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        
        const { user } = req;
        const url = new URL(req.url);
        const startDate = url.searchParams.get('startDate');
        const endDate = url.searchParams.get('endDate');
        const trainerId = url.searchParams.get('trainerId');
        const clientId = url.searchParams.get('clientId');
        const status = url.searchParams.get('status');

        let events = [...mockEvents];

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
        if (user.role === 'trainer') {
          // –¢—Ä–µ–Ω–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è
          events = events.filter(event => event.trainerId === user.id);
        } else if (user.role === 'client') {
          // –ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è
          events = events.filter(event => event.clientId === user.id);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–Ω–µ—Ä—É
        if (trainerId && user.role !== 'trainer') {
          events = events.filter(event => event.trainerId === trainerId);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª–∏–µ–Ω—Ç—É
        if (clientId) {
          events = events.filter(event => event.clientId === clientId);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if (status) {
          events = events.filter(event => event.status === status);
        }

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º
        if (startDate) {
          events = events.filter(event => 
            new Date(event.startTime) >= new Date(startDate)
          );
        }

        if (endDate) {
          events = events.filter(event => 
            new Date(event.startTime) <= new Date(endDate)
          );
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const enrichedEvents = events.map(event => {
          const trainer = mockTrainers.find(t => t.id === event.trainerId);
          const client = mockClients.find(c => c.id === event.clientId);
          
          return {
            ...event,
            trainerName: trainer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
            clientName: client?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
            trainerPhone: trainer?.phone,
            clientPhone: client?.phone
          };
        });

        return NextResponse.json({
          success: true,
          data: enrichedEvents,
          total: enrichedEvents.length
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// POST /api/schedule - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
export const POST = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'schedule', action: 'create' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('‚ûï API: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è');
        
        const body = await req.json();
        const { user } = req;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!body.title || !body.startTime || !body.endTime || !body.trainerId || !body.clientId) {
          return NextResponse.json(
            { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' },
            { status: 400 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
        if (user.role === 'trainer' && body.trainerId !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞' },
            { status: 403 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
        const trainer = mockTrainers.find(t => t.id === body.trainerId);
        const client = mockClients.find(c => c.id === body.clientId);

        if (!trainer) {
          return NextResponse.json(
            { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }

        if (!client) {
          return NextResponse.json(
            { success: false, error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
        const conflictingEvent = mockEvents.find(event => 
          event.trainerId === body.trainerId &&
          event.status !== 'cancelled' &&
          (
            (new Date(body.startTime) >= new Date(event.startTime) && 
             new Date(body.startTime) < new Date(event.endTime)) ||
            (new Date(body.endTime) > new Date(event.startTime) && 
             new Date(body.endTime) <= new Date(event.endTime)) ||
            (new Date(body.startTime) <= new Date(event.startTime) && 
             new Date(body.endTime) >= new Date(event.endTime))
          )
        );

        if (conflictingEvent) {
          return NextResponse.json(
            { success: false, error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–æ–±—ã—Ç–∏–µ–º' },
            { status: 409 }
          );
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const validStatuses: Event['status'][] = ['pending', 'confirmed', 'completed', 'cancelled'];
        const eventStatus: Event['status'] = validStatuses.includes(body.status as Event['status']) 
          ? body.status as Event['status'] 
          : 'pending';

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞
        const validTypes: Event['type'][] = ['training', 'consultation', 'group'];
        const eventType: Event['type'] = validTypes.includes(body.type as Event['type']) 
          ? body.type as Event['type'] 
          : 'training';

        const newEvent: Event = {
          _id: `event_${Date.now()}`,
          title: body.title,
          description: body.description || '',
          startTime: body.startTime,
          endTime: body.endTime,
          trainerId: body.trainerId,
          clientId: body.clientId,
          status: eventStatus,
          type: eventType,
          location: body.location || '',
          notes: body.notes || '',
          createdAt: new Date().toISOString(),
          createdBy: user.id,
          updatedAt: new Date().toISOString()
        };

        mockEvents.push(newEvent);

        console.log(`‚úÖ API: —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ - ${newEvent.title}`);

        return NextResponse.json({
          success: true,
          data: {
            ...newEvent,
            trainerName: trainer.name,
            clientName: client.name
          },
          message: '–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PUT /api/schedule - –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'schedule', action: 'update' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üîÑ API: –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π');
        
        const body = await req.json();
        const { user } = req;
        const { eventIds, updates } = body;

        if (!eventIds || !Array.isArray(eventIds) || eventIds.length === 0) {
          return NextResponse.json(
            { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
            { status: 400 }
          );
        }

        if (!updates || typeof updates !== 'object') {
          return NextResponse.json(
            { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
            { status: 400 }
          );
        }

        let updatedCount = 0;
        const updatedEvents: Event[] = [];

        for (const eventId of eventIds) {
          const eventIndex = mockEvents.findIndex(event => event._id === eventId);
          
          if (eventIndex === -1) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
          }

          const event = mockEvents[eventIndex];

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
          if (user.role === 'trainer' && event.trainerId !== user.id) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥—Ä—É–≥–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
          }

          // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
          const allowedFields = ['status', 'notes', 'location', 'description'];
          const filteredUpdates: Partial<Event> = {};

          for (const field of allowedFields) {
            if (updates[field] !== undefined) {
              if (field === 'status') {
                // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
                const validStatuses: Event['status'][] = ['pending', 'confirmed', 'completed', 'cancelled'];
                if (validStatuses.includes(updates[field] as Event['status'])) {
                  filteredUpdates.status = updates[field] as Event['status'];
                }
              } else {
                (filteredUpdates as any)[field] = updates[field];
              }
            }
          }

          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
          const updatedEvent: Event = {
            ...event,
            ...filteredUpdates,
            updatedAt: new Date().toISOString()
          };

          mockEvents[eventIndex] = updatedEvent;
          updatedEvents.push(updatedEvent);
          updatedCount++;
        }

        console.log(`‚úÖ API: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Å–æ–±—ã—Ç–∏–π`);

        return NextResponse.json({
          success: true,
          data: {
            updatedCount,
            updatedEvents
          },
          message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Å–æ–±—ã—Ç–∏–π`
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// DELETE /api/schedule - –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'schedule', action: 'delete' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üóëÔ∏è API: –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π');
        
        const body = await req.json();
        const { user } = req;
        const { eventIds, softDelete = true } = body;

        if (!eventIds || !Array.isArray(eventIds) || eventIds.length === 0) {
          return NextResponse.json(
            { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã ID —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' },
            { status: 400 }
          );
        }

        let deletedCount = 0;
        const deletedEvents: Event[] = [];

        for (const eventId of eventIds) {
          const eventIndex = mockEvents.findIndex(event => event._id === eventId);
          
          if (eventIndex === -1) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è
          }

          const event = mockEvents[eventIndex];

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
          if (user.role === 'trainer' && event.trainerId !== user.id) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥—Ä—É–≥–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
          }

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
          if (event.status === 'completed' && !softDelete) {
            continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∂–µ—Å—Ç–∫–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
          }

          if (softDelete) {
            // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
            const updatedEvent: Event = {
              ...event,
              status: 'cancelled' as const,
              notes: event.notes ? 
                `${event.notes}\n\n–û—Ç–º–µ–Ω–µ–Ω–æ: ${new Date().toLocaleString()}` : 
                `–û—Ç–º–µ–Ω–µ–Ω–æ: ${new Date().toLocaleString()}`,
              updatedAt: new Date().toISOString()
            };
            mockEvents[eventIndex] = updatedEvent;
            deletedEvents.push(updatedEvent);
          } else {
            // –ñ–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
            const deletedEvent = mockEvents.splice(eventIndex, 1)[0];
            deletedEvents.push(deletedEvent);
          }

          deletedCount++;
        }

        console.log(`‚úÖ API: ${softDelete ? '–æ—Ç–º–µ–Ω–µ–Ω–æ' : '—É–¥–∞–ª–µ–Ω–æ'} ${deletedCount} —Å–æ–±—ã—Ç–∏–π`);

        return NextResponse.json({
          success: true,
          data: {
            deletedCount,
            deletedEvents,
            softDelete
          },
          message: `${softDelete ? '–û—Ç–º–µ–Ω–µ–Ω–æ' : '–£–¥–∞–ª–µ–Ω–æ'} ${deletedCount} —Å–æ–±—ã—Ç–∏–π`
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};
