// app/api/schedule/events/[id]/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Next.js 15)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  let requestData: any = null;
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    requestData = await request.json();
    const resolvedParams = await params;
    const eventId = resolvedParams.id;

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Convex:', eventId, requestData);

    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ Convex
    await convex.mutation("events:update", {
      id: eventId as any, // Convex ID
      ...requestData
    });

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Convex');

    const updatedEvent = {
      _id: eventId,
      ...requestData,
      updatedAt: new Date().toISOString()
    };

    return NextResponse.json(updatedEvent);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Convex:', error);
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –ø–æ–ª—É—á–∏—Ç—å
    if (!requestData) {
      try {
        requestData = await request.json();
      } catch (parseError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö:', parseError);
        return NextResponse.json(
          { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è' },
          { status: 400 }
        );
      }
    }
    
    // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    const resolvedParams = await params;
    const updatedEvent = {
      _id: resolvedParams.id,
      ...requestData,
      updatedAt: new Date().toISOString()
    };

    return NextResponse.json(updatedEvent);
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params;
    const eventId = resolvedParams.id;

    console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Convex:', eventId);

    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ Convex
    await convex.mutation("events:delete_", {
      id: eventId as any // Convex ID
    });

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Convex');

    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑ Convex:', error);
    
    // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
    return NextResponse.json({ success: true });
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const resolvedParams = await params;
    const eventId = resolvedParams.id;

    console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ Convex:', eventId);

    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ Convex
    const event = await convex.query("events:getById", {
      id: eventId as any // Convex ID
    });

    if (event) {
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ Convex');
      
      const formattedEvent = {
        _id: event._id,
        title: event.title,
        description: event.description || '',
        type: event.type,
        startTime: event.startTime,
        endTime: event.endTime,
        trainerId: event.trainerId,
        trainerName: event.trainerName,
        clientId: event.clientId,
        clientName: event.clientName,
        status: event.status,
        location: event.location || '',
        createdAt: event._creationTime,
        createdBy: event.createdBy
      };

      return NextResponse.json(formattedEvent);
    } else {
      return NextResponse.json(
        { error: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑ Convex:', error);
    
    // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const resolvedParams = await params;
    const mockEvent = {
      _id: resolvedParams.id,
      title: 'Mock —Å–æ–±—ã—Ç–∏–µ',
      description: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)',
      type: 'training',
      startTime: new Date().toISOString(),
      endTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer1',
      trainerName: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä',
      clientId: null,
      clientName: null,
      status: 'scheduled',
      location: '–¢–µ—Å—Ç–æ–≤–æ–µ –º–µ—Å—Ç–æ',
      createdAt: new Date().toISOString(),
      createdBy: 'system'
    };

    return NextResponse.json(mockEvent);
  }
}
