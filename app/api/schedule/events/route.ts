// app/api/schedule/events/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ Convex...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Convex
    const eventsFromConvex = await convex.query("events:getAll");
    
    if (eventsFromConvex && eventsFromConvex.length > 0) {
      console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Convex:', eventsFromConvex.length);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      const formattedEvents = eventsFromConvex.map((event: any) => ({
        _id: event._id,
        title: event.title,
        description: event.description || '',
        type: event.type || 'training',
        startTime: event.startTime,
        endTime: event.endTime,
        trainerId: event.trainerId,
        trainerName: event.trainerName,
        clientId: event.clientId || null,
        clientName: event.clientName || null,
        status: event.status || 'scheduled',
        location: event.location || '',
        createdAt: event._creationTime,
        createdBy: event.createdBy || event.trainerId
      }));

      return NextResponse.json(formattedEvents);
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ Convex, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
      return NextResponse.json(getMockEvents());
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ Convex:', error);
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ...');
    
    return NextResponse.json(getMockEvents());
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ Convex...', data);
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ Convex
    const eventId = await convex.mutation("events:create", {
      title: data.title,
      description: data.description || '',
      type: data.type || 'training',
      startTime: data.startTime,
      endTime: data.endTime,
      trainerId: data.trainerId,
      trainerName: data.trainerName,
      clientId: data.clientId || null,
      clientName: data.clientName || null,
      status: 'scheduled',
      location: data.location || '',
      createdBy: data.createdBy || data.trainerId
    });

    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Convex:', eventId);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    const newEvent = {
      _id: eventId,
      title: data.title,
      description: data.description || '',
      type: data.type || 'training',
      startTime: data.startTime,
      endTime: data.endTime,
      trainerId: data.trainerId,
      trainerName: data.trainerName,
      clientId: data.clientId || null,
      clientName: data.clientName || null,
      status: 'scheduled',
      location: data.location || '',
      createdAt: new Date().toISOString(),
      createdBy: data.createdBy || data.trainerId
    };

    return NextResponse.json(newEvent);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Convex:', error);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è fallback
    let fallbackData;
    try {
      fallbackData = await request.json();
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è fallback:', parseError);
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è' },
        { status: 400 }
      );
    }
    
    // Fallback - —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
    const newEvent = {
      _id: `event_${Date.now()}`,
      title: fallbackData.title,
      description: fallbackData.description || '',
      type: fallbackData.type || 'training',
      startTime: fallbackData.startTime,
      endTime: fallbackData.endTime,
      trainerId: fallbackData.trainerId,
      trainerName: fallbackData.trainerName,
      clientId: fallbackData.clientId || null,
      clientName: fallbackData.clientName || null,
      status: 'scheduled',
      location: fallbackData.location || '',
      createdAt: new Date().toISOString(),
      createdBy: fallbackData.createdBy || fallbackData.trainerId
    };

    return NextResponse.json(newEvent);
  }
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
function getMockEvents() {
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  
  return [
    {
      _id: 'event1',
      title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
      description: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Ä—Ö —Ç–µ–ª–∞',
      type: 'training',
      startTime: new Date(today.getTime() + 10 * 60 * 60 * 1000).toISOString(),
      endTime: new Date(today.getTime() + 11 * 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer1',
      trainerName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
      clientId: 'client1',
      clientName: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      status: 'confirmed',
      location: '–ó–∞–ª ‚Ññ1',
      createdAt: new Date().toISOString(),
      createdBy: 'trainer1'
    },
    {
      _id: 'event2',
      title: '–ì—Ä—É–ø–ø–æ–≤–∞—è –π–æ–≥–∞',
      description: '–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –π–æ–≥–∏',
      type: 'training',
      startTime: new Date(today.getTime() + 24 * 60 * 60 * 1000 + 9 * 60 * 60 * 1000).toISOString(),
      endTime: new Date(today.getTime() + 24 * 60 * 60 * 1000 + 10 * 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer2',
      trainerName: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
      status: 'scheduled',
      location: '–ô–æ–≥–∞-—Å—Ç—É–¥–∏—è',
      createdAt: new Date().toISOString(),
      createdBy: 'trainer2'
    },
    {
      _id: 'event3',
      title: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
      description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º',
      type: 'training',
      startTime: new Date(today.getTime() + 14 * 60 * 60 * 1000).toISOString(),
      endTime: new Date(today.getTime() + 15 * 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer1',
      trainerName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
      clientId: 'client3',
      clientName: '–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞',
      status: 'confirmed',
      location: '–ó–∞–ª ‚Ññ2',
      createdAt: new Date().toISOString(),
      createdBy: 'trainer1'
    },
    {
      _id: 'event4',
      title: '–ë–æ–∫—Å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
      description: '–û—Å–Ω–æ–≤—ã –±–æ–∫—Å–∞ –∏ —Ç–µ—Ö–Ω–∏–∫–∞ —É–¥–∞—Ä–æ–≤',
      type: 'training',
      startTime: new Date(today.getTime() + 48 * 60 * 60 * 1000 + 18 * 60 * 60 * 1000).toISOString(),
      endTime: new Date(today.getTime() + 48 * 60 * 60 * 1000 + 19 * 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer5',
      trainerName: '–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤',
      clientId: 'client4',
      clientName: '–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤',
      status: 'completed',
      location: '–ë–æ–∫—Å–µ—Ä—Å–∫–∏–π –∑–∞–ª',
      createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
      createdBy: 'trainer5'
    },
    {
      _id: 'event5',
      title: '–ó—É–º–±–∞',
      description: '–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
      type: 'training',
      startTime: new Date(today.getTime() + 72 * 60 * 60 * 1000 + 16 * 60 * 60 * 1000).toISOString(),
      endTime: new Date(today.getTime() + 72 * 60 * 60 * 1000 + 17 * 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer4',
      trainerName: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
      clientId: 'client2',
      clientName: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
      status: 'scheduled',
      location: '–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π –∑–∞–ª',
      createdAt: new Date().toISOString(),
      createdBy: 'trainer4'
    },
    {
      _id: 'event6',
      title: '–ü–ª–∞–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
      description: '–û–±—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–º –ø–ª–∞–≤–∞–Ω–∏—è',
      type: 'training',
      startTime: new Date(today.getTime() + 96 * 60 * 60 * 1000 + 11 * 60 * 60 * 1000).toISOString(),
      endTime: new Date(today.getTime() + 96 * 60 * 60 * 1000 + 12 * 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer3',
      trainerName: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
      clientId: 'client5',
      clientName: '–û–ª—å–≥–∞ –ü–µ—Ç—Ä–æ–≤–∞',
      status: 'scheduled',
      location: '–ë–∞—Å—Å–µ–π–Ω',
      createdAt: new Date().toISOString(),
      createdBy: 'trainer3'
    },
    {
      _id: 'event7',
      title: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é',
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è',
      type: 'consultation',
      startTime: new Date(today.getTime() + 120 * 60 * 60 * 1000 + 15 * 60 * 60 * 1000).toISOString(),
      endTime: new Date(today.getTime() + 120 * 60 * 60 * 1000 + 16 * 60 * 60 * 1000).toISOString(),
      trainerId: 'trainer1',
      trainerName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
      clientId: 'client6',
      clientName: '–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤',
      status: 'confirmed',
      location: '–ö–∞–±–∏–Ω–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π',
      createdAt: new Date().toISOString(),
      createdBy: 'trainer1'
    }
  ];
}
