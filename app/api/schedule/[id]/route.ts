// app/api/schedule/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';
import { mockSessions, mockTrainers, mockClients, type Session } from '@/lib/mock-data';

// GET /api/schedule/[id] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
export const GET = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'schedule', action: 'read' },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`üìÖ API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${id}`);

        const session = mockSessions.find((s: Session) => s.id === id);
        if (!session) {
          return NextResponse.json(
            { success: false, error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
            { status: 404 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
        if (user.role === 'trainer' && session.trainerId !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏' },
            { status: 403 }
          );
        }

        if (user.role === 'client' && session.clientId !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏' },
            { status: 403 }
          );
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        const trainer = mockTrainers.find(t => t.id === session.trainerId);
        const client = mockClients.find(c => c.id === session.clientId);

        const enrichedSession = {
          ...session,
          trainerName: trainer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
          clientName: client?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
          trainerPhone: trainer?.phone,
          clientPhone: client?.phone,
          trainerEmail: trainer?.email,
          clientEmail: client?.email
        };

        return NextResponse.json({
          success: true,
          data: enrichedSession
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PUT /api/schedule/[id] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { 
      resource: 'schedule', 
      action: 'update',
      requireOwnership: true,
      getOwnerId: async (req) => {
        const params = await context.params;
        const sessionId = params.id;
        const session = mockSessions.find((s: Session) => s.id === sessionId);
        return session?.trainerId; // –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Å—Å–∏–∏ - —Ç—Ä–µ–Ω–µ—Ä
      }
    },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;
        const body = await req.json();

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`‚úèÔ∏è API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${id}`);

        const sessionIndex = mockSessions.findIndex((s: Session) => s.id === id);
        if (sessionIndex === -1) {
          return NextResponse.json(
            { success: false, error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
            { status: 404 }
          );
        }

        const session = mockSessions[sessionIndex];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (user.role === 'trainer' && session.trainerId !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏' },
            { status: 403 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (body.trainerId && body.trainerId !== session.trainerId) {
          const trainer = mockTrainers.find(t => t.id === body.trainerId);
          if (!trainer) {
            return NextResponse.json(
              { success: false, error: '–£–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
              { status: 400 }
            );
          }
        }

        if (body.clientId && body.clientId !== session.clientId) {
          const client = mockClients.find(c => c.id === body.clientId);
          if (!client) {
            return NextResponse.json(
              { success: false, error: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
              { status: 400 }
            );
          }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        if (body.date || body.startTime || body.endTime) {
          const newDate = body.date || session.date;
          const newStartTime = body.startTime || session.startTime;
          const newEndTime = body.endTime || session.endTime;
          const trainerId = body.trainerId || session.trainerId;

          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          const newStartDateTime = new Date(`${newDate}T${newStartTime}`);
          const newEndDateTime = new Date(`${newDate}T${newEndTime}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
          if (newStartDateTime >= newEndDateTime) {
            return NextResponse.json(
              { success: false, error: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è' },
              { status: 400 }
            );
          }

          const conflictingSession = mockSessions.find((s: Session) => 
            s.id !== id &&
            s.trainerId === trainerId &&
            s.status !== 'cancelled' &&
            s.date === newDate &&
            (
              (newStartTime >= s.startTime && newStartTime < s.endTime) ||
              (newEndTime > s.startTime && newEndTime <= s.endTime) ||
              (newStartTime <= s.startTime && newEndTime >= s.endTime)
            )
          );

          if (conflictingSession) {
            return NextResponse.json(
              { success: false, error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π' },
              { status: 409 }
            );
          }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const validStatuses = ['scheduled', 'completed', 'cancelled', 'no-show'];
        if (body.status && !validStatuses.includes(body.status)) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏' },
            { status: 400 }
          );
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
        const validTypes = ['personal', 'group', 'consultation'];
        if (body.type && !validTypes.includes(body.type)) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏' },
            { status: 400 }
          );
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const allowedFields = [
          'trainerId', 'clientId', 'date', 'startTime', 'endTime', 
          'status', 'type', 'notes'
        ];

        const updateData: Partial<Session> = {};
        for (const field of allowedFields) {
          if (body[field] !== undefined) {
            updateData[field as keyof Session] = body[field];
          }
        }

        const updatedSession = {
          ...session,
          ...updateData,
          id, // ID –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è
          createdAt: session.createdAt, // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏–∑–º–µ–Ω—è—Ç—å—Å—è
          createdBy: session.createdBy // –°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è
        };

        mockSessions[sessionIndex] = updatedSession;

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const trainer = mockTrainers.find(t => t.id === updatedSession.trainerId);
        const client = mockClients.find(c => c.id === updatedSession.clientId);

        console.log(`‚úÖ API: —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ - ${updatedSession.date} ${updatedSession.startTime}`);

        return NextResponse.json({
          success: true,
          data: {
            ...updatedSession,
            trainerName: trainer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
            clientName: client?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'
          },
          message: '–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// DELETE /api/schedule/[id] - –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { 
      resource: 'schedule', 
      action: 'delete',
      requireOwnership: true,
      getOwnerId: async (req) => {
        const params = await context.params;
        const sessionId = params.id;
        const session = mockSessions.find((s: Session) => s.id === sessionId);
        return session?.trainerId;
      }
    },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${id}`);

        const sessionIndex = mockSessions.findIndex((s: Session) => s.id === id);
        if (sessionIndex === -1) {
          return NextResponse.json(
            { success: false, error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
            { status: 404 }
          );
        }

        const session = mockSessions[sessionIndex];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (user.role === 'trainer' && session.trainerId !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏' },
            { status: 403 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
        if (session.status === 'completed') {
          return NextResponse.json(
            { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é' },
            { status: 400 }
          );
        }

        // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ cancelled)
        const cancelledSession = {
          ...session,
          status: 'cancelled' as const,
          notes: session.notes ? `${session.notes}\n\n–û—Ç–º–µ–Ω–µ–Ω–æ: ${new Date().toLocaleString()}` : `–û—Ç–º–µ–Ω–µ–Ω–æ: ${new Date().toLocaleString()}`
        };

        mockSessions[sessionIndex] = cancelledSession;

        console.log(`‚úÖ API: —Å–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ - ${session.date} ${session.startTime}`);

        return NextResponse.json({
          success: true,
          message: '–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PATCH /api/schedule/[id] - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞)
export const PATCH = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'schedule', action: 'update' },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;
        const body = await req.json();

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Å–µ—Å—Å–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`üîß API: —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${id}`);

        const sessionIndex = mockSessions.findIndex((s: Session) => s.id === id);
        if (sessionIndex === -1) {
          return NextResponse.json(
            { success: false, error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
            { status: 404 }
          );
        }

        const session = mockSessions[sessionIndex];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if (user.role === 'trainer' && session.trainerId !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏' },
            { status: 403 }
          );
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (body.action) {
          switch (body.action) {
            case 'complete':
              if (session.status !== 'scheduled') {
                return NextResponse.json(
                  { success: false, error: '–ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é' },
                  { status: 400 }
                );
              }
              session.status = 'completed';
              if (body.notes) {
                session.notes = body.notes;
              }
              break;

            case 'markNoShow':
              if (session.status !== 'scheduled') {
                return NextResponse.json(
                                    { success: false, error: '–ú–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—è–≤–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏' },
                  { status: 400 }
                );
              }
              session.status = 'no-show';
              session.notes = session.notes ? 
                `${session.notes}\n\n–ö–ª–∏–µ–Ω—Ç –Ω–µ —è–≤–∏–ª—Å—è: ${new Date().toLocaleString()}` : 
                `–ö–ª–∏–µ–Ω—Ç –Ω–µ —è–≤–∏–ª—Å—è: ${new Date().toLocaleString()}`;
              break;

            case 'reschedule':
              if (!body.newDate || !body.newStartTime || !body.newEndTime) {
                return NextResponse.json(
                  { success: false, error: '–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è' },
                  { status: 400 }
                );
              }

              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
              const conflictingSession = mockSessions.find((s: Session) => 
                s.id !== id &&
                s.trainerId === session.trainerId &&
                s.status !== 'cancelled' &&
                s.date === body.newDate &&
                (
                  (body.newStartTime >= s.startTime && body.newStartTime < s.endTime) ||
                  (body.newEndTime > s.startTime && body.newEndTime <= s.endTime) ||
                  (body.newStartTime <= s.startTime && body.newEndTime >= s.endTime)
                )
              );

              if (conflictingSession) {
                return NextResponse.json(
                  { success: false, error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π' },
                  { status: 409 }
                );
              }

              session.date = body.newDate;
              session.startTime = body.newStartTime;
              session.endTime = body.newEndTime;
              session.notes = session.notes ? 
                `${session.notes}\n\n–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${new Date().toLocaleString()}` : 
                `–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: ${new Date().toLocaleString()}`;
              break;

            case 'addNotes':
              if (typeof body.notes === 'string') {
                session.notes = session.notes ? 
                  `${session.notes}\n\n${body.notes}` : 
                  body.notes;
              } else {
                return NextResponse.json(
                  { success: false, error: '–ó–∞–º–µ—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π' },
                  { status: 400 }
                );
              }
              break;

            case 'changeType':
              const validTypes = ['personal', 'group', 'consultation'];
              if (!validTypes.includes(body.newType)) {
                return NextResponse.json(
                  { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏' },
                  { status: 400 }
                );
              }
              session.type = body.newType;
              break;

            default:
              return NextResponse.json(
                { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
                { status: 400 }
              );
          }

          mockSessions[sessionIndex] = session;

          // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          const trainer = mockTrainers.find(t => t.id === session.trainerId);
          const client = mockClients.find(c => c.id === session.clientId);

          return NextResponse.json({
            success: true,
            data: {
              ...session,
              trainerName: trainer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
              clientName: client?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'
            },
            message: `–î–µ–π—Å—Ç–≤–∏–µ "${body.action}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`
          });
        }

        return NextResponse.json(
          { success: false, error: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' },
          { status: 400 }
        );

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

