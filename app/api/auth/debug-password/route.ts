// app/api/auth/debug-password/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import bcrypt from 'bcryptjs';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

interface PasswordDebugResults {
  inputPassword: string;
  storedPassword: string;
  storedPasswordLength: number;
  bcryptCheck?: boolean;
  bcryptError?: string;
  directCheck?: boolean;
  newHash?: string;
  newHashCheck?: boolean;
  hashError?: string;
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { email, password } = body;

    console.log("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è:", email);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const users = await convex.query("users:getAll");
    const user = users.find((u: any) => u.email?.toLowerCase() === email.toLowerCase());

    if (!user) {
      return NextResponse.json({
        error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        availableEmails: users.map((u: any) => u.email)
      });
    }

    console.log("üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", {
      name: user.name,
      email: user.email,
      role: user.role,
      hasPassword: !!user.password,
      passwordLength: user.password ? user.password.length : 0,
      passwordStart: user.password ? user.password.substring(0, 10) : "–Ω–µ—Ç"
    });

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    const results: PasswordDebugResults = {
      inputPassword: password,
      storedPassword: user.password ? user.password.substring(0, 20) + "..." : "–Ω–µ—Ç",
      storedPasswordLength: user.password ? user.password.length : 0,
    };

    if (user.password) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
        const bcryptResult = await bcrypt.compare(password, user.password);
        results.bcryptCheck = bcryptResult;
        console.log("üîë bcrypt –ø—Ä–æ–≤–µ—Ä–∫–∞:", bcryptResult);
      } catch (bcryptError) {
        const errorMessage = bcryptError instanceof Error ? bcryptError.message : 'Unknown bcrypt error';
        results.bcryptError = errorMessage;
        console.log("‚ùå –û—à–∏–±–∫–∞ bcrypt:", bcryptError);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
      const directCheck = password === user.password;
      results.directCheck = directCheck;
      console.log("üîë –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:", directCheck);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      try {
        const newHash = await bcrypt.hash(password, 12);
        results.newHash = newHash.substring(0, 20) + "...";
        
        const newHashCheck = await bcrypt.compare(password, newHash);
        results.newHashCheck = newHashCheck;
        console.log("üîë –ù–æ–≤—ã–π —Ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç:", newHashCheck);
      } catch (hashError) {
        const errorMessage = hashError instanceof Error ? hashError.message : 'Unknown hash error';
        results.hashError = errorMessage;
      }
    }

    return NextResponse.json({
      success: true,
      user: {
        name: user.name,
        email: user.email,
        role: user.role
      },
      passwordDebug: results
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞: ' + (error instanceof Error ? error.message : 'Unknown error') },
      { status: 500 }
    );
  }
}
