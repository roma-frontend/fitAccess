// app/api/auth/reset-admin-password/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import bcrypt from 'bcryptjs';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { email, newPassword } = body;

    console.log("üîÑ –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è:", email);

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const users = await convex.query("users:getAll");
    const user = users.find((u: any) => u.email?.toLowerCase() === email.toLowerCase());

    if (!user) {
      return NextResponse.json({
        error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
      }, { status: 404 });
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(newPassword, 12);
    console.log("üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω");

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await convex.mutation("users:deleteUser", { id: user._id });
      console.log("üóëÔ∏è –°—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");
    } catch (deleteError) {
      console.log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", deleteError);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
    const userId = await convex.mutation("users:create", {
      name: user.name,
      email: user.email,
      password: hashedPassword,
      role: "admin",
      photoUrl: user.photoUrl || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=dc2626&color=fff`,
      faceDescriptor: user.faceDescriptor || [],
    });

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º");

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const testResult = await bcrypt.compare(newPassword, hashedPassword);
    console.log("üß™ –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è:", testResult);

    return NextResponse.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω',
      userId,
      passwordTest: testResult,
      user: {
        name: user.name,
        email: user.email,
        role: "admin"
      },
      debug: {
        hashedPasswordLength: hashedPassword.length,
        hashedPasswordStart: hashedPassword.substring(0, 20) + "..."
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞: ' + (error instanceof Error ? error.message : 'Unknown error') },
      { status: 500 }
    );
  }
}
