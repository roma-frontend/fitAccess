// app/api/auth/me/route.ts (–≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π)
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';

export async function GET(request: NextRequest) {
  console.log('üîç GET /api/auth/me - –ù–ê–ß–ê–õ–û –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∫—É–∫–∏
    const allCookies = request.cookies.getAll();
    console.log('üç™ –í—Å–µ –∫—É–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ:', allCookies);
    
    const sessionId = request.cookies.get('session_id')?.value;
    console.log('üîë Session ID:', sessionId ? `–Ω–∞–π–¥–µ–Ω: ${sessionId.substring(0, 20)}...` : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    
    if (!sessionId) {
      console.log('‚ùå Session ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 401');
      return NextResponse.json({ 
        success: false, 
        error: '–°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
      }, { status: 401 });
    }

    console.log('üîß –í—ã–∑—ã–≤–∞–µ–º getSession...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
    let sessionData;
    try {
      sessionData = getSession(sessionId);
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç getSession:', sessionData ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    } catch (sessionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ getSession:', sessionError);
      return NextResponse.json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏' 
      }, { status: 500 });
    }
    
    if (!sessionData) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 401');
      return NextResponse.json({ 
        success: false, 
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      }, { status: 401 });
    }

    console.log('üìä –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', {
      sessionId: sessionData.id?.substring(0, 20) + '...',
      userId: sessionData.user?.id,
      userName: sessionData.user?.name,
      userRole: sessionData.user?.role,
      createdAt: sessionData.createdAt,
      expiresAt: sessionData.expiresAt
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    if (!sessionData.user) {
      console.error('‚ùå –í —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Å—Å–∏–∏' 
      }, { status: 500 });
    }

    console.log('‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è:', sessionData.user.name);
    
    const responseData = {
      success: true,
      user: {
        id: sessionData.user.id,
        name: sessionData.user.name,
        email: sessionData.user.email,
        role: sessionData.user.role
      }
    };

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç:', responseData);
    
    return NextResponse.json(responseData);
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ –≤ /api/auth/me:', error);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
    
    return NextResponse.json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
