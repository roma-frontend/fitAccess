// app/api/auth/me/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withAuth, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockTrainers, mockClients, Trainer, Client } from '@/lib/mock-data';

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
interface TrainerProfile extends Trainer {
  type: 'trainer';
  lastLogin?: string;
}

interface ClientProfile extends Client {
  type: 'client';
  lastLogin?: string;
}

type UserProfile = TrainerProfile | ClientProfile;

// GET /api/auth/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export const GET = withAuth(async (req: AuthenticatedRequest) => {
  try {
    console.log('üîê API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ');

    const { user } = req;

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let foundUser: Trainer | Client | undefined = mockTrainers.find(t => t.id === user.id);
    let userType: 'trainer' | 'client' = 'trainer';

    if (!foundUser) {
      foundUser = mockClients.find(c => c.id === user.id);
      userType = 'client';
    }

    if (!foundUser) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ' },
        { status: 404 }
      );
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    let userInfo: UserProfile;

    if (userType === 'trainer') {
      const trainer = foundUser as Trainer;
      userInfo = {
        ...trainer,
        type: 'trainer',
        lastLogin: new Date().toISOString()
      };
    } else {
      const client = foundUser as Client;
      userInfo = {
        ...client,
        type: 'client',
        lastLogin: new Date().toISOString()
      };
    }

    console.log(`‚úÖ API: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è ${foundUser.name} (${userType})`);

    return NextResponse.json({
      success: true,
      data: userInfo
    });

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ' },
      { status: 500 }
    );
  }
});

// PUT /api/auth/me - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const PUT = withAuth(async (req: AuthenticatedRequest) => {
  try {
    console.log('‚úèÔ∏è API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    const { user } = req;
    const body = await req.json();

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userIndex = mockTrainers.findIndex(t => t.id === user.id);
    let userType: 'trainer' | 'client' = 'trainer';

    if (userIndex === -1) {
      userIndex = mockClients.findIndex(c => c.id === user.id);
      userType = 'client';
    }

    if (userIndex === -1) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è email
    if (body.email && body.email !== user.email) {
      const emailExists = [
        ...mockTrainers,
        ...mockClients
      ].some(u => u.email === body.email && u.id !== user.id);

      if (emailExists) {
        return NextResponse.json(
          { success: false, error: 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' },
          { status: 409 }
        );
      }
    }

    if (userType === 'trainer') {
      const trainer = mockTrainers[userIndex];
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
      const allowedTrainerFields = ['name', 'phone', 'email', 'specialization', 'experience'];
      const updatedTrainerData: Partial<Trainer> = {};
      
      allowedTrainerFields.forEach(field => {
        if (body[field] !== undefined) {
          (updatedTrainerData as any)[field] = body[field];
        }
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π —Ç—Ä–µ–Ω–µ—Ä–∞
      if (body.specialization && !Array.isArray(body.specialization)) {
        return NextResponse.json(
          { success: false, error: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º' },
          { status: 400 }
        );
      }

      if (body.experience && (typeof body.experience !== 'number' || body.experience < 0)) {
        return NextResponse.json(
          { success: false, error: '–û–ø—ã—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' },
          { status: 400 }
        );
      }

      const updatedTrainer: Trainer = {
        ...trainer,
        ...updatedTrainerData,
        updatedAt: new Date().toISOString()
      };

      mockTrainers[userIndex] = updatedTrainer;

      console.log(`‚úÖ API: –ø—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${updatedTrainer.name}`);

      return NextResponse.json({
        success: true,
        data: { ...updatedTrainer, type: 'trainer' },
        message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });

    } else {
      const client = mockClients[userIndex];
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
      const allowedClientFields = ['name', 'phone', 'email'];
      const updatedClientData: Partial<Client> = {};
      
      allowedClientFields.forEach(field => {
        if (body[field] !== undefined) {
          (updatedClientData as any)[field] = body[field];
        }
      });

      const updatedClient: Client = {
        ...client,
        ...updatedClientData,
        updatedAt: new Date().toISOString()
      };

      mockClients[userIndex] = updatedClient;

      console.log(`‚úÖ API: –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${updatedClient.name}`);

      return NextResponse.json({
        success: true,
        data: { ...updatedClient, type: 'client' },
        message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });
    }

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' },
      { status: 500 }
    );
  }
});

// PATCH /api/auth/me - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
export const PATCH = withAuth(async (req: AuthenticatedRequest) => {
  try {
    console.log('üîß API: —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    const { user } = req;
    const body = await req.json();

    if (!body.action) {
      return NextResponse.json(
        { success: false, error: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' },
        { status: 400 }
      );
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userIndex = mockTrainers.findIndex(t => t.id === user.id);
    let userType: 'trainer' | 'client' = 'trainer';

    if (userIndex === -1) {
      userIndex = mockClients.findIndex(c => c.id === user.id);
      userType = 'client';
    }

    if (userIndex === -1) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    switch (body.action) {
      case 'changePassword':
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
        if (!body.currentPassword || !body.newPassword) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å' },
            { status: 400 }
          );
        }

        if (body.newPassword.length < 8) {
          return NextResponse.json(
            { success: false, error: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤' },
            { status: 400 }
          );
        }

        console.log(`üîë API: –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        break;

      case 'updateNotifications':
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log(`üîî API: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        break;

      case 'updatePrivacy':
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        console.log(`üîí API: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);
        break;

      default:
        return NextResponse.json(
          { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
          { status: 400 }
        );
    }

    return NextResponse.json({
      success: true,
      message: `–î–µ–π—Å—Ç–≤–∏–µ "${body.action}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`
    });

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' },
      { status: 500 }
    );
  }
});

// DELETE /api/auth/me - –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const DELETE = withAuth(async (req: AuthenticatedRequest) => {
  try {
    console.log('üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    const { user } = req;
    const body = await req.json();

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    if (!body.confirmDelete || body.confirmDelete !== 'DELETE_MY_ACCOUNT') {
      return NextResponse.json(
        { success: false, error: '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ' },
        { status: 400 }
      );
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userIndex = mockTrainers.findIndex(t => t.id === user.id);
    let userType: 'trainer' | 'client' = 'trainer';

    if (userIndex === -1) {
      userIndex = mockClients.findIndex(c => c.id === user.id);
      userType = 'client';
    }

    if (userIndex === -1) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    if (userType === 'trainer') {
      const trainer = mockTrainers[userIndex];
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (trainer.activeClients > 0) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏' },
          { status: 400 }
        );
      }

      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      mockTrainers[userIndex] = {
        ...trainer,
        status: 'inactive',
        updatedAt: new Date().toISOString()
      };
    } else {
      const client = mockClients[userIndex];
      
      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      mockClients[userIndex] = {
        ...client,
        status: 'inactive',
        updatedAt: new Date().toISOString()
      };
    }

    console.log(`‚úÖ API: –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`);

    return NextResponse.json({
      success: true,
      message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞' },
      { status: 500 }
    );
  }
});
