// app/api/auth/qr-login/route.ts (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import jwt from 'jsonwebtoken';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    console.log('üì± –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ QR-–∫–æ–¥—É');

    const body = await request.json();
    const { qrData } = body;

    if (!qrData) {
      return NextResponse.json(
        { error: 'QR-–∫–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' },
        { status: 400 }
      );
    }

    console.log('üîç –î–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞:', qrData);

    // –ü–∞—Ä—Å–∏–º QR-–∫–æ–¥ (–æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: "fitaccess:user_id" –∏–ª–∏ email)
    let userId = null;
    let userEmail = null;

    if (qrData.startsWith('fitaccess:')) {
      userId = qrData.replace('fitaccess:', '');
    } else if (qrData.includes('@')) {
      userEmail = qrData;
    } else {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞' },
        { status: 400 }
      );
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user;
    if (userId) {
      user = await convex.query("users:getById", { id: userId });
    } else if (userEmail) {
      user = await convex.query("users:getByEmail", { email: userEmail });
    }

    if (!user) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ QR-–∫–æ–¥—É:', user.email);

    if (!user.isActive) {
      return NextResponse.json(
        { error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await convex.mutation("users:updateLastLogin", {
      userId: user._id,
      timestamp: Date.now()
    });

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      {
        userId: user._id,
        email: user.email,
        role: user.role,
        name: user.name
      },
      process.env.JWT_SECRET!,
      { expiresIn: '24h' }
    );

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫—É–∫–∏
    const response = NextResponse.json({
      success: true,
      user: {
        userId: user._id,
        email: user.email,
        name: user.name,
        role: user.role
      },
      method: 'qr_code'
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
    response.cookies.set('auth_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 24 * 60 * 60,
      path: '/'
    });

    console.log('üéâ –í—Ö–æ–¥ –ø–æ QR-–∫–æ–¥—É —É—Å–ø–µ—à–µ–Ω');
    return response;

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ QR-–∫–æ–¥—É:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
