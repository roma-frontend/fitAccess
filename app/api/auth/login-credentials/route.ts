// app/api/auth/login-credentials/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import { createToken } from '@/lib/auth';
import bcrypt from 'bcryptjs';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { email, password } = body;

    console.log("üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è:", email);
    console.log("üìã –ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π:", password?.length);

    if (!email || !password) {
      console.log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç email –∏–ª–∏ –ø–∞—Ä–æ–ª—å");
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const users = await convex.query("users:getAll");
    console.log("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:", users.length);
    console.log("üìß –î–æ—Å—Ç—É–ø–Ω—ã–µ emails:", users.map((u: any) => u.email));
    
    const user = users.find((u: any) => u.email?.toLowerCase() === email.toLowerCase());

    if (!user) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è email:", email);
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:", {
      name: user.name,
      email: user.email,
      role: user.role,
      hasPassword: !!user.password,
      passwordLength: user.password ? user.password.length : 0,
      passwordStart: user.password ? user.password.substring(0, 10) + "..." : "–Ω–µ—Ç"
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    let isValidPassword = false;
    
    if (!user.password) {
      console.log("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–∞—Ä–æ–ª—è");
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –ø–æ –ø–∞—Ä–æ–ª—é' },
        { status: 401 }
      );
    }

    try {
      isValidPassword = await bcrypt.compare(password, user.password);
      console.log("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ bcrypt:", isValidPassword);
      
      if (!isValidPassword) {
        isValidPassword = password === user.password;
        console.log("üîë –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:", isValidPassword);
      }
    } catch (bcryptError) {
      console.log("‚ö†Ô∏è –û—à–∏–±–∫–∞ bcrypt:", bcryptError);
      isValidPassword = password === user.password;
      console.log("üîë –ü—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ bcrypt:", isValidPassword);
    }

    if (!isValidPassword) {
      console.log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å");
      console.log("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä–æ–ª—è:");
      console.log("  - –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", password);
      console.log("  - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):", user.password.substring(0, 20));
      console.log("  - –î–ª–∏–Ω–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ:", password.length);
      console.log("  - –î–ª–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ:", user.password.length);
      
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    let userRole = user.role || 'user';
    
    if (email.toLowerCase() === 'romangulanyan@gmail.com') {
      userRole = 'admin';
      console.log("üëë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
    }

    console.log("üé≠ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userRole);

    const token = await createToken({
      userId: user._id,
      name: user.name,
      email: user.email,
      role: userRole,
    });

    console.log("üé´ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");

    const response = NextResponse.json({
      success: true,
      user: {
        userId: user._id,
        name: user.name,
        email: user.email,
        role: userRole
      }
    });

    response.cookies.set('auth_token', token, {
      httpOnly: true,
      path: '/',
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 8,
      sameSite: 'strict',
    });

    response.cookies.set('user_role', userRole, {
      path: '/',
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 8,
      sameSite: 'strict',
    });

    console.log("üç™ Cookies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");

    try {
      await convex.mutation("accessLogs:create", {
        userId: user._id,
        success: true,
        deviceInfo: request.headers.get('user-agent') || undefined,
        ipAddress: request.headers.get('x-forwarded-for')?.split(',')[0] || undefined,
      });
      console.log("üìù –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω");
    } catch (logError) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞:', logError);
    }

    console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.name, "—Å —Ä–æ–ª—å—é:", userRole);

    return response;

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: ' + (error instanceof Error ? error.message : 'Unknown error') },
      { status: 500 }
    );
  }
}
