// app/api/auth/member-login/route.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
  
  try {
    const body = await request.json();
    const { email, password } = body;

    console.log('üìß Email —É—á–∞—Å—Ç–Ω–∏–∫–∞:', email);

    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT_SECRET
    if (!process.env.JWT_SECRET) {
      console.error('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' },
        { status: 500 }
      );
    }
    console.log('‚úÖ JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users...');
    const user = await convex.query("users:getByEmail", { email });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ users');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ members –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      try {
        const member = await convex.query("members:getByEmail", { email });
        if (member) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –≤ members, –Ω–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤ users');
          return NextResponse.json(
            { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.' },
            { status: 401 }
          );
        }
      } catch (memberError) {
        console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ members –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
      }

      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 401 }
      );
    }

    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', { 
      id: user._id, 
      role: user.role, 
      isActive: user.isActive,
      email: user.email,
      name: user.name
    });

    if (!user.isActive) {
      console.log('‚ùå –ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
      return NextResponse.json(
        { error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫
    if (user.role !== 'member') {
      console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å:', user.role);
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...');
    console.log('üîê –•–µ—à –ø–∞—Ä–æ–ª—è –≤ –ë–î (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤):', user.password?.substring(0, 20));
    
    const isPasswordValid = await bcrypt.compare(password, user.password);
    console.log('üîê –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', isPasswordValid);
    
    if (!isPasswordValid) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' },
        { status: 401 }
      );
    }

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π');

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    try {
      await convex.mutation("users:updateLastLogin", {
        userId: user._id,
        timestamp: Date.now()
      });
      console.log('‚úÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (updateError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞:', updateError);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    }

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    console.log('üé´ –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω...');
    const tokenPayload = {
      userId: user._id,
      email: user.email,
      role: user.role,
      name: user.name
    };
    console.log('üé´ Payload —Ç–æ–∫–µ–Ω–∞:', tokenPayload);

    const token = jwt.sign(
      tokenPayload,
      process.env.JWT_SECRET!,
      { expiresIn: '24h' }
    );

    console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω, –¥–ª–∏–Ω–∞:', token.length);
    console.log('üé´ –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤):', token.substring(0, 30));

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    console.log('üì§ –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç...');
    const responseData = {
      success: true,
      user: {
        userId: user._id,
        email: user.email,
        name: user.name,
        role: user.role
      }
    };

    const response = NextResponse.json(responseData);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console.log('üç™ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏...');
    const cookieOptions = {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax' as const,
      maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
      path: '/'
    };
    
    console.log('üç™ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—É–∫–∏:', cookieOptions);
    
    response.cookies.set('auth_token', token, cookieOptions);
    
    console.log('‚úÖ –ö—É–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('üéâ –í—Ö–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É—Å–ø–µ—à–µ–Ω');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —á–∏—Ç–∞–µ–º –∫—É–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
    const setCookieHeader = response.headers.get('set-cookie');
    console.log('üç™ Set-Cookie –∑–∞–≥–æ–ª–æ–≤–æ–∫:', setCookieHeader);

    return response;

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    console.error('üí• Stack trace:', error instanceof Error ? error.stack : 'No stack');
    
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}
