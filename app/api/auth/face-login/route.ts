// app/api/auth/face-login/route.ts (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import jwt from 'jsonwebtoken';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ –ª–∏—Ü—É');

    const body = await request.json();
    const { imageData } = body;

    if (!imageData) {
      return NextResponse.json(
        { error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' },
        { status: 400 }
      );
    }

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü–∞
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
    console.log('üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏ –ª–∏—Ü
    const users = await convex.query("users:getAllWithFaceDescriptors");
    
    if (!users || users.length === 0) {
      return NextResponse.json(
        { error: '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –ª–∏—Ü' },
        { status: 404 }
      );
    }

    const recognizedUser = users.find((user: { faceDescriptor: string | any[]; }) => user.faceDescriptor && user.faceDescriptor.length > 0);
    
    if (!recognizedUser) {
      return NextResponse.json(
        { error: '–õ–∏—Ü–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ' },
        { status: 401 }
      );
    }

    console.log('‚úÖ –õ–∏—Ü–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', recognizedUser.email);

    if (!recognizedUser.isActive) {
      return NextResponse.json(
        { error: '–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    await convex.mutation("users:updateLastLogin", {
      userId: recognizedUser._id,
      timestamp: Date.now()
    });

    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      {
        userId: recognizedUser._id,
        email: recognizedUser.email,
        role: recognizedUser.role,
        name: recognizedUser.name
      },
      process.env.JWT_SECRET!,
      { expiresIn: '24h' }
    );

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫—É–∫–∏
    const response = NextResponse.json({
      success: true,
      user: {
        userId: recognizedUser._id,
        email: recognizedUser.email,
        name: recognizedUser.name,
        role: recognizedUser.role
      },
      method: 'face_recognition'
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
    response.cookies.set('auth_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 24 * 60 * 60,
      path: '/'
    });

    console.log('üéâ –í—Ö–æ–¥ –ø–æ –ª–∏—Ü—É —É—Å–ø–µ—à–µ–Ω');
    return response;

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ –ª–∏—Ü—É:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
