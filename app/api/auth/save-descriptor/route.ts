// app/api/auth/save-face-descriptor/route.ts (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞ –ª–∏—Ü–∞');

    const body = await request.json();
    const { userId, faceDescriptor } = body;

    if (!userId || !faceDescriptor) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 400 }
      );
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await convex.mutation("users:saveFaceDescriptor", {
      userId,
      faceDescriptor
    });

    console.log('‚úÖ –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    return NextResponse.json({
      success: true,
      message: '–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
