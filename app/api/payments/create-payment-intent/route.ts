import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { ConvexHttpClient } from "convex/browser";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-04-30.basil',
});

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const { 
      items, 
      totalAmount, 
      pickupType, 
      notes, 
      userId, 
      memberId,
      memberEmail, 
      customerName,
      customerPhone
    } = await request.json();

    console.log('üí≥ Creating payment intent with full user data:', {
      totalAmount,
      itemsCount: items?.length,
      pickupType,
      userId,
      memberId,
      memberEmail,
      customerName,
      customerPhone,
      items: items?.map((item: any) => ({ 
        productId: item.productId, 
        name: item.productName || item.name 
      }))
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!items || !Array.isArray(items) || items.length === 0) {
      return NextResponse.json(
        { error: '–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã' },
        { status: 400 }
      );
    }

    if (!totalAmount || totalAmount <= 0) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞' },
        { status: 400 }
      );
    }

    // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
    if (!memberEmail || !customerName) {
      return NextResponse.json(
        { error: 'Email –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // ‚úÖ –°–æ–∑–¥–∞–µ–º Payment Intent —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(totalAmount * 100),
      currency: 'rub',
      
      // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º receipt_email
      receipt_email: memberEmail,
      
      // ‚úÖ –ü–æ–ª–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      metadata: {
        userId: userId || 'guest',
        memberId: memberId || userId || '',
        pickupType,
        itemsCount: items.length.toString(),
        notes: notes || '',
        email: memberEmail,
        memberEmail: memberEmail,
        customerName: customerName,
        userName: customerName,
        customerPhone: customerPhone || '',
        createdAt: Date.now().toString(),
        orderType: 'shop',
        source: 'web',
      },
      
      description: `–ó–∞–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ FitAccess - ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è ${customerName}`,
      
            // ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏/–ø–æ–ª—É—á–µ–Ω–∏—è
      shipping: {
        name: customerName,
        phone: customerPhone || undefined,
        address: {
          country: 'RU',
          line1: '–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä FitAccess',
          city: '–ú–æ—Å–∫–≤–∞',
          state: '–ú–æ—Å–∫–≤–∞',
          postal_code: '101000',
        }
      },
    });

    console.log('‚úÖ Payment intent created with full customer data:', {
      id: paymentIntent.id,
      receipt_email: paymentIntent.receipt_email,
      metadata: paymentIntent.metadata,
      shipping: paymentIntent.shipping
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º items –¥–ª—è Convex
    const convexItems = items.map((item: any) => {
      let productId = item.productId;
      
      // –ï—Å–ª–∏ productId –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ Convex ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (typeof productId === 'string' && productId.startsWith('k')) {
        // –≠—Ç–æ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Convex ID
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Convex ID, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        productId = String(productId);
      }
      
      return {
        productId,
        productName: item.productName || item.name,
        quantity: item.quantity,
        price: item.price,
        totalPrice: item.totalPrice || (item.price * item.quantity),
      };
    });

    console.log('üì¶ Prepared items for Convex:', convexItems);

    // ‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ Convex —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞
    const orderId = await convex.mutation("orders:create", {
      userId: userId || undefined,
      memberId: memberId || userId || undefined,
      items: convexItems,
      totalAmount,
      pickupType,
      notes,
      paymentIntentId: paymentIntent.id,
      paymentMethod: 'card',
      
      // ‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
      customerEmail: memberEmail,
      memberEmail: memberEmail,
      customerName: customerName,
      memberName: customerName,
      customerPhone: customerPhone,
    });

    console.log('üì¶ Order created in Convex with full customer data:', orderId);

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id,
      orderId,
    });

  } catch (error) {
    console.error('‚ùå Error creating payment intent:', error);
    
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      },
      { status: 500 }
    );
  }
}
