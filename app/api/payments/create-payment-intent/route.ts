// app/api/payments/create-payment-intent/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { ConvexHttpClient } from "convex/browser";
import { api } from "@/convex/_generated/api";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-04-30.basil',
});

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const { items, totalAmount, pickupType, notes, userId } = await request.json();

    console.log('üí≥ Creating payment intent:', {
      totalAmount,
      itemsCount: items?.length,
      pickupType,
      userId,
      items: items?.map((item: any) => ({ 
        productId: item.productId, 
        name: item.productName || item.name 
      }))
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!items || !Array.isArray(items) || items.length === 0) {
      return NextResponse.json(
        { error: '–¢–æ–≤–∞—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã' },
        { status: 400 }
      );
    }

    if (!totalAmount || totalAmount <= 0) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º Payment Intent –≤ Stripe
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(totalAmount * 100),
      currency: 'rub',
      metadata: {
        userId: userId || 'anonymous',
        pickupType,
        itemsCount: items.length.toString(),
        notes: notes || '',
      },
      description: `–ó–∞–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ - ${items.length} —Ç–æ–≤–∞—Ä–æ–≤`,
    });

    console.log('‚úÖ Payment intent created:', paymentIntent.id);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º items –¥–ª—è Convex
    const convexItems = items.map((item: any) => {
      let productId = item.productId;
      
      // –ï—Å–ª–∏ productId –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ Convex ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (typeof productId === 'string' && productId.startsWith('k')) {
        // –≠—Ç–æ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Convex ID
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Convex ID, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        productId = String(productId);
      }
      
      return {
        productId,
        productName: item.productName || item.name,
        quantity: item.quantity,
        price: item.price,
        totalPrice: item.totalPrice || (item.price * item.quantity),
      };
    });

    console.log('üì¶ Prepared items for Convex:', convexItems);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ Convex - –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª–∏ api.orders.create
    const orderId = await convex.mutation("orders:create", {
      userId,
      items: convexItems,
      totalAmount,
      pickupType,
      notes,
      paymentIntentId: paymentIntent.id,
      paymentMethod: 'stripe',
    });

    console.log('üì¶ Order created in Convex:', orderId);

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id,
      orderId,
    });

  } catch (error) {
    console.error('‚ùå Error creating payment intent:', error);
    
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      },
      { status: 500 }
    );
  }
}
