// app/api/payments/create-payment-intent/route.ts
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import { getSession } from '@/lib/simple-auth';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-04-30.basil',
});

export async function POST(request: NextRequest) {
  try {
    console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ Payment Intent - –Ω–∞—á–∞–ª–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    const authResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/auth/check`, {
      headers: {
        'Cookie': request.headers.get('cookie') || '',
      },
    });
    
    const authData = await authResponse.json();
    console.log('üç™ Auth check result:', authData);
    
    if (!authData.authenticated) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({ 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.' 
      }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫
    if (authData.user.role !== 'member') {
      console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —Ä–æ–ª–∏:', authData.user.role);
      return NextResponse.json({ 
        error: '–ü–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞.' 
      }, { status: 403 });
    }

    const { items, totalAmount, pickupType, notes } = await request.json();
    
    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', {
      itemsCount: items?.length,
      totalAmount,
      pickupType,
      userEmail: authData.user.email
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!items || items.length === 0) {
      return NextResponse.json({ 
        error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' 
      }, { status: 400 });
    }

    if (!totalAmount || totalAmount <= 0) {
      return NextResponse.json({ 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞' 
      }, { status: 400 });
    }

    console.log('‚úÖ –°–æ–∑–¥–∞–µ–º Payment Intent –≤ Stripe...');

    // –°–æ–∑–¥–∞–µ–º Payment Intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(totalAmount * 100), // Stripe —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–ø–µ–π–∫–∞—Ö
      currency: 'rub',
      metadata: {
        userId: authData.user.id,
        userEmail: authData.user.email,
        userName: authData.user.name,
        pickupType,
        notes: notes || '',
        itemsCount: items.length.toString(),
      },
      description: `–ó–∞–∫–∞–∑ –≤ FitAccess - ${items.length} —Ç–æ–≤–∞—Ä–æ–≤`,
      receipt_email: authData.user.email,
    });

    console.log('‚úÖ Payment Intent —Å–æ–∑–¥–∞–Ω:', paymentIntent.id);

    return NextResponse.json({
      clientSecret: paymentIntent.client_secret,
      paymentIntentId: paymentIntent.id,
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
    return NextResponse.json({
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
    }, { status: 500 });
  }
}