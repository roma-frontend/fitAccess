// app/api/payments/confirm-payment/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-04-30.basil',
});

export async function POST(request: NextRequest) {
  try {
    const { paymentIntentId, orderId } = await request.json();

    console.log('‚úÖ Confirming payment:', { paymentIntentId, orderId });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ Stripe
    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);

    if (paymentIntent.status !== 'succeeded') {
      throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    const updateResponse = await fetch(`${process.env.NEXT_PUBLIC_SITE_URL}/api/orders/update-payment`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        paymentIntentId,
        status: 'confirmed',
        paymentStatus: 'paid',
        paymentId: paymentIntent.id,
        paidAt: Date.now(),
      }),
    });

    if (!updateResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
    }

    const { order } = await updateResponse.json();

    // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ email —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback
    const customerEmail = paymentIntent.receipt_email || 
                         paymentIntent.metadata?.email ||
                         order.customerEmail ||
                         order.memberEmail ||
                         'customer@fitaccess.ru'; // –ë–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π fallback

    // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    const customerName = paymentIntent.metadata?.customerName ||
                        order.customerName ||
                        order.memberName ||
                        '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å';

    // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ userId
    const userId = order.userId || order.memberId || 'anonymous';

    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–∫ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const receipt = {
      receiptId: `RCP-${Date.now()}`,
      orderId: order._id,
      paymentId: paymentIntent.id,
      amount: paymentIntent.amount / 100,
      currency: paymentIntent.currency.toUpperCase(),
      paidAt: new Date().toISOString(),
      customer: {
        email: customerEmail, // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null
        name: customerName,   // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null
        userId: userId,       // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–µ null
      },
      items: order.items?.map((item: any) => ({
        name: item.productName || '–¢–æ–≤–∞—Ä',
        quantity: item.quantity || 1,
        price: item.price || 0,
        total: item.totalPrice || 0,
      })) || [],
      pickupType: order.pickupType || 'pickup',
      notes: order.notes || '',
      company: {
        name: 'FitAccess',
        address: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1',
        inn: '1234567890',
        phone: '+7 (495) 123-45-67',
        email: 'info@fitaccess.ru',
      },
    };

    console.log('üìß Receipt generated:', receipt.receiptId);
    console.log('üë§ Customer data:', receipt.customer); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É

    return NextResponse.json({
      success: true,
      receipt,
      order,
    });

  } catch (error) {
    console.error('‚ùå Error confirming payment:', error);
    
    return NextResponse.json(
      { 
        success: false,
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
      },
      { status: 500 }
    );
  }
}
