// app/api/dashboard/notifications/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
interface DashboardNotification {
  id: string;
  type: 'info' | 'warning' | 'error' | 'success';
  title: string;
  message: string;
  timestamp: string;
  read: boolean;
  actionUrl?: string;
  priority: 'low' | 'medium' | 'high';
  userId?: string;
}

// –¢–∏–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
interface ConvexUser {
  _id: string;
  _creationTime: number;
  name: string;
  email: string;
  role: string;
  isActive: boolean;
  createdAt: number;
  createdBy?: string;
  photoUrl?: string;
  faceDescriptor?: number[];
  lastLogin?: number;
  updatedAt?: number;
  password: string;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
function generateNotifications(users: ConvexUser[]): DashboardNotification[] {
  const notifications: DashboardNotification[] = [];
  const now = new Date();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const recentUsers = users.filter((user: ConvexUser) => {
    const joinDate = new Date(user.createdAt);
    const dayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    return joinDate >= dayAgo && ['client', 'member'].includes(user.role);
  });

  recentUsers.forEach((user: ConvexUser) => {
    notifications.push({
      id: `new-user-${user._id}`,
      type: 'success',
      title: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
      message: `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: ${user.name}`,
      timestamp: new Date(user.createdAt).toISOString(),
      read: false,
      priority: 'medium',
      actionUrl: `/admin/users/${user._id}`
    });
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const inactiveUsers = users.filter((user: ConvexUser) => 
    ['client', 'member'].includes(user.role) && !user.isActive
  );

  if (inactiveUsers.length > 0) {
    notifications.push({
      id: 'inactive-users',
      type: 'warning',
      title: '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
      message: `${inactiveUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã`,
      timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'medium',
      actionUrl: '/admin/users?filter=inactive'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ñ–æ—Ç–æ
  const usersWithoutPhoto = users.filter((user: ConvexUser) => 
    ['trainer', 'admin'].includes(user.role) && !user.photoUrl
  );

  if (usersWithoutPhoto.length > 0) {
    notifications.push({
      id: 'users-without-photo',
      type: 'info',
      title: '–ü—Ä–æ—Ñ–∏–ª–∏ –±–µ–∑ —Ñ–æ—Ç–æ',
      message: `${usersWithoutPhoto.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è`,
      timestamp: new Date(now.getTime() - 3 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'low',
      actionUrl: '/admin/users?filter=no-photo'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
  const inactiveClients = users.filter((user: ConvexUser) => 
    ['client', 'member'].includes(user.role) && 
    user.isActive &&
    user.lastLogin && 
    new Date(user.lastLogin) < weekAgo
  );

  if (inactiveClients.length > 5) {
    notifications.push({
      id: 'inactive-clients',
      type: 'warning',
      title: '–ö–ª–∏–µ–Ω—Ç—ã –¥–∞–≤–Ω–æ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏',
      message: `${inactiveClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏`,
      timestamp: new Date(now.getTime() - 1 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'medium',
      actionUrl: '/admin/analytics?view=inactive-clients'
    });
  }

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notifications.push(
    {
      id: 'system-backup',
      type: 'info',
      title: '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
      message: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      timestamp: new Date(now.getTime() - 6 * 60 * 60 * 1000).toISOString(),
      read: true,
      priority: 'low'
    },
    {
      id: 'equipment-maintenance',
      type: 'warning',
      title: '–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
      message: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
      timestamp: new Date(now.getTime() - 4 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'high'
    },
    {
      id: 'monthly-report',
      type: 'success',
      title: '–ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤',
      message: '–û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É',
      timestamp: new Date(now.getTime() - 8 * 60 * 60 * 1000).toISOString(),
      read: false,
      priority: 'medium',
      actionUrl: '/admin/reports/monthly'
    }
  );

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
  return notifications.sort((a, b) => 
    new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
  );
}

export async function GET(request: NextRequest) {
  try {
    console.log('üîî GET /api/dashboard/notifications - –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!['super-admin', 'admin', 'manager'].includes(sessionData.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex
    const users: ConvexUser[] = await convex.query("users:getAll");
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    const notifications = generateNotifications(users);

    console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã:', {
      total: notifications.length,
      unread: notifications.filter(n => !n.read).length,
      highPriority: notifications.filter(n => n.priority === 'high').length
    });

    return NextResponse.json({
      success: true,
      data: notifications,
      meta: {
        total: notifications.length,
        unread: notifications.filter(n => !n.read).length,
        byPriority: {
          high: notifications.filter(n => n.priority === 'high').length,
          medium: notifications.filter(n => n.priority === 'medium').length,
          low: notifications.filter(n => n.priority === 'low').length
        },
        byType: {
          info: notifications.filter(n => n.type === 'info').length,
          warning: notifications.filter(n => n.type === 'warning').length,
          error: notifications.filter(n => n.type === 'error').length,
          success: notifications.filter(n => n.type === 'success').length
        },
        lastUpdated: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// POST –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
export async function POST(request: NextRequest) {
  try {
    console.log('‚úÖ POST /api/dashboard/notifications - –æ—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    const body = await request.json();
    const { notificationId, action } = body;

    console.log('üìù –î–µ–π—Å—Ç–≤–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º:', { notificationId, action });

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    
    return NextResponse.json({
      success: true,
      message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ ${action === 'read' ? '–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' : '–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ'}`,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' 
      },
      { status: 500 }
    );
  }
}

// DELETE –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function DELETE(request: NextRequest) {
  try {
    console.log('üóëÔ∏è DELETE /api/dashboard/notifications - —É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const notificationId = searchParams.get('id');

    if (!notificationId) {
      return NextResponse.json({ error: 'ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω' }, { status: 400 });
    }

    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationId);

    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
    
    return NextResponse.json({
      success: true,
      message: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ${notificationId} —É–¥–∞–ª–µ–Ω–æ`,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' 
      },
      { status: 500 }
    );
  }
}
