// app/api/dashboard/stats/route.ts (–¥–æ–±–∞–≤—å—Ç–µ —Ç–∏–ø—ã)
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// –¢–∏–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
interface ConvexUser {
  _id: string;
  _creationTime: number;
  name: string;
  email: string;
  role: string;
  isActive: boolean;
  createdAt: number;
  createdBy?: string;
  photoUrl?: string;
  faceDescriptor?: number[];
  lastLogin?: number;
  updatedAt?: number;
  password: string;
}

// –¢–∏–ø –¥–ª—è —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å)
interface ConvexEvent {
  _id: string;
  _creationTime: number;
  startTime: number;
  endTime?: number;
  status: string;
  createdAt: number;
  [key: string]: any;
}

export async function GET(request: NextRequest) {
  try {
    console.log('üìä GET /api/dashboard/stats - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!['super-admin', 'admin', 'manager'].includes(sessionData.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex
    const [users] = await Promise.all([
      convex.query("users:getAll") as Promise<ConvexUser[]>,
      // –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å events –≤ Convex, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
      // convex.query("events:getAll") as Promise<ConvexEvent[]>
    ]);

    const events: ConvexEvent[] = []; // –í—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤

    console.log('üìà –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', {
      usersCount: users.length,
      eventsCount: events.length
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const startOfWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const activeClients = users.filter((user: ConvexUser) => 
      ['client', 'member'].includes(user.role) && user.isActive
    );
    
    const activeTrainers = users.filter((user: ConvexUser) => 
      user.role === 'trainer' && user.isActive
    );

    const allAdmins = users.filter((user: ConvexUser) => 
      ['admin', 'super-admin'].includes(user.role) && user.isActive
    );

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const todayEvents = events.filter((event: ConvexEvent) => {
      const eventDate = new Date(event.startTime || event.createdAt);
      return eventDate >= startOfToday;
    });

    const monthEvents = events.filter((event: ConvexEvent) => {
      const eventDate = new Date(event.startTime || event.createdAt);
      return eventDate >= startOfMonth;
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–æ—Å—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
    const weeklyNewClients = users.filter((user: ConvexUser) => {
      if (!['client', 'member'].includes(user.role)) return false;
      const joinDate = new Date(user.createdAt);
      return joinDate >= startOfWeek;
    });

    const weeklyGrowth = activeClients.length > 0 
      ? (weeklyNewClients.length / activeClients.length) * 100 
      : 0;

    // –í—ã—á–∏—Å–ª—è–µ–º —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    const oldClients = users.filter((user: ConvexUser) => {
      if (!['client', 'member'].includes(user.role)) return false;
      const joinDate = new Date(user.createdAt);
      return joinDate <= monthAgo;
    });

    const activeOldClients = oldClients.filter((user: ConvexUser) => 
      user.isActive && user.lastLogin && new Date(user.lastLogin) >= monthAgo
    );

    const clientRetention = oldClients.length > 0 
      ? (activeOldClients.length / oldClients.length) * 100 
      : 0;

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–ø–æ–∫–∞ –º–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    const averageRating = 4.7; // –ú–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤

    // –í—ã—á–∏—Å–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–ø–æ–∫–∞ –º–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    const equipmentUtilization = Math.min(95, 50 + (todayEvents.length * 2));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      totalClients: activeClients.length,
      activeTrainers: activeTrainers.length,
      todayEvents: todayEvents.length,
      monthlyRevenue: monthEvents.length * 1500, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Å–æ–±—ã—Ç–∏–µ
      weeklyGrowth: Math.round(weeklyGrowth * 100) / 100,
      clientRetention: Math.round(clientRetention * 100) / 100,
      averageRating: averageRating,
      equipmentUtilization: Math.round(equipmentUtilization * 100) / 100,
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      totalUsers: users.length,
      totalAdmins: allAdmins.length,
      newClientsThisWeek: weeklyNewClients.length,
      monthlyEvents: monthEvents.length,
      inactiveClients: users.filter((user: ConvexUser) => 
        ['client', 'member'].includes(user.role) && !user.isActive
      ).length,
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ–ª—è–º
      usersByRole: {
        'super-admin': users.filter((user: ConvexUser) => user.role === 'super-admin').length,
        'admin': users.filter((user: ConvexUser) => user.role === 'admin').length,
        'manager': users.filter((user: ConvexUser) => user.role === 'manager').length,
        'trainer': users.filter((user: ConvexUser) => user.role === 'trainer').length,
        'member': users.filter((user: ConvexUser) => user.role === 'member').length,
        'client': users.filter((user: ConvexUser) => user.role === 'client').length,
      },
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      lastUpdated: new Date().toISOString(),
      dataSource: 'convex',
      generatedBy: sessionData.user.name
    };

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞:', {
      totalClients: stats.totalClients,
      activeTrainers: stats.activeTrainers,
      todayEvents: stats.todayEvents,
      weeklyGrowth: stats.weeklyGrowth
    });

    return NextResponse.json({
      success: true,
      data: stats,
      meta: {
        generatedAt: new Date().toISOString(),
        generatedBy: sessionData.user.email,
        dataPoints: {
          users: users.length,
          events: events.length,
          calculations: [
            'weeklyGrowth',
            'clientRetention', 
            'equipmentUtilization',
            'monthlyRevenue'
          ]
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

// POST –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ POST /api/dashboard/stats - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!['super-admin', 'admin'].includes(sessionData.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞, –ø–µ—Ä–µ—Å—á–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Ç.–¥.
    
    console.log('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    
    return NextResponse.json({
      success: true,
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ',
      updatedBy: sessionData.user.name,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' 
      },
      { status: 500 }
    );
  }
}

