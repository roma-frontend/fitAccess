// app/api/products/[id]/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json();
    const { id } = params;
    
    console.log("üîÑ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", id, body);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ api.products.update
    const result = await convex.mutation("products:update", {
      id: id,
      name: body.name,
      description: body.description,
      category: body.category,
      price: body.price,
      inStock: body.inStock,
      isPopular: body.isPopular || false,
      nutrition: body.nutrition
    });

    console.log("‚úÖ API: –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞'
      },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id } = params;
    console.log("üîÑ API: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", id);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ api.products.remove
    const result = await convex.mutation("products:remove", {
      id: id
    });

    console.log("‚úÖ API: –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞'
      },
      { status: 500 }
    );
  }
}
