// app/api/products/route.ts (—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

console.log("üîó Convex URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è:", process.env.NEXT_PUBLIC_CONVEX_URL);

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET() {
  try {
    console.log("üîÑ API GET: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
    console.log("üîó API GET: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Convex URL:", process.env.NEXT_PUBLIC_CONVEX_URL);
    
    const products = await convex.query("products:getAll");
    console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", products?.length || 0);
    console.log("üì¶ API GET: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", products);
    
    return NextResponse.json({ 
      success: true, 
      data: products || [],
      count: products?.length || 0
    });
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
    console.error("‚ùå API GET: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
        data: []
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log("üîÑ API POST: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", body);
    console.log("üîó API POST: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Convex URL:", process.env.NEXT_PUBLIC_CONVEX_URL);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!body.name || !body.description || !body.category || typeof body.price !== 'number') {
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
    }

    console.log("üìù API POST: –í—ã–∑—ã–≤–∞–µ–º Convex –º—É—Ç–∞—Ü–∏—é products:create");
    
    const result = await convex.mutation("products:create", {
      name: body.name,
      description: body.description,
      category: body.category,
      price: body.price,
      inStock: body.inStock || 0,
      minStock: body.minStock || 10,
      isPopular: body.isPopular || false,
      nutrition: body.nutrition || undefined
    });

    console.log("‚úÖ API POST: –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:", result);
    console.log("üÜî API POST: –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", typeof result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
    });
  } catch (error) {
    console.error("‚ùå API POST: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    console.error("‚ùå API POST: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
    console.error("‚ùå API POST: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", {
      name: error instanceof Error ? error.name : 'Unknown',
      message: error instanceof Error ? error.message : 'Unknown error',
      cause: error instanceof Error ? error.cause : 'No cause'
    });
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞',
        details: error instanceof Error ? error.stack : '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'
      },
      { status: 500 }
    );
  }
}
