// app/api/admin/trainers/route.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏–∑ Convex...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex
    const trainersFromConvex = await convex.query("trainers:getAll");
    
    if (trainersFromConvex && trainersFromConvex.length > 0) {
      console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Convex:', trainersFromConvex.length);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Convex –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
      const formattedTrainers = trainersFromConvex.map((trainer: any) => ({
        id: trainer._id,
        name: trainer.name || '–ë–µ–∑ –∏–º–µ–Ω–∏',
        email: trainer.email || '',
        phone: trainer.phone || '',
        role: trainer.role || '–¢—Ä–µ–Ω–µ—Ä',
        avatar: trainer.avatar || '/avatars/default.jpg',
        joinDate: trainer.joinDate || trainer._creationTime || new Date().toISOString(),
        status: trainer.status || 'active',
        specializations: trainer.specializations || [],
        rating: trainer.rating || 4.5,
        totalClients: trainer.totalClients || 0,
        activeClients: trainer.activeClients || 0,
        totalWorkouts: trainer.totalWorkouts || 0,
        monthlyRevenue: trainer.monthlyRevenue || 0,
        workingHours: trainer.workingHours || {
          start: '09:00',
          end: '18:00',
          days: [1, 2, 3, 4, 5]
        },
        lastActivity: trainer.lastActivity || new Date().toISOString()
      }));

      return NextResponse.json(formattedTrainers);
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Convex, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
      return NextResponse.json(getMockTrainers());
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏–∑ Convex:', error);
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ...');
    
    // Fallback –∫ mock –¥–∞–Ω–Ω—ã–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return NextResponse.json(getMockTrainers());
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Convex...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Convex
    const newTrainer = await convex.mutation("trainers:create", {
      name: data.name,
      email: data.email,
      phone: data.phone,
      role: data.role || '–¢—Ä–µ–Ω–µ—Ä',
      specializations: data.specializations || [],
      workingHours: data.workingHours || {
        start: '09:00',
        end: '18:00',
        days: [1, 2, 3, 4, 5]
      },
      status: 'active'
    });

    console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –≤ Convex:', newTrainer);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    const formattedTrainer = {
      id: newTrainer,
      name: data.name,
      email: data.email,
      phone: data.phone,
      role: data.role || '–¢—Ä–µ–Ω–µ—Ä',
      avatar: '/avatars/default.jpg',
      joinDate: new Date().toISOString(),
      status: 'active',
      specializations: data.specializations || [],
      rating: 4.5,
      totalClients: 0,
      activeClients: 0,
      totalWorkouts: 0,
      monthlyRevenue: 0,
      workingHours: data.workingHours || {
        start: '09:00',
        end: '18:00',
        days: [1, 2, 3, 4, 5]
      },
      lastActivity: new Date().toISOString()
    };

    return NextResponse.json(formattedTrainer);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Convex:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    const data = await request.json();
    const { id, ...updateData } = data;
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Convex:', id);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Convex
    await convex.mutation("trainers:update", {
      id,
      ...updateData
    });

    console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Convex');

    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Convex:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }
    
    console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Convex:', id);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Convex
    await convex.mutation("trainers:delete", { id });

    console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ Convex');

    return NextResponse.json({ success: true });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Convex:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
function getMockTrainers() {
  return [
    {
      id: 'trainer1',
      name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
      email: 'alex@fitaccess.ru',
      phone: '+7 (999) 123-45-67',
      role: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
      avatar: '/avatars/alex.jpg',
      joinDate: '2024-01-15',
      status: 'active',
      specializations: ['–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥', '–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è'],
      rating: 4.8,
      totalClients: 25,
      activeClients: 18,
      totalWorkouts: 342,
      monthlyRevenue: 180000,
      workingHours: {
        start: '09:00',
        end: '18:00',
        days: [1, 2, 3, 4, 5]
      },
      lastActivity: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
    },
    {
      id: 'trainer2',
      name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
      email: 'maria@fitaccess.ru',
      phone: '+7 (999) 234-56-78',
      role: '–§–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      avatar: '/avatars/maria.jpg',
      joinDate: '2024-02-01',
      status: 'active',
      specializations: ['–ô–æ–≥–∞', '–ü–∏–ª–∞—Ç–µ—Å', '–°—Ç—Ä–µ—Ç—á–∏–Ω–≥'],
      rating: 4.9,
      totalClients: 30,
      activeClients: 22,
      totalWorkouts: 298,
      monthlyRevenue: 165000,
      workingHours: {
        start: '08:00',
        end: '17:00',
        days: [1, 2, 3, 4, 5, 6]
      },
      lastActivity: new Date(Date.now() - 30 * 60 * 1000).toISOString()
    },
    {
      id: 'trainer3',
      name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
      email: 'dmitry@fitaccess.ru',
      phone: '+7 (999) 345-67-89',
      role: '–ô–æ–≥–∞-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      avatar: '/avatars/dmitry.jpg',
      joinDate: '2024-03-10',
      status: 'active',
      specializations: ['–•–∞—Ç—Ö–∞-–π–æ–≥–∞', '–í–∏–Ω—å—è—Å–∞', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è'],
      rating: 4.7,
      totalClients: 20,
      activeClients: 15,
      totalWorkouts: 156,
      monthlyRevenue: 120000,
      workingHours: {
        start: '10:00',
        end: '19:00',
        days: [1, 2, 3, 4, 5, 6, 0]
      },
      lastActivity: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString()
    },
    {
      id: 'trainer4',
      name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
      email: 'elena@fitaccess.ru',
      phone: '+7 (999) 456-78-90',
      role: '–ì—Ä—É–ø–ø–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      avatar: '/avatars/elena.jpg',
      joinDate: '2024-04-05',
      status: 'active',
      specializations: ['–ê—ç—Ä–æ–±–∏–∫–∞', '–ó—É–º–±–∞', '–°—Ç–µ–ø'],
      rating: 4.6,
      totalClients: 35,
      activeClients: 28,
      totalWorkouts: 220,
      monthlyRevenue: 140000,
      workingHours: {
        start: '07:00',
        end: '16:00',
        days: [1, 2, 3, 4, 5, 6]
      },
      lastActivity: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString()
    },
    {
      id: 'trainer5',
      name: '–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤',
      email: 'igor@fitaccess.ru',
      phone: '+7 (999) 567-89-01',
      role: '–¢—Ä–µ–Ω–µ—Ä –ø–æ –±–æ–∫—Å—É',
      avatar: '/avatars/igor.jpg',
      joinDate: '2024-02-20',
      status: 'active',
      specializations: ['–ë–æ–∫—Å', '–ö–∏–∫–±–æ–∫—Å–∏–Ω–≥', '–°–∞–º–æ–æ–±–æ—Ä–æ–Ω–∞'],
      rating: 4.9,
      totalClients: 18,
      activeClients: 15,
      totalWorkouts: 180,
      monthlyRevenue: 200000,
      workingHours: {
        start: '14:00',
        end: '22:00',
        days: [1, 2, 3, 4, 5, 6]
      },
      lastActivity: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString()
    }
  ];
}
