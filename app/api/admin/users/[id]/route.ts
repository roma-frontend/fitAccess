// app/api/admin/users/[id]/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Next.js 15)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import { getSession } from '@/lib/simple-auth';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log('üéØ PUT /api/admin/users/[id] - –ù–ê–ß–ê–õ–û –æ–±—Ä–∞–±–æ—Ç–∫–∏');
  
  try {
    // –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Promise –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { id } = await params;
    console.log('üìç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—É–∫–∏
    const allCookies = request.cookies.getAll();
    console.log('üç™ –í—Å–µ –∫—É–∫–∏ –≤ PUT –∑–∞–ø—Ä–æ—Å–µ:', allCookies);
    
    const sessionId = request.cookies.get('session_id')?.value;
    console.log('üîë Session ID –≤ PUT –∑–∞–ø—Ä–æ—Å–µ:', sessionId ? `–Ω–∞–π–¥–µ–Ω: ${sessionId.substring(0, 20)}...` : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (!sessionId) {
      console.log('‚ùå PUT: Session ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 401');
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Å–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
      }, { status: 401 });
    }

    console.log('üîß PUT: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ getSession...');
    const sessionData = getSession(sessionId);
    
    if (!sessionData) {
      console.log('‚ùå PUT: –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 401');
      return NextResponse.json({ 
        success: false, 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' 
      }, { status: 401 });
    }

    console.log('‚úÖ PUT: –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      userId: sessionData.user.id,
      name: sessionData.user.name,
      role: sessionData.user.role,
      email: sessionData.user.email
    });
    
    if (!['super-admin', 'admin', 'manager'].includes(sessionData.user.role)) {
      console.log('‚ùå PUT: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —Ä–æ–ª—å:', sessionData.user.role);
      return NextResponse.json({ 
        success: false, 
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ä–æ–ª—å: ${sessionData.user.role})` 
      }, { status: 403 });
    }

    console.log('‚úÖ PUT: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
    
    const body = await request.json();
    console.log('üìÑ PUT: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', body);
    const { name, email, role, isActive, photoUrl, password } = body;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    console.log('üîç PUT: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex...');
    const currentUser = await convex.query("users:getUserById", { 
      userId: id as any 
    });

    if (!currentUser) {
      console.log('‚ùå PUT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Convex');
      return NextResponse.json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 404 });
    }

    console.log('üë§ PUT: –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      id: currentUser._id,
      name: currentUser.name,
      role: currentUser.role,
      email: currentUser.email
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
    if (role && role !== currentUser.role) {
      console.log('üîÑ PUT: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å', currentUser.role, '–Ω–∞', role);
      
      if (currentUser.role === 'super-admin') {
        console.log('‚ùå PUT: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞');
        return NextResponse.json({ 
          success: false,
          error: '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞' 
        }, { status: 403 });
      }

      if (role === 'admin' && sessionData.user.role !== 'super-admin') {
        console.log('‚ùå PUT: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞ –Ω–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º');
        return NextResponse.json({ 
          success: false,
          error: '–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–æ–≤' 
        }, { status: 403 });
      }

      if (role === 'super-admin') {
        console.log('‚ùå PUT: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞');
        return NextResponse.json({ 
          success: false,
          error: '–ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞' 
        }, { status: 403 });
      }
    }

    // –ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (id === sessionData.user.id && isActive === false) {
      console.log('‚ùå PUT: –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
      return NextResponse.json({ 
        success: false,
        error: '–ù–µ–ª—å–∑—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' 
      }, { status: 403 });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updates: any = {};
    if (name !== undefined) updates.name = name;
    if (email !== undefined) updates.email = email;
    if (role !== undefined) updates.role = role;
    if (isActive !== undefined) updates.isActive = isActive;
    if (photoUrl !== undefined) updates.photoUrl = photoUrl;
    if (password !== undefined && password.trim()) updates.password = password;

    console.log('üìù PUT: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:', updates);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Convex (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
    console.log('üíæ PUT: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Convex...');
    const updatedUser = await convex.mutation("users:updateUser", {
      userId: id as any,
      updates
    });

    console.log('‚úÖ PUT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Convex');

    return NextResponse.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: updatedUser
    });

  } catch (error) {
    console.error('‚ùå PUT: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞:', error);
    console.error('‚ùå PUT: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.stack : '–ù–µ—Ç —Å—Ç–µ–∫–∞');
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      },
      { status: 500 }
    );
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Promise –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { id } = await params;
    console.log('üîç GET /api/admin/users/[id] - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id);
    
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }
    
    if (!['super-admin', 'admin', 'manager'].includes(sessionData.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    const user = await convex.query("users:getUserById", { 
      userId: id as any 
    });

    if (!user) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    console.log('‚úÖ GET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user.name);

    // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const { password, ...safeUser } = user;

    return NextResponse.json({
      success: true,
      user: safeUser
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Promise –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { id } = await params;
    console.log('üóëÔ∏è DELETE /api/admin/users/[id] - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', id);
    
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }
    
    if (!['super-admin', 'admin'].includes(sessionData.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    const user = await convex.query("users:getUserById", { 
      userId: id as any 
    });

    if (!user) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    if (user.role === 'super-admin') {
      return NextResponse.json({ 
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞' 
      }, { status: 403 });
    }

    if (id === sessionData.user.id) {
      return NextResponse.json({ 
        error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' 
      }, { status: 403 });
    }

    await convex.mutation("users:deleteUser", {
      id: id as any
    });

    console.log('‚úÖ DELETE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω:', user.name);

    return NextResponse.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
      { status: 500 }
    );
  }
}
