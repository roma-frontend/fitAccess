// app/api/admin/users/route.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π)
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { 
  createUser, 
  getAllUsers, 
  canCreateRole, 
  canManageUser,
  updateUser,
  deleteUser,
  findUserById,
  isValidRole,
  User,
  CreateUserData
} from '@/lib/users-db';

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value || 
                     request.cookies.get('session_id_debug')?.value;
    
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const session = getSession(sessionId);
    if (!session) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (!['super-admin', 'admin', 'manager'].includes(session.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    const users: User[] = await getAllUsers();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let filteredUsers = users;
    if (session.user.role === 'admin') {
      filteredUsers = users.filter(user => !['super-admin'].includes(user.role));
    } else if (session.user.role === 'manager') {
      filteredUsers = users.filter(user => !['super-admin', 'admin'].includes(user.role));
    }

    // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const safeUsers = filteredUsers.map(user => ({
      id: user._id,
      email: user.email,
      role: user.role,
      name: user.name,
      createdAt: user.createdAt,
      createdBy: user.createdBy,
      isActive: user.isActive
    }));

    return NextResponse.json({
      success: true,
      users: safeUsers,
      canCreate: canCreateRole(session.user.role, 'member'),
      userRole: session.user.role
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    }, { status: 500 });
  }
}

// –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ POST /api/admin/users - –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value || 
                     request.cookies.get('session_id_debug')?.value;
    
    console.log('üç™ Session ID:', sessionId ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω');
    
    if (!sessionId) {
      console.log('‚ùå –ù–µ—Ç session ID');
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const session = getSession(sessionId);
    console.log('üë§ Session:', session ? `–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${session.user.email} (${session.user.role})` : '–ù–ï –Ω–∞–π–¥–µ–Ω–∞');
    
    if (!session) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', body);
    
    const { email, password, role, name } = body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!email || !password || !role || !name) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:', { email: !!email, password: !!password, role: !!role, name: !!name });
      return NextResponse.json({ 
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å:', role);
    if (!isValidRole(role)) {
      console.log('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å:', role);
      return NextResponse.json({ 
        error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: ${role}` 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏
    console.log('üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞:', `${session.user.role} -> ${role}`);
    if (!canCreateRole(session.user.role, role)) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏');
      return NextResponse.json({ 
        error: `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏: ${role}` 
      }, { status: 403 });
    }

    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData: CreateUserData = {
      email,
      password,
      role,
      name,
      isActive: true
    };

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser: User = await createUser(userData, session.user.email);

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', newUser._id);

    return NextResponse.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: newUser._id,
        email: newUser.email,
        role: newUser.role,
        name: newUser.name,
        createdAt: newUser.createdAt,
        isActive: newUser.isActive
      }
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    if (error instanceof Error) {
      console.error('üìã –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
      console.error('üìã Stack trace:', error.stack);
    }
    
    return NextResponse.json({ 
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      details: error instanceof Error ? error.stack : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 400 });
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function PUT(request: NextRequest) {
  try {
    const sessionId = request.cookies.get('session_id')?.value || 
                     request.cookies.get('session_id_debug')?.value;
    
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const session = getSession(sessionId);
    if (!session) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    const { id, updates } = await request.json();
    
    const targetUser: User | null = await findUserById(id);
    if (!targetUser) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    if (!canManageUser(session.user.role, targetUser.role)) {
      return NextResponse.json({ 
        error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' 
      }, { status: 403 });
    }

    if (updates.role) {
      if (!isValidRole(updates.role)) {
        return NextResponse.json({ 
          error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: ${updates.role}` 
        }, { status: 400 });
      }

      if (!canCreateRole(session.user.role, updates.role)) {
        return NextResponse.json({ 
          error: `–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: ${updates.role}` 
        }, { status: 403 });
      }
    }

    const updatedUser: User | null = await updateUser(id, updates, session.user.email);

    return NextResponse.json({
      success: true,
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: updatedUser!._id,
        email: updatedUser!.email,
        role: updatedUser!.role,
        name: updatedUser!.name,
        isActive: updatedUser!.isActive
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return NextResponse.json({ 
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    }, { status: 400 });
  }
}

// –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function DELETE(request: NextRequest) {
  try {
    const sessionId = request.cookies.get('session_id')?.value || 
                     request.cookies.get('session_id_debug')?.value;
    
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const session = getSession(sessionId);
    if (!session) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    const { id } = await request.json();
    
    const targetUser: User | null = await findUserById(id);
    if (!targetUser) {
      return NextResponse.json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    if (!canManageUser(session.user.role, targetUser.role)) {
      return NextResponse.json({ 
        error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      }, { status: 403 });
    }

    const deleted: boolean = await deleteUser(id, session.user.email);

    if (deleted) {
      return NextResponse.json({
        success: true,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
      });
    } else {
      return NextResponse.json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' }, { status: 400 });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return NextResponse.json({ 
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    }, { status: 400 });
  }
}
