// app/api/my-workouts/route.ts (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { getAuthFromRequest, createAuthErrorResponse } from '@/lib/universal-auth';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç my-workouts: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞');
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const auth = getAuthFromRequest(request);
    console.log('üîê my-workouts: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      authenticated: auth.authenticated,
      system: auth.system,
      userRole: auth.user?.role
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–æ–ª—å
    const authError = createAuthErrorResponse(auth, ['member']);
    if (authError) {
      console.log('‚ùå my-workouts: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return NextResponse.json(authError, { status: 401 });
    }

    const user = auth.user!; // –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å
    console.log('‚úÖ my-workouts: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', user.email);

    const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
    if (!convexUrl) {
      throw new Error('NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    console.log('üîç my-workouts: –∏—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ email:', user.email);

    // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const memberResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'members:getByEmail',
        args: { email: user.email }
      })
    });

    console.log('üì° my-workouts: –æ—Ç–≤–µ—Ç –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', memberResponse.status);

    if (!memberResponse.ok) {
      const errorText = await memberResponse.text();
      console.error('‚ùå my-workouts: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', memberResponse.status, errorText);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return NextResponse.json({
        success: true,
        workouts: [],
        debug: {
          memberSearchError: `HTTP ${memberResponse.status}`,
          errorText: errorText,
          searchEmail: user.email,
          authSystem: auth.system
        }
      });
    }

    const memberData = await memberResponse.json();
    const member = memberData.value;
    console.log('üë§ my-workouts: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:', member ? '–¥–∞' : '–Ω–µ—Ç');

    if (!member) {
      console.log('‚ùå my-workouts: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return NextResponse.json({
        success: true,
        workouts: [],
        debug: {
          memberFound: false,
          searchEmail: user.email,
          message: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ',
          authSystem: auth.system
        }
      });
    }

    console.log('üîç my-workouts: –ø–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', member._id);

    // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Convex
    const bookingsResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'bookings:getByMember',
        args: { memberId: member._id }
      })
    });

    console.log('üì° my-workouts: –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', bookingsResponse.status);

    if (!bookingsResponse.ok) {
      const errorText = await bookingsResponse.text();
      console.error('‚ùå my-workouts: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', bookingsResponse.status, errorText);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
      return NextResponse.json({
        success: true,
        workouts: [],
        debug: {
          bookingsError: `HTTP ${bookingsResponse.status}`,
          errorText: errorText,
          memberId: member._id,
          authSystem: auth.system
        }
      });
    }

    const bookingsData = await bookingsResponse.json();
    const bookings = bookingsData.value || [];
    console.log('üìã my-workouts: –ø–æ–ª—É—á–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', bookings.length);

    // –ï—Å–ª–∏ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (bookings.length === 0) {
      console.log('‚ÑπÔ∏è my-workouts: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π');
      return NextResponse.json({
        success: true,
        workouts: [],
        debug: {
          memberFound: true,
          bookingsCount: 0,
          authSystem: auth.system
        }
      });
    }

    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (–ø–æ–∫–∞)
    const workouts = bookings.map((booking: any) => ({
      id: booking._id,
      type: booking.workoutType || '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
      date: new Date(booking.startTime).toISOString().split('T')[0],
      time: new Date(booking.startTime).toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      }),
      duration: booking.duration || 60,
      status: booking.status || 'confirmed',
      price: booking.price || 0,
      notes: booking.notes || '',
      category: 'trainer',
      trainerId: booking.trainerId,
      trainerName: '–¢—Ä–µ–Ω–µ—Ä', // –í—Ä–µ–º–µ–Ω–Ω–æ
      trainerSpecializations: [],
      createdAt: new Date(booking.createdAt || Date.now()).toISOString(),
    }));

    console.log('‚úÖ my-workouts: —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', workouts.length);

    return NextResponse.json({
      success: true,
      workouts: workouts,
      debug: {
        memberFound: true,
        bookingsCount: bookings.length,
        processedWorkouts: workouts.length,
        authSystem: auth.system
      }
    });

  } catch (error) {
    console.error('‚ùå my-workouts: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
