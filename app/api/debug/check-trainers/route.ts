// app/api/debug/check-trainers/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç debug-trainers: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤');

    const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
    if (!convexUrl) {
      return NextResponse.json({
        error: 'CONVEX_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    const trainersResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'trainers:getAll',
        args: {}
      })
    });

    let allTrainers = [];
    let trainersError = null;

    if (trainersResponse.ok) {
      const trainersData = await trainersResponse.json();
      allTrainers = trainersData.value || [];
      console.log('üë®‚Äçüíº debug-trainers: –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', allTrainers.length);
    } else {
      trainersError = `HTTP ${trainersResponse.status}: ${await trainersResponse.text()}`;
      console.error('‚ùå debug-trainers: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', trainersError);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ elena-smirnova
    const testTrainerId = 'elena-smirnova'; // ID –∏–∑ URL
    let specificTrainer = null;
    let specificTrainerError = null;

    try {
      const specificTrainerResponse = await fetch(`${convexUrl}/api/query`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          path: 'trainers:getById',
          args: { id: testTrainerId }
        })
      });

      if (specificTrainerResponse.ok) {
        const specificTrainerData = await specificTrainerResponse.json();
        specificTrainer = specificTrainerData.value;
        console.log('üë®‚Äçüíº debug-trainers: —Ç—Ä–µ–Ω–µ—Ä elena-smirnova –Ω–∞–π–¥–µ–Ω:', !!specificTrainer);
      } else {
        specificTrainerError = `HTTP ${specificTrainerResponse.status}: ${await specificTrainerResponse.text()}`;
        console.error('‚ùå debug-trainers: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ elena-smirnova:', specificTrainerError);
      }
    } catch (error) {
      specificTrainerError = error instanceof Error ? error.message : 'Unknown error';
    }

    return NextResponse.json({
      success: true,
      debug: {
        convexUrl,
        totalTrainers: allTrainers.length,
        trainersError,
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–∞—Ö
        allTrainers: allTrainers.map((trainer: any) => ({
          id: trainer._id,
          name: trainer.name,
          email: trainer.email,
          isActive: trainer.isActive
        })),
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
        searchedTrainerId: testTrainerId,
        specificTrainerFound: !!specificTrainer,
        specificTrainerError,
        specificTrainerData: specificTrainer ? {
          id: specificTrainer._id,
          name: specificTrainer.name,
          email: specificTrainer.email,
          isActive: specificTrainer.isActive
        } : null
      }
    });

  } catch (error) {
    console.error('‚ùå debug-trainers: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return NextResponse.json({
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
