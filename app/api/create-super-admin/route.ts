// app/api/create-super-admin/route.ts (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ—Ç–ª–∞–¥–∫–æ–π)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";
import bcrypt from 'bcryptjs';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  console.log('üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞');
  
  try {
    const email = "romangulanyan@gmail.com";
    const password = "Hovik-970";
    const name = "–†–æ–º–∞–Ω –ì—É–ª–∞–Ω—è–Ω";

    console.log('üìß Email:', email);
    console.log('üîë –ü–∞—Ä–æ–ª—å –¥–ª–∏–Ω–∞:', password.length);
    console.log('üë§ –ò–º—è:', name);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Convex
    console.log('üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Convex...');
    if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
      throw new Error('NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
    console.log('‚úÖ Convex URL:', process.env.NEXT_PUBLIC_CONVEX_URL);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    let existingAdmin;
    try {
      existingAdmin = await convex.query("users:getByEmail", { email });
      console.log('üë§ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', existingAdmin ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error}`);
    }

    if (existingAdmin) {
      console.log('‚ÑπÔ∏è –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      return NextResponse.json({
        success: true,
        message: '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
        exists: true,
        user: {
          id: existingAdmin._id,
          email: existingAdmin.email,
          name: existingAdmin.name,
          role: existingAdmin.role
        }
      });
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    console.log('üîê –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å...');
    let hashedPassword;
    try {
      hashedPassword = await bcrypt.hash(password, 12);
      console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞ —Ö–µ—à–∞:', hashedPassword.length);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error);
      throw new Error(`–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${error}`);
    }

    // –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    console.log('üëë –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞...');
    let userId;
    try {
      userId = await convex.mutation("users:create", {
        email,
        password: hashedPassword,
        name,
        role: 'super-admin',
        isActive: true,
        createdAt: Date.now()
      });
      console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —Å ID:', userId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error}`);
    }

    console.log('üéâ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    return NextResponse.json({
      success: true,
      message: '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      userId,
      exists: false
    });

  } catch (error) {
    console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:', error);
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞',
        details: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}
