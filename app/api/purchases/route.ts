// app/api/purchases/route.ts (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { getAuthFromRequest, createAuthErrorResponse } from '@/lib/universal-auth';

export async function POST(request: NextRequest) {
  try {
    console.log('üîç purchases: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∫—É–ø–∫–∏');

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const auth = getAuthFromRequest(request);
    console.log('üîê purchases: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      authenticated: auth.authenticated,
      system: auth.system,
      userRole: auth.user?.role
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–æ–ª—å
    const authError = createAuthErrorResponse(auth, ['member']);
    if (authError) {
      console.log('‚ùå purchases: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return NextResponse.json(authError, { status: 401 });
    }

    const user = auth.user!;
    console.log('‚úÖ purchases: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', user.email);

    const body = await request.json();
    console.log('üí≥ purchases: –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏:', body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!body.type || !body.price) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: type, price' 
        },
        { status: 400 }
      );
    }

    const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
    if (!convexUrl) {
      throw new Error('NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const memberResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'members:getByEmail',
        args: { email: user.email }
      })
    });

    if (!memberResponse.ok) {
      console.error('‚ùå purchases: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', memberResponse.status);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }

    const memberData = await memberResponse.json();
    const member = memberData.value;

    if (!member) {
      console.log('‚ùå purchases: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json(
        { success: false, error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 404 }
      );
    }

    console.log('üë§ purchases: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:', member._id);

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    const purchaseData = {
      memberId: member._id,
      memberEmail: user.email,
      type: body.type,
      title: body.title || body.type,
      price: parseFloat(body.price.toString().replace(/[^\d.]/g, '')),
      currency: 'RUB',
      status: 'completed',
      paymentMethod: body.paymentMethod || 'card',
      description: body.description || '',
      metadata: {
        duration: body.duration,
        sessions: body.sessions,
        validUntil: body.validUntil,
        features: body.features || []
      },
      purchaseDate: Date.now(),
      createdAt: Date.now()
    };

    console.log('üí∞ purchases: —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ:', purchaseData);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É –≤ Convex
    const purchaseResponse = await fetch(`${convexUrl}/api/mutation`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'purchases:create',
        args: purchaseData
      })
    });

    if (!purchaseResponse.ok) {
      const errorText = await purchaseResponse.text();
      console.error('‚ùå purchases: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:', purchaseResponse.status, errorText);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∫–µ');
    }

    const purchaseResult = await purchaseResponse.json();
    const purchaseId = purchaseResult.value;

    console.log('‚úÖ purchases: –ø–æ–∫—É–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', purchaseId);

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
    if (body.type.includes('–∞–±–æ–Ω–µ–º–µ–Ω—Ç') || body.type.includes('membership') || body.type.includes('–ú–µ—Å—è—á–Ω—ã–π') || body.type.includes('–ì–æ–¥–æ–≤–æ–π')) {
      try {
        const membershipData = {
          type: body.type,
          purchaseId: purchaseId,
          startDate: Date.now(),
          endDate: body.validUntil ? new Date(body.validUntil).getTime() : Date.now() + (30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          sessionsRemaining: body.sessions || 0,
          status: 'active'
        };

        console.log('üí≥ purchases: –æ–±–Ω–æ–≤–ª—è–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:', membershipData);

        const membershipResponse = await fetch(`${convexUrl}/api/mutation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            path: 'members:updateMembership',
            args: {
              memberId: member._id,
              membership: membershipData
            }
          })
        });

        if (membershipResponse.ok) {
          console.log('‚úÖ purchases: –∞–±–æ–Ω–µ–º–µ–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
          const errorText = await membershipResponse.text();
          console.warn('‚ö†Ô∏è purchases: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:', errorText);
        }
      } catch (membershipError) {
        console.error('‚ö†Ô∏è purchases: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞:', membershipError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
    try {
      console.log('üìß purchases: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ...');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email, SMS –∏–ª–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    } catch (notificationError) {
      console.warn('‚ö†Ô∏è purchases: –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
    }

    return NextResponse.json({
      success: true,
      purchase: {
        id: purchaseId,
        type: body.type,
        title: body.title,
        price: body.price,
        status: 'completed',
        purchaseDate: new Date().toISOString(),
        memberEmail: user.email
      },
      message: '–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      debug: {
        authSystem: auth.system,
        userId: user.id,
        memberId: member._id,
        purchaseId: purchaseId,
        membershipUpdated: body.type.includes('–∞–±–æ–Ω–µ–º–µ–Ω—Ç') || body.type.includes('membership')
      }
    });

  } catch (error) {
    console.error('‚ùå purchases: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    console.log('üîç purchases GET: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫');

    const auth = getAuthFromRequest(request);
    const authError = createAuthErrorResponse(auth, ['member']);
    if (authError) {
      return NextResponse.json(authError, { status: 401 });
    }

    const user = auth.user!;
    const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
    if (!convexUrl) {
      throw new Error('NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const memberResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'members:getByEmail',
        args: { email: user.email }
      })
    });

    if (!memberResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }

    const memberData = await memberResponse.json();
    const member = memberData.value;

    if (!member) {
      return NextResponse.json(
        { success: false, error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
    const purchasesResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'purchases:getByMember',
        args: { memberId: member._id }
      })
    });

    if (!purchasesResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫—É–ø–æ–∫');
    }

    const purchasesData = await purchasesResponse.json();
    const purchases = purchasesData.value || [];

    console.log('üìã purchases GET: –Ω–∞–π–¥–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫:', purchases.length);

    const formattedPurchases = purchases.map((purchase: any) => ({
      id: purchase._id,
      type: purchase.type,
      title: purchase.title,
      price: purchase.price,
      currency: purchase.currency,
      status: purchase.status,
      purchaseDate: new Date(purchase.purchaseDate).toISOString(),
      description: purchase.description,
      metadata: purchase.metadata
    }));

    return NextResponse.json({
      success: true,
      purchases: formattedPurchases,
      debug: {
        authSystem: auth.system,
        userEmail: user.email,
        purchasesCount: purchases.length
      }
    });

  } catch (error) {
    console.error('‚ùå purchases GET: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
