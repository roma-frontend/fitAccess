// app/api/clients/stats/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockClients, mockSessions, Client, Session } from '@/lib/mock-data';

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
interface ExtendedClient extends Omit<Client, 'status'> {
  status: 'active' | 'inactive' | 'suspended' | 'trial';
}

interface ClientActivityStats {
  clientId: string;
  clientName: string;
  totalSessions: number;
  completedSessions: number;
  lastSession: string | null;
}

interface DailyClientStats {
  date: string;
  newClients: number;
  activeClients: number;
  trialClients: number;
}

interface ClientStatusStats {
  active: number;
  inactive: number;
  trial: number;
  suspended: number;
}

interface MembershipStats {
  basic: number;
  premium: number;
  vip: number;
}

interface ClientOverviewStats {
  total: number;
  newThisPeriod: number;
  activeClients: number;
  inactiveClients: number;
  avgSessionsPerClient: number;
}

interface ActivityStatsData {
  topActive: ClientActivityStats[];
  inactive: number;
  totalSessions: number;
  completedSessions: number;
}

interface TrendsData {
  daily: DailyClientStats[];
  period: string;
  startDate: string;
  endDate: string;
}

interface ClientStatsResponse {
  overview: ClientOverviewStats;
  status: ClientStatusStats;
  membership: MembershipStats;
  activity: ActivityStatsData;
  trends: TrendsData;
}

// GET /api/clients/stats - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
export const GET = withPermissions(
  { resource: 'clients', action: 'read' },
  async (req: AuthenticatedRequest) => {
    try {
      console.log('üìä API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤');
      
      const { user } = req;
      const url = new URL(req.url);
      const period = url.searchParams.get('period') || 'month';
      const trainerId = url.searchParams.get('trainerId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mockClients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(mockClients)) {
        console.error('mockClients is not an array:', mockClients);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤' },
          { status: 500 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mockSessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
      if (!Array.isArray(mockSessions)) {
        console.error('mockSessions is not an array:', mockSessions);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π' },
          { status: 500 }
        );
      }

      // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 'trial' —Å—Ç–∞—Ç—É—Å–∞
      let clients: ExtendedClient[] = [...mockClients].map(client => ({
        ...client,
        status: (client.status === 'inactive' && Math.random() > 0.8) ? 'trial' as const : client.status as 'active' | 'inactive' | 'suspended' | 'trial'
      }));
      
      let sessions: Session[] = [...mockSessions];

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
      if (user.role === 'trainer') {
        clients = clients.filter((client: ExtendedClient) => client.trainerId === user.id);
        sessions = sessions.filter((session: Session) => session.trainerId === user.id);
      } else if (trainerId && (user.role === 'admin' || user.role === 'manager')) {
        clients = clients.filter((client: ExtendedClient) => client.trainerId === trainerId);
        sessions = sessions.filter((session: Session) => session.trainerId === trainerId);
      }

      const now = new Date();
      let startDate: Date;

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
      switch (period) {
        case 'day':
          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
          break;
        case 'week':
          const weekStart = new Date(now);
          weekStart.setDate(now.getDate() - now.getDay());
          startDate = weekStart;
          break;
        case 'year':
          startDate = new Date(now.getFullYear(), 0, 1);
          break;
        default: // month
          startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥—É
      const periodClients = clients.filter((client: ExtendedClient) => 
        new Date(client.createdAt) >= startDate
      );

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const statusStats: ClientStatusStats = {
        active: clients.filter((c: ExtendedClient) => c.status === 'active').length,
        inactive: clients.filter((c: ExtendedClient) => c.status === 'inactive').length,
        trial: clients.filter((c: ExtendedClient) => c.status === 'trial').length,
        suspended: clients.filter((c: ExtendedClient) => c.status === 'suspended').length
      };

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–ª–µ–Ω—Å—Ç–≤–∞
      const membershipStats: MembershipStats = {
        basic: clients.filter((c: ExtendedClient) => c.membershipType === 'basic').length,
        premium: clients.filter((c: ExtendedClient) => c.membershipType === 'premium').length,
        vip: clients.filter((c: ExtendedClient) => c.membershipType === 'vip').length
      };

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const activityStats: ClientActivityStats[] = clients.map((client: ExtendedClient) => {
        const clientSessions = sessions.filter((s: Session) => s.clientId === client.id);
        const completedSessions = clientSessions.filter((s: Session) => s.status === 'completed');
        
        return {
          clientId: client.id,
          clientName: client.name,
          totalSessions: clientSessions.length,
          completedSessions: completedSessions.length,
          lastSession: completedSessions.length > 0 
            ? completedSessions
                .sort((a: Session, b: Session) => 
                  new Date(`${b.date}T${b.startTime}`).getTime() - new Date(`${a.date}T${a.startTime}`).getTime()
                )[0].date
            : null
        };
      });

      // –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      const topActiveClients = activityStats
        .sort((a, b) => b.completedSessions - a.completedSessions)
        .slice(0, 10);

      // –ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const inactiveClientsCount = activityStats
        .filter(client => client.completedSessions === 0)
        .length;

      // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
      const newClientsCount = periodClients.length;

      // –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –¥–Ω—è–º (–¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞)
      const dailyStats = getDailyClientStats(clients, startDate, now);

      // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      const avgSessionsPerClient = clients.length > 0 
        ? Math.round(sessions.length / clients.length * 100) / 100
        : 0;

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const additionalMetrics = calculateAdditionalMetrics(clients, sessions, startDate, now);

      const stats: ClientStatsResponse = {
        overview: {
          total: clients.length,
          newThisPeriod: newClientsCount,
          activeClients: statusStats.active,
          inactiveClients: inactiveClientsCount,
          avgSessionsPerClient
        },
        status: statusStats,
        membership: membershipStats,
        activity: {
          topActive: topActiveClients,
          inactive: inactiveClientsCount,
          totalSessions: sessions.length,
          completedSessions: sessions.filter((s: Session) => s.status === 'completed').length
        },
        trends: {
          daily: dailyStats,
          period: period,
          startDate: startDate.toISOString(),
          endDate: now.toISOString()
        }
      };

      console.log(`‚úÖ API: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${clients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞`);

      return NextResponse.json({
        success: true,
        data: {
          ...stats,
          additional: additionalMetrics
        },
        meta: {
          generatedAt: now.toISOString(),
          requestedBy: user.email,
          period: period,
          trainerId: trainerId || null,
          clientsCount: clients.length
        }
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤' },
        { status: 500 }
      );
    }
  }
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function getDailyClientStats(clients: ExtendedClient[], startDate: Date, endDate: Date): DailyClientStats[] {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('getDailyClientStats: clients is not an array:', clients);
    return [];
  }

  const dailyStats: DailyClientStats[] = [];
  const currentDate = new Date(startDate);

  while (currentDate <= endDate) {
    const dayStr = currentDate.toISOString().split('T')[0];
    const dayClients = clients.filter((client: ExtendedClient) => 
      client.createdAt.split('T')[0] === dayStr
    );

    dailyStats.push({
      date: dayStr,
      newClients: dayClients.length,
      activeClients: dayClients.filter((c: ExtendedClient) => c.status === 'active').length,
      trialClients: dayClients.filter((c: ExtendedClient) => c.status === 'trial').length
    });

    currentDate.setDate(currentDate.getDate() + 1);
  }

  return dailyStats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
function calculateAdditionalMetrics(
  clients: ExtendedClient[], 
  sessions: Session[], 
  startDate: Date, 
  endDate: Date
): {
  retention: {
    rate: number;
    byMembership: Record<string, number>;
  };
  engagement: {
    averageSessionsPerActiveClient: number;
    clientsWithRecentActivity: number;
    clientsWithoutRecentActivity: number;
  };
  conversion: {
    trialToActive: number;
    trialToActiveRate: number;
  };
  churn: {
    rate: number;
    suspendedClients: number;
    inactiveClients: number;
  };
  revenue: {
    estimatedMonthlyRevenue: number;
    revenueByMembership: Record<string, number>;
  };
  demographics: {
    byMembership: Record<string, number>;
    averageClientAge: number;
    newVsReturning: {
      new: number;
      returning: number;
    };
  };
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('calculateAdditionalMetrics: clients is not an array:', clients);
    return {
      retention: { rate: 0, byMembership: {} },
      engagement: { averageSessionsPerActiveClient: 0, clientsWithRecentActivity: 0, clientsWithoutRecentActivity: 0 },
      conversion: { trialToActive: 0, trialToActiveRate: 0 },
      churn: { rate: 0, suspendedClients: 0, inactiveClients: 0 },
      revenue: { estimatedMonthlyRevenue: 0, revenueByMembership: {} },
      demographics: { byMembership: {}, averageClientAge: 0, newVsReturning: { new: 0, returning: 0 } }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('calculateAdditionalMetrics: sessions is not an array:', sessions);
    sessions = [];
  }

  const activeClients = clients.filter(c => c.status === 'active');
  const trialClients = clients.filter(c => c.status === 'trial');
  const suspendedClients = clients.filter(c => c.status === 'suspended');
  const inactiveClients = clients.filter(c => c.status === 'inactive');

  // –†–∞—Å—á–µ—Ç retention rate
  const totalClients = clients.length;
  const retainedClients = activeClients.length;
  const retentionRate = totalClients > 0 ? Math.round((retainedClients / totalClients) * 100) : 0;

  // Retention –ø–æ —Ç–∏–ø–∞–º —á–ª–µ–Ω—Å—Ç–≤–∞
  const retentionByMembership: Record<string, number> = {};
  ['basic', 'premium', 'vip'].forEach(membershipType => {
    const membershipClients = clients.filter(c => c.membershipType === membershipType);
    const activeMembershipClients = membershipClients.filter(c => c.status === 'active');
    retentionByMembership[membershipType] = membershipClients.length > 0 
      ? Math.round((activeMembershipClients.length / membershipClients.length) * 100)
      : 0;
  });

  // Engagement –º–µ—Ç—Ä–∏–∫–∏
  const recentActivityThreshold = new Date();
  recentActivityThreshold.setDate(recentActivityThreshold.getDate() - 30);

  const clientsWithRecentActivity = clients.filter(client => {
    const clientSessions = sessions.filter(s => s.clientId === client.id);
    const recentSessions = clientSessions.filter(s => 
      new Date(`${s.date}T${s.startTime}`) >= recentActivityThreshold
    );
    return recentSessions.length > 0;
  }).length;

  const averageSessionsPerActiveClient = activeClients.length > 0
    ? Math.round((sessions.filter(s => s.status === 'completed').length / activeClients.length) * 100) / 100
    : 0;

  // Conversion –º–µ—Ç—Ä–∏–∫–∏
  const trialToActiveConversions = clients.filter(c => 
    c.status === 'active' && 
    new Date(c.createdAt) >= startDate &&
    new Date(c.createdAt) >= new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
  ).length;

  const trialToActiveRate = trialClients.length > 0 
    ? Math.round((trialToActiveConversions / trialClients.length) * 100)
    : 0;

  // Churn rate
  const churnedClients = suspendedClients.length + inactiveClients.length;
  const churnRate = totalClients > 0 ? Math.round((churnedClients / totalClients) * 100) : 0;

  // Revenue estimation
  const membershipPrices = { basic: 2000, premium: 4000, vip: 8000 };
  const estimatedMonthlyRevenue = activeClients.reduce((total: number, client: ExtendedClient) => {
    const price = membershipPrices[client.membershipType as keyof typeof membershipPrices] || 0;
    return total + price;
  }, 0);

  const revenueByMembership: Record<string, number> = {};
  Object.keys(membershipPrices).forEach(membershipType => {
    const membershipActiveClients = activeClients.filter(c => c.membershipType === membershipType);
    const price = membershipPrices[membershipType as keyof typeof membershipPrices];
    revenueByMembership[membershipType] = membershipActiveClients.length * price;
  });

  // Demographics
  const membershipDistribution: Record<string, number> = {};
  ['basic', 'premium', 'vip'].forEach(membershipType => {
    membershipDistribution[membershipType] = clients.filter(c => c.membershipType === membershipType).length;
  });

  // –ù–æ–≤—ã–µ vs –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–µ—Å—è –∫–ª–∏–µ–Ω—Ç—ã
  const periodStart = new Date(startDate);
  const newClients = clients.filter(c => new Date(c.createdAt) >= periodStart).length;
  const returningClients = clients.length - newClients;

  // –°—Ä–µ–¥–Ω–∏–π "–≤–æ–∑—Ä–∞—Å—Ç" –∫–ª–∏–µ–Ω—Ç–∞
  const now = new Date();
  const averageClientAge = clients.length > 0
    ? Math.round(clients.reduce((sum: number, client: ExtendedClient) => {
        const clientAge = (now.getTime() - new Date(client.createdAt).getTime()) / (1000 * 60 * 60 * 24);
        return sum + clientAge;
      }, 0) / clients.length)
    : 0;

  return {
    retention: {
      rate: retentionRate,
      byMembership: retentionByMembership
    },
    engagement: {
      averageSessionsPerActiveClient,
      clientsWithRecentActivity,
      clientsWithoutRecentActivity: clients.length - clientsWithRecentActivity
    },
    conversion: {
      trialToActive: trialToActiveConversions,
      trialToActiveRate
    },
    churn: {
      rate: churnRate,
      suspendedClients: suspendedClients.length,
      inactiveClients: inactiveClients.length
    },
    revenue: {
      estimatedMonthlyRevenue,
      revenueByMembership
    },
    demographics: {
      byMembership: membershipDistribution,
      averageClientAge,
      newVsReturning: {
        new: newClients,
        returning: returningClients
      }
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
export function analyzeClientSegments(clients: ExtendedClient[], sessions: Session[]): {
  segments: Array<{
    name: string;
    count: number;
    percentage: number;
    characteristics: string[];
    averageSessions: number;
    revenue: number;
  }>;
  insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
    segment: string;
  }>;
} {
  const segments = [];
  const insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
    segment: string;
  }> = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('analyzeClientSegments: clients is not an array:', clients);
    return { segments: [], insights: [] };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('analyzeClientSegments: sessions is not an array:', sessions);
    sessions = [];
  }

  // –°–µ–≥–º–µ–Ω—Ç "VIP –∫–ª–∏–µ–Ω—Ç—ã"
  const vipClients = clients.filter((c: ExtendedClient) => c.membershipType === 'vip' && c.status === 'active');
  const vipSessions = sessions.filter((s: Session) => vipClients.some((c: ExtendedClient) => c.id === s.clientId));
  
  segments.push({
    name: 'VIP –∫–ª–∏–µ–Ω—Ç—ã',
    count: vipClients.length,
    percentage: clients.length > 0 ? Math.round((vipClients.length / clients.length) * 100) : 0,
    characteristics: ['–ü—Ä–µ–º–∏—É–º —á–ª–µ–Ω—Å—Ç–≤–æ', '–í—ã—Å–æ–∫–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'],
    averageSessions: vipClients.length > 0 ? Math.round(vipSessions.length / vipClients.length * 10) / 10 : 0,
    revenue: vipClients.length * 8000
  });

  // –°–µ–≥–º–µ–Ω—Ç "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
  const activeUsers = clients.filter((c: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === c.id && s.status === 'completed');
    return clientSessions.length >= 4;
  });
  
  segments.push({
    name: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    count: activeUsers.length,
    percentage: clients.length > 0 ? Math.round((activeUsers.length / clients.length) * 100) : 0,
    characteristics: ['–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '–í—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å'],
    averageSessions: activeUsers.length > 0 ? 
      Math.round(sessions.filter((s: Session) => activeUsers.some((c: ExtendedClient) => c.id === s.clientId)).length / activeUsers.length * 10) / 10 : 0,
    revenue: activeUsers.reduce((sum: number, client: ExtendedClient) => {
      const price = client.membershipType === 'vip' ? 8000 : client.membershipType === 'premium' ? 4000 : 2000;
      return sum + price;
    }, 0)
  });

  // –°–µ–≥–º–µ–Ω—Ç "–ù–æ–≤–∏—á–∫–∏"
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
  const newbies = clients.filter((c: ExtendedClient) => new Date(c.createdAt) >= thirtyDaysAgo);
  
  segments.push({
    name: '–ù–æ–≤–∏—á–∫–∏',
    count: newbies.length,
    percentage: clients.length > 0 ? Math.round((newbies.length / clients.length) * 100) : 0,
    characteristics: ['–ù–µ–¥–∞–≤–Ω—è—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ü–µ—Ä–∏–æ–¥ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏'],
    averageSessions: newbies.length > 0 ? 
      Math.round(sessions.filter((s: Session) => newbies.some((c: ExtendedClient) => c.id === s.clientId)).length / newbies.length * 10) / 10 : 0,
    revenue: newbies.reduce((sum: number, client: ExtendedClient) => {
      const price = client.membershipType === 'vip' ? 8000 : client.membershipType === 'premium' ? 4000 : 2000;
      return sum + price;
    }, 0)
  });

  // –°–µ–≥–º–µ–Ω—Ç "–ì—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞"
  const riskClients = clients.filter((c: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === c.id);
    const recentSessions = clientSessions.filter((s: Session) => {
      const sessionDate = new Date(`${s.date}T${s.startTime}`);
      const twoWeeksAgo = new Date();
      twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
      return sessionDate >= twoWeeksAgo;
    });
    return recentSessions.length === 0 && c.status === 'active';
  });

  segments.push({
    name: '–ì—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞',
    count: riskClients.length,
    percentage: clients.length > 0 ? Math.round((riskClients.length / clients.length) * 100) : 0,
    characteristics: ['–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 2+ –Ω–µ–¥–µ–ª–∏', '–†–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞'],
    averageSessions: 0,
    revenue: riskClients.reduce((sum: number, client: ExtendedClient) => {
      const price = client.membershipType === 'vip' ? 8000 : client.membershipType === 'premium' ? 4000 : 2000;
      return sum + price;
    }, 0)
  });

  // –°–µ–≥–º–µ–Ω—Ç "–ü—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"
  const trialClients = clients.filter((c: ExtendedClient) => c.status === 'trial');
  
  segments.push({
    name: '–ü—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
    count: trialClients.length,
    percentage: clients.length > 0 ? Math.round((trialClients.length / clients.length) * 100) : 0,
    characteristics: ['–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥', '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'],
    averageSessions: trialClients.length > 0 ? 
      Math.round(sessions.filter((s: Session) => trialClients.some((c: ExtendedClient) => c.id === s.clientId)).length / trialClients.length * 10) / 10 : 0,
    revenue: trialClients.length * 1000 // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–Ω–∏–∂–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
  if (vipClients.length > 0) {
    insights.push({
      type: 'success',
      title: 'VIP —Å–µ–≥–º–µ–Ω—Ç',
      description: `${vipClients.length} VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–æ—Å—è—Ç ${(vipClients.length * 8000).toLocaleString('ru-RU')} ‚ÇΩ –≤ –º–µ—Å—è—Ü`,
      segment: 'VIP –∫–ª–∏–µ–Ω—Ç—ã'
    });
  }

  if (riskClients.length > clients.length * 0.2) {
    insights.push({
      type: 'warning',
      title: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞',
      description: `${riskClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ (${Math.round((riskClients.length / clients.length) * 100)}%) –Ω–µ –ø—Ä–æ—è–≤–ª—è—é—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`,
      segment: '–ì—Ä—É–ø–ø–∞ —Ä–∏—Å–∫–∞'
    });
  }

  if (newbies.length > clients.length * 0.3) {
    insights.push({
      type: 'info',
      title: '–ü—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: `${newbies.length} –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü - —Ö–æ—Ä–æ—à–∏–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–æ—Å—Ç–∞`,
      segment: '–ù–æ–≤–∏—á–∫–∏'
    });
  }

  if (trialClients.length > 0) {
    insights.push({
      type: 'info',
      title: '–ü—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      description: `${trialClients.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏`,
      segment: '–ü—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'
    });
  }

  if (activeUsers.length > clients.length * 0.4) {
    insights.push({
      type: 'success',
      title: '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      description: `${Math.round((activeUsers.length / clients.length) * 100)}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`,
      segment: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
    });
  }

  return { segments, insights };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
export function predictClientChurn(clients: ExtendedClient[], sessions: Session[]): {
  churnPrediction: Array<{
    clientId: string;
    clientName: string;
    churnRisk: 'low' | 'medium' | 'high';
    riskScore: number;
    factors: string[];
    recommendations: string[];
  }>;
  summary: {
    highRisk: number;
    mediumRisk: number;
    lowRisk: number;
    totalRevenueAtRisk: number;
  };
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('predictClientChurn: clients is not an array:', clients);
    return {
      churnPrediction: [],
      summary: { highRisk: 0, mediumRisk: 0, lowRisk: 0, totalRevenueAtRisk: 0 }
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('predictClientChurn: sessions is not an array:', sessions);
    sessions = [];
  }

  const churnPrediction = clients.map((client: ExtendedClient) => {
    let riskScore = 0;
    const factors: string[] = [];
    const recommendations: string[] = [];

    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id);
    const completedSessions = clientSessions.filter((s: Session) => s.status === 'completed');
    const cancelledSessions = clientSessions.filter((s: Session) => s.status === 'cancelled');

    // –§–∞–∫—Ç–æ—Ä 1: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const lastSession = completedSessions.length > 0 
      ? Math.max(...completedSessions.map((s: Session) => new Date(`${s.date}T${s.startTime}`).getTime()))
      : 0;
    
    const daysSinceLastSession = lastSession > 0 
      ? (Date.now() - lastSession) / (1000 * 60 * 60 * 24)
      : 999;

    if (daysSinceLastSession > 30) {
      riskScore += 40;
      factors.push('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π');
      recommendations.push('–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω');
    } else if (daysSinceLastSession > 14) {
      riskScore += 20;
      factors.push('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 2 –Ω–µ–¥–µ–ª—å');
      recommendations.push('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É');
    }

    // –§–∞–∫—Ç–æ—Ä 2: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω
    const cancellationRate = clientSessions.length > 0 
      ? (cancelledSessions.length / clientSessions.length) * 100 
      : 0;

    if (cancellationRate > 50) {
      riskScore += 30;
      factors.push('–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω —Å–µ—Å—Å–∏–π');
      recommendations.push('–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–¥—Ö–æ–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º');
        } else if (cancellationRate > 25) {
      riskScore += 15;
      factors.push('–£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω');
      recommendations.push('–û–±—Å—É–¥–∏—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    }

    // –§–∞–∫—Ç–æ—Ä 3: –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    const sessionsPerWeek = completedSessions.length > 0 
      ? completedSessions.length / 4
      : 0;

    if (sessionsPerWeek < 1) {
      riskScore += 25;
      factors.push('–ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
      recommendations.push('–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è');
    }

    // –§–∞–∫—Ç–æ—Ä 4: –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
    if (client.status === 'trial') {
      riskScore += 20;
      factors.push('–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥');
      recommendations.push('–ê–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π');
    } else if (client.status === 'inactive') {
      riskScore += 50;
      factors.push('–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
      recommendations.push('–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è');
    } else if (client.status === 'suspended') {
      riskScore += 60;
      factors.push('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
      recommendations.push('–°—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º');
    }

    // –§–∞–∫—Ç–æ—Ä 5: –¢–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞
    if (client.membershipType === 'basic') {
      riskScore += 10;
      factors.push('–ë–∞–∑–æ–≤–æ–µ —á–ª–µ–Ω—Å—Ç–≤–æ');
      recommendations.push('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ø–≥—Ä–µ–π–¥ –¥–æ –ø—Ä–µ–º–∏—É–º');
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    let churnRisk: 'low' | 'medium' | 'high';
    if (riskScore >= 70) {
      churnRisk = 'high';
    } else if (riskScore >= 40) {
      churnRisk = 'medium';
    } else {
      churnRisk = 'low';
    }

    return {
      clientId: client.id,
      clientName: client.name,
      churnRisk,
      riskScore: Math.min(riskScore, 100),
      factors,
      recommendations
    };
  });

  // –°–≤–æ–¥–∫–∞
  const highRisk = churnPrediction.filter(p => p.churnRisk === 'high').length;
  const mediumRisk = churnPrediction.filter(p => p.churnRisk === 'medium').length;
  const lowRisk = churnPrediction.filter(p => p.churnRisk === 'low').length;

  const membershipPrices = { basic: 2000, premium: 4000, vip: 8000 };
  const totalRevenueAtRisk = churnPrediction
    .filter(p => p.churnRisk === 'high')
    .reduce((sum: number, prediction) => {
      const client = clients.find((c: ExtendedClient) => c.id === prediction.clientId);
      if (client) {
        const price = membershipPrices[client.membershipType as keyof typeof membershipPrices] || 0;
        return sum + price;
      }
      return sum;
    }, 0);

  return {
    churnPrediction,
    summary: {
      highRisk,
      mediumRisk,
      lowRisk,
      totalRevenueAtRisk
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞
export function analyzeClientLifecycle(clients: ExtendedClient[], sessions: Session[]): {
  stages: Array<{
    stage: string;
    count: number;
    percentage: number;
    averageDuration: number;
    conversionRate: number;
  }>;
  insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
  }>;
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('analyzeClientLifecycle: clients is not an array:', clients);
    return { stages: [], insights: [] };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('analyzeClientLifecycle: sessions is not an array:', sessions);
    sessions = [];
  }

  const now = new Date();
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–¥–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
  const stages = [
    {
      stage: '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç',
      clients: clients.filter((c: ExtendedClient) => {
        const daysSinceJoin = (now.getTime() - new Date(c.createdAt).getTime()) / (1000 * 60 * 60 * 24);
        return daysSinceJoin <= 7;
      })
    },
    {
      stage: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è',
      clients: clients.filter((c: ExtendedClient) => {
        const daysSinceJoin = (now.getTime() - new Date(c.createdAt).getTime()) / (1000 * 60 * 60 * 24);
        const clientSessions = sessions.filter((s: Session) => s.clientId === c.id && s.status === 'completed');
        return daysSinceJoin > 7 && daysSinceJoin <= 30 && clientSessions.length >= 1;
      })
    },
    {
      stage: '–í–æ–≤–ª–µ—á–µ–Ω–∏–µ',
      clients: clients.filter((c: ExtendedClient) => {
        const daysSinceJoin = (now.getTime() - new Date(c.createdAt).getTime()) / (1000 * 60 * 60 * 24);
        const clientSessions = sessions.filter((s: Session) => s.clientId === c.id && s.status === 'completed');
        return daysSinceJoin > 30 && daysSinceJoin <= 90 && clientSessions.length >= 4;
      })
    },
    {
      stage: '–õ–æ—è–ª—å–Ω–æ—Å—Ç—å',
      clients: clients.filter((c: ExtendedClient) => {
        const daysSinceJoin = (now.getTime() - new Date(c.createdAt).getTime()) / (1000 * 60 * 60 * 24);
        const clientSessions = sessions.filter((s: Session) => s.clientId === c.id && s.status === 'completed');
        return daysSinceJoin > 90 && clientSessions.length >= 12 && c.status === 'active';
      })
    },
    {
      stage: '–û—Ç—Ç–æ–∫',
      clients: clients.filter((c: ExtendedClient) => c.status === 'inactive' || c.status === 'suspended')
    }
  ];

  const totalClients = clients.length;
  
  const stageAnalysis = stages.map((stageData, index) => {
    const count = stageData.clients.length;
    const percentage = totalClients > 0 ? Math.round((count / totalClients) * 100) : 0;
    
    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—Ç–∞–¥–∏–∏
    const averageDuration = stageData.clients.length > 0 
      ? Math.round(stageData.clients.reduce((sum: number, client: ExtendedClient) => {
          const daysSinceJoin = (now.getTime() - new Date(client.createdAt).getTime()) / (1000 * 60 * 60 * 24);
          return sum + daysSinceJoin;
        }, 0) / stageData.clients.length)
      : 0;

    // –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é
    let conversionRate = 0;
    if (index < stages.length - 1) {
      const nextStageCount = stages[index + 1].clients.length;
      conversionRate = count > 0 ? Math.round((nextStageCount / count) * 100) : 0;
    }

    return {
      stage: stageData.stage,
      count,
      percentage,
      averageDuration,
      conversionRate
    };
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
  const insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
  }> = [];

  // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
  const activationRate = stageAnalysis[1]?.conversionRate || 0;
  if (activationRate < 50) {
    insights.push({
      type: 'warning',
      title: '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: `–¢–æ–ª—å–∫–æ ${activationRate}% –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é`
    });
  } else if (activationRate > 70) {
    insights.push({
      type: 'success',
      title: '–û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è',
      description: `${activationRate}% –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è`
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  const loyaltyStage = stageAnalysis.find(s => s.stage === '–õ–æ—è–ª—å–Ω–æ—Å—Ç—å');
  if (loyaltyStage && loyaltyStage.percentage > 30) {
    insights.push({
      type: 'success',
      title: '–í—ã—Å–æ–∫–∞—è –ª–æ—è–ª—å–Ω–æ—Å—Ç—å',
      description: `${loyaltyStage.percentage}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å—Ç–∞–¥–∏–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏`
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞
  const churnStage = stageAnalysis.find(s => s.stage === '–û—Ç—Ç–æ–∫');
  if (churnStage && churnStage.percentage > 20) {
    insights.push({
      type: 'warning',
      title: '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç—Ç–æ–∫–∞',
      description: `${churnStage.percentage}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –æ—Ç—Ç–æ–∫–∞`
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const newClientStage = stageAnalysis.find(s => s.stage === '–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç');
  if (newClientStage && newClientStage.percentage > 15) {
    insights.push({
      type: 'info',
      title: '–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: `${newClientStage.percentage}% –∫–ª–∏–µ–Ω—Ç–æ–≤ - –Ω–æ–≤–∏—á–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è`
    });
  }

  return {
    stages: stageAnalysis,
    insights
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Customer Lifetime Value (CLV)
export function calculateClientLifetimeValue(clients: ExtendedClient[], sessions: Session[]): {
  averageCLV: number;
  clvBySegment: Record<string, number>;
  topValueClients: Array<{
    clientId: string;
    clientName: string;
    clv: number;
    totalSessions: number;
    membershipType: string;
  }>;
  insights: Array<{
    type: 'success' | 'info' | 'warning';
    title: string;
    description: string;
  }>;
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('calculateClientLifetimeValue: clients is not an array:', clients);
    return {
      averageCLV: 0,
      clvBySegment: {},
      topValueClients: [],
      insights: []
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('calculateClientLifetimeValue: sessions is not an array:', sessions);
    sessions = [];
  }

  const membershipPrices = { basic: 2000, premium: 4000, vip: 8000 };
  
  const clientCLVs = clients.map((client: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id && s.status === 'completed');
    const monthlyPrice = membershipPrices[client.membershipType as keyof typeof membershipPrices] || 0;
    
    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–µ—Å—è—Ü–∞—Ö
    const joinDate = new Date(client.createdAt);
    const now = new Date();
    const lifetimeMonths = Math.max(1, Math.ceil((now.getTime() - joinDate.getTime()) / (1000 * 60 * 60 * 24 * 30)));
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç CLV: –º–µ—Å—è—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å * –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ * –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const activityCoefficient = client.status === 'active' ? 1 : 
                               client.status === 'trial' ? 0.3 : 0.1;
    const clv = monthlyPrice * lifetimeMonths * activityCoefficient;

    return {
      clientId: client.id,
      clientName: client.name,
      clv,
      totalSessions: clientSessions.length,
      membershipType: client.membershipType,
      lifetimeMonths
    };
  });

  // –°—Ä–µ–¥–Ω–∏–π CLV
  const averageCLV = clientCLVs.length > 0 
    ? Math.round(clientCLVs.reduce((sum: number, c) => sum + c.clv, 0) / clientCLVs.length)
    : 0;

  // CLV –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
  const clvBySegment: Record<string, number> = {};
  ['basic', 'premium', 'vip'].forEach(membershipType => {
    const segmentCLVs = clientCLVs.filter(c => c.membershipType === membershipType);
    clvBySegment[membershipType] = segmentCLVs.length > 0
      ? Math.round(segmentCLVs.reduce((sum: number, c) => sum + c.clv, 0) / segmentCLVs.length)
      : 0;
  });

  // –î–æ–±–∞–≤–ª—è–µ–º CLV –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  ['active', 'trial', 'inactive', 'suspended'].forEach(status => {
    const statusClients = clients.filter((c: ExtendedClient) => c.status === status);
    const statusCLVs = clientCLVs.filter(c => statusClients.some((sc: ExtendedClient) => sc.id === c.clientId));
    clvBySegment[status] = statusCLVs.length > 0
      ? Math.round(statusCLVs.reduce((sum: number, c) => sum + c.clv, 0) / statusCLVs.length)
      : 0;
  });

  // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã –ø–æ CLV
  const topValueClients = clientCLVs
    .sort((a, b) => b.clv - a.clv)
    .slice(0, 10);

  // –ò–Ω—Å–∞–π—Ç—ã
  const insights: Array<{
    type: 'success' | 'info' | 'warning';
    title: string;
    description: string;
  }> = [];

  if (clvBySegment.vip > clvBySegment.premium * 1.5) {
    insights.push({
      type: 'success',
      title: 'VIP —Å–µ–≥–º–µ–Ω—Ç –≤—ã—Å–æ–∫–æ—Ü–µ–Ω–µ–Ω',
            description: `VIP –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏–Ω–æ—Å—è—Ç –≤ ${Math.round(clvBySegment.vip / clvBySegment.basic)} —Ä–∞–∑ –±–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–∞ —á–µ–º –±–∞–∑–æ–≤—ã–µ`
    });
  }

  if (averageCLV > 50000) {
    insights.push({
      type: 'success',
      title: '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: `–°—Ä–µ–¥–Ω–∏–π CLV —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${averageCLV.toLocaleString('ru-RU')} ‚ÇΩ`
    });
  }

  const highValueClients = clientCLVs.filter(c => c.clv > averageCLV * 2).length;
  if (highValueClients > 0) {
    insights.push({
      type: 'info',
      title: '–í—ã—Å–æ–∫–æ—Ü–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      description: `${highValueClients} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç CLV –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤ 2+ —Ä–∞–∑–∞`
    });
  }

  if (clvBySegment.trial > 0) {
    insights.push({
      type: 'info',
      title: '–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: `–°—Ä–µ–¥–Ω–∏–π CLV –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clvBySegment.trial.toLocaleString('ru-RU')} ‚ÇΩ`
    });
  }

  if (clvBySegment.active / clvBySegment.inactive > 5) {
    insights.push({
      type: 'warning',
      title: '–ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–Ω–æ—Å—Ç–∏',
      description: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω–Ω–µ–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö - –≤–∞–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É–¥–µ—Ä–∂–∞–Ω–∏–µ–º'
    });
  }

  return {
    averageCLV,
    clvBySegment,
    topValueClients,
    insights
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
export function analyzeClientSatisfaction(clients: ExtendedClient[], sessions: Session[]): {
  satisfactionMetrics: {
    averageRating: number;
    ratingDistribution: Record<string, number>;
    npsScore: number;
    satisfactionByMembership: Record<string, number>;
    satisfactionByStatus: Record<string, number>;
  };
  feedbackAnalysis: {
    positiveIndicators: string[];
    negativeIndicators: string[];
    improvementAreas: string[];
  };
  recommendations: Array<{
    priority: 'high' | 'medium' | 'low';
    action: string;
    expectedImpact: string;
  }>;
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('analyzeClientSatisfaction: clients is not an array:', clients);
    return {
      satisfactionMetrics: {
        averageRating: 0,
        ratingDistribution: {},
        npsScore: 0,
        satisfactionByMembership: {},
        satisfactionByStatus: {}
      },
      feedbackAnalysis: {
        positiveIndicators: [],
        negativeIndicators: [],
        improvementAreas: []
      },
      recommendations: []
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('analyzeClientSatisfaction: sessions is not an array:', sessions);
    sessions = [];
  }

  // –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤)
  const clientRatings = clients.map((client: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id && s.status === 'completed');
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
    let baseRating = 3.5;
    
    if (client.membershipType === 'vip') baseRating += 0.8;
    else if (client.membershipType === 'premium') baseRating += 0.4;
    
    if (clientSessions.length > 10) baseRating += 0.3;
    if (client.status === 'active') baseRating += 0.2;
    else if (client.status === 'trial') baseRating += 0.1;
    else if (client.status === 'inactive') baseRating -= 0.5;
    else if (client.status === 'suspended') baseRating -= 1.0;
    
    const rating = Math.min(5, Math.max(1, baseRating + (Math.random() - 0.5) * 0.8));
    
    return {
      clientId: client.id,
      rating: Math.round(rating * 10) / 10,
      membershipType: client.membershipType,
      status: client.status
    };
  });

  // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
  const averageRating = clientRatings.length > 0
    ? Math.round(clientRatings.reduce((sum: number, r) => sum + r.rating, 0) / clientRatings.length * 10) / 10
    : 0;

  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
  const ratingDistribution: Record<string, number> = {
    '5': clientRatings.filter(r => r.rating >= 4.5).length,
    '4': clientRatings.filter(r => r.rating >= 3.5 && r.rating < 4.5).length,
    '3': clientRatings.filter(r => r.rating >= 2.5 && r.rating < 3.5).length,
    '2': clientRatings.filter(r => r.rating >= 1.5 && r.rating < 2.5).length,
    '1': clientRatings.filter(r => r.rating < 1.5).length
  };

  // NPS Score (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
  const promoters = clientRatings.filter(r => r.rating >= 4.5).length;
  const detractors = clientRatings.filter(r => r.rating <= 3).length;
  const npsScore = clientRatings.length > 0 
    ? Math.round(((promoters - detractors) / clientRatings.length) * 100)
    : 0;

  // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º —á–ª–µ–Ω—Å—Ç–≤–∞
  const satisfactionByMembership: Record<string, number> = {};
  ['basic', 'premium', 'vip'].forEach(membershipType => {
    const membershipRatings = clientRatings.filter(r => r.membershipType === membershipType);
    satisfactionByMembership[membershipType] = membershipRatings.length > 0
      ? Math.round(membershipRatings.reduce((sum: number, r) => sum + r.rating, 0) / membershipRatings.length * 10) / 10
      : 0;
  });

  // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const satisfactionByStatus: Record<string, number> = {};
  ['active', 'trial', 'inactive', 'suspended'].forEach(status => {
    const statusRatings = clientRatings.filter(r => r.status === status);
    satisfactionByStatus[status] = statusRatings.length > 0
      ? Math.round(statusRatings.reduce((sum: number, r) => sum + r.rating, 0) / statusRatings.length * 10) / 10
      : 0;
  });

  // –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
  const positiveIndicators: string[] = [];
  const negativeIndicators: string[] = [];
  const improvementAreas: string[] = [];

  if (averageRating >= 4.0) {
    positiveIndicators.push('–í—ã—Å–æ–∫–∏–π –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏');
  }
  if (satisfactionByMembership.vip >= 4.5) {
    positiveIndicators.push('–û—Ç–ª–∏—á–Ω–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å VIP –∫–ª–∏–µ–Ω—Ç–æ–≤');
  }
  if (npsScore > 50) {
    positiveIndicators.push('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π NPS –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å');
  }
  if (satisfactionByStatus.active >= 4.0) {
    positiveIndicators.push('–í—ã—Å–æ–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
  }

  if (averageRating < 3.5) {
    negativeIndicators.push('–ù–∏–∑–∫–∏–π –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏');
    improvementAreas.push('–ö–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞');
  }
  if (satisfactionByMembership.basic < 3.5) {
    negativeIndicators.push('–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
    improvementAreas.push('–¶–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞');
  }
  if (npsScore < 0) {
    negativeIndicators.push('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π NPS');
    improvementAreas.push('–û–±—â–∏–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –æ–ø—ã—Ç');
  }
  if (satisfactionByStatus.trial < 3.8) {
    negativeIndicators.push('–ù–∏–∑–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
    improvementAreas.push('–ü—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
  }
  if (satisfactionByStatus.inactive < 2.5) {
    negativeIndicators.push('–û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
    improvementAreas.push('–ü—Ä–æ–≥—Ä–∞–º–º—ã —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏');
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations: Array<{
    priority: 'high' | 'medium' | 'low';
    action: string;
    expectedImpact: string;
  }> = [];

  if (averageRating < 4.0) {
    recommendations.push({
      priority: 'high',
      action: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏',
      expectedImpact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–∞ 0.3-0.5 –±–∞–ª–ª–æ–≤'
    });
  }

  if (satisfactionByMembership.basic < satisfactionByMembership.premium) {
    recommendations.push({
      priority: 'medium',
      action: '–£–ª—É—á—à–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞',
      expectedImpact: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 15-20%'
    });
  }

  if (npsScore < 30) {
    recommendations.push({
      priority: 'high',
      action: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —É–ª—É—á—à–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞',
      expectedImpact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ NPS –Ω–∞ 20-30 –ø—É–Ω–∫—Ç–æ–≤'
    });
  }

  if (satisfactionByStatus.trial < 4.0) {
    recommendations.push({
      priority: 'high',
      action: '–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      expectedImpact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 25-30%'
    });
  }

  if (satisfactionByStatus.inactive < 3.0) {
    recommendations.push({
      priority: 'medium',
      action: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      expectedImpact: '–†–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è 15-20% –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'
    });
  }

  recommendations.push({
    priority: 'low',
    action: '–í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏',
    expectedImpact: '–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∏ —Ç—Ä–µ–Ω–¥–æ–≤'
  });

  return {
    satisfactionMetrics: {
      averageRating,
      ratingDistribution,
      npsScore,
      satisfactionByMembership,
      satisfactionByStatus
    },
    feedbackAnalysis: {
      positiveIndicators,
      negativeIndicators,
      improvementAreas
    },
    recommendations
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
export function analyzeClientBehaviorPatterns(clients: ExtendedClient[], sessions: Session[]): {
  patterns: Array<{
    pattern: string;
    description: string;
    clientCount: number;
    percentage: number;
    impact: 'positive' | 'negative' | 'neutral';
  }>;
  recommendations: Array<{
    pattern: string;
    action: string;
    priority: 'high' | 'medium' | 'low';
    expectedOutcome: string;
  }>;
  insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
  }>;
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('analyzeClientBehaviorPatterns: clients is not an array:', clients);
    return { patterns: [], recommendations: [], insights: [] };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('analyzeClientBehaviorPatterns: sessions is not an array:', sessions);
    sessions = [];
  }

  const patterns: Array<{
    pattern: string;
    description: string;
    clientCount: number;
    percentage: number;
    impact: 'positive' | 'negative' | 'neutral';
  }> = [];

  const recommendations: Array<{
    pattern: string;
    action: string;
    priority: 'high' | 'medium' | 'low';
    expectedOutcome: string;
  }> = [];

  const insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
  }> = [];

  // –ü–∞—Ç—Ç–µ—Ä–Ω 1: –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
  const regularClients = clients.filter((client: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id && s.status === 'completed');
    const weeksActive = Math.ceil(clientSessions.length / 2); // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 2 —Å–µ—Å—Å–∏–∏ –≤ –Ω–µ–¥–µ–ª—é –∫–∞–∫ –Ω–æ—Ä–º—É
    return weeksActive >= 4 && client.status === 'active';
  });

  patterns.push({
    pattern: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
    description: '–ö–ª–∏–µ–Ω—Ç—ã —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
    clientCount: regularClients.length,
    percentage: clients.length > 0 ? Math.round((regularClients.length / clients.length) * 100) : 0,
    impact: 'positive'
  });

  // –ü–∞—Ç—Ç–µ—Ä–Ω 2: –ö–ª–∏–µ–Ω—Ç—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è
  const weekendClients = clients.filter((client: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id);
    const weekendSessions = clientSessions.filter((s: Session) => {
      const sessionDate = new Date(s.date);
      const dayOfWeek = sessionDate.getDay();
      return dayOfWeek === 0 || dayOfWeek === 6; // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞
    });
    return weekendSessions.length > clientSessions.length * 0.7;
  });

    patterns.push({
    pattern: '–ö–ª–∏–µ–Ω—Ç—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
    description: '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏',
    clientCount: weekendClients.length,
    percentage: clients.length > 0 ? Math.round((weekendClients.length / clients.length) * 100) : 0,
    impact: 'neutral'
  });

  // –ü–∞—Ç—Ç–µ—Ä–Ω 3: –ù–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
  const inconsistentClients = clients.filter((client: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id);
    const cancelledSessions = clientSessions.filter((s: Session) => s.status === 'cancelled');
    const cancellationRate = clientSessions.length > 0 ? (cancelledSessions.length / clientSessions.length) : 0;
    return cancellationRate > 0.3; // –±–æ–ª–µ–µ 30% –æ—Ç–º–µ–Ω
  });

  patterns.push({
    pattern: '–ù–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
    description: '–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω –∏ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ',
    clientCount: inconsistentClients.length,
    percentage: clients.length > 0 ? Math.round((inconsistentClients.length / clients.length) * 100) : 0,
    impact: 'negative'
  });

  // –ü–∞—Ç—Ç–µ—Ä–Ω 4: –ù–æ–≤–∏—á–∫–∏ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
  const adaptingNewbies = clients.filter((client: ExtendedClient) => {
    const joinDate = new Date(client.createdAt);
    const daysSinceJoin = (Date.now() - joinDate.getTime()) / (1000 * 60 * 60 * 24);
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id);
    return daysSinceJoin <= 30 && clientSessions.length >= 1 && clientSessions.length <= 8;
  });

  patterns.push({
    pattern: '–ù–æ–≤–∏—á–∫–∏ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏',
    description: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≤—ã–∫–∞–Ω–∏—è –∫ —Ä–µ–∂–∏–º—É',
    clientCount: adaptingNewbies.length,
    percentage: clients.length > 0 ? Math.round((adaptingNewbies.length / clients.length) * 100) : 0,
    impact: 'neutral'
  });

  // –ü–∞—Ç—Ç–µ—Ä–Ω 5: VIP —ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã
  const vipEnthusiasts = clients.filter((client: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id && s.status === 'completed');
    return client.membershipType === 'vip' && clientSessions.length > 15;
  });

  patterns.push({
    pattern: 'VIP —ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã',
    description: 'VIP –∫–ª–∏–µ–Ω—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é',
    clientCount: vipEnthusiasts.length,
    percentage: clients.length > 0 ? Math.round((vipEnthusiasts.length / clients.length) * 100) : 0,
    impact: 'positive'
  });

  // –ü–∞—Ç—Ç–µ—Ä–Ω 6: –ü—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
  const trialClients = clients.filter((client: ExtendedClient) => client.status === 'trial');

  patterns.push({
    pattern: '–ü—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
    description: '–ö–ª–∏–µ–Ω—Ç—ã –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ',
    clientCount: trialClients.length,
    percentage: clients.length > 0 ? Math.round((trialClients.length / clients.length) * 100) : 0,
    impact: 'neutral'
  });

  // –ü–∞—Ç—Ç–µ—Ä–Ω 7: –ö–ª–∏–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã —Ä–∏—Å–∫–∞
  const riskClients = clients.filter((client: ExtendedClient) => {
    const clientSessions = sessions.filter((s: Session) => s.clientId === client.id);
    const recentSessions = clientSessions.filter((s: Session) => {
      const sessionDate = new Date(`${s.date}T${s.startTime}`);
      const twoWeeksAgo = new Date();
      twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
      return sessionDate >= twoWeeksAgo;
    });
    return recentSessions.length === 0 && (client.status === 'active' || client.status === 'trial');
  });

  patterns.push({
    pattern: '–ö–ª–∏–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã —Ä–∏—Å–∫–∞',
    description: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 2 –Ω–µ–¥–µ–ª—å',
    clientCount: riskClients.length,
    percentage: clients.length > 0 ? Math.round((riskClients.length / clients.length) * 100) : 0,
    impact: 'negative'
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  if (regularClients.length > 0) {
    recommendations.push({
      pattern: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      action: '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      priority: 'medium',
      expectedOutcome: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞ 15-20%'
    });
  }

  if (inconsistentClients.length > clients.length * 0.2) {
    recommendations.push({
      pattern: '–ù–µ–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      action: '–í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≥–∏–±–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–Ω—è—Ç–∏–π',
      priority: 'high',
      expectedOutcome: '–°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω –Ω–∞ 25-30%'
    });
  }

  if (weekendClients.length > 0) {
    recommendations.push({
      pattern: '–ö–ª–∏–µ–Ω—Ç—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
      action: '–†–∞—Å—à–∏—Ä–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ',
      priority: 'medium',
      expectedOutcome: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –Ω–∞ 20%'
    });
  }

  if (adaptingNewbies.length > 0) {
    recommendations.push({
      pattern: '–ù–æ–≤–∏—á–∫–∏ –≤ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏',
      action: '–°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      priority: 'medium',
      expectedOutcome: '–£–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–æ–≤–∏—á–∫–æ–≤ –Ω–∞ 30%'
    });
  }

  if (vipEnthusiasts.length > 0) {
    recommendations.push({
      pattern: 'VIP —ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã',
      action: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
      priority: 'low',
      expectedOutcome: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ VIP –∫–ª–∏–µ–Ω—Ç–æ–≤'
    });
  }

  if (trialClients.length > 0) {
    recommendations.push({
      pattern: '–ü—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      action: '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
      priority: 'high',
      expectedOutcome: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 40-50%'
    });
  }

  if (riskClients.length > 0) {
    recommendations.push({
      pattern: '–ö–ª–∏–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã —Ä–∏—Å–∫–∞',
      action: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —É–¥–µ—Ä–∂–∞–Ω–∏—è',
      priority: 'high',
      expectedOutcome: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ 60-70% –∫–ª–∏–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã —Ä–∏—Å–∫–∞'
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
  if (regularClients.length > clients.length * 0.4) {
    insights.push({
      type: 'success',
      title: '–í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: `${Math.round((regularClients.length / clients.length) * 100)}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`
    });
  }

  if (inconsistentClients.length > clients.length * 0.3) {
    insights.push({
      type: 'warning',
      title: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ–º',
      description: `${Math.round((inconsistentClients.length / clients.length) * 100)}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–º–µ—é—Ç –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ`
    });
  }

  if (vipEnthusiasts.length > 0) {
    insights.push({
      type: 'info',
      title: '–ê–∫—Ç–∏–≤–Ω—ã–µ VIP –∫–ª–∏–µ–Ω—Ç—ã',
      description: `${vipEnthusiasts.length} VIP –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—ã—Å–æ–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`
    });
  }

  if (trialClients.length > clients.length * 0.15) {
    insights.push({
      type: 'info',
      title: '–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–ª—è –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      description: `${Math.round((trialClients.length / clients.length) * 100)}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ`
    });
  }

  if (riskClients.length > clients.length * 0.2) {
    insights.push({
      type: 'warning',
      title: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç—Ç–æ–∫–∞',
      description: `${Math.round((riskClients.length / clients.length) * 100)}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≥—Ä—É–ø–ø–µ —Ä–∏—Å–∫–∞`
    });
  }

  if (weekendClients.length > clients.length * 0.25) {
    insights.push({
      type: 'info',
      title: '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω—ã—Ö',
      description: `${Math.round((weekendClients.length / clients.length) * 100)}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é—Ç –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏`
    });
  }

  return {
    patterns,
    recommendations,
    insights
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã
export function predictClientGrowth(clients: ExtendedClient[], sessions: Session[]): {
  growthForecast: {
    nextMonth: {
      expectedNewClients: number;
      expectedChurn: number;
      netGrowth: number;
      confidenceLevel: number;
    };
    nextQuarter: {
      expectedNewClients: number;
      expectedChurn: number;
      netGrowth: number;
      confidenceLevel: number;
    };
  };
  growthFactors: Array<{
    factor: string;
    impact: 'positive' | 'negative' | 'neutral';
    weight: number;
    description: string;
  }>;
  recommendations: Array<{
    action: string;
    expectedImpact: string;
    priority: 'high' | 'medium' | 'low';
  }>;
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('predictClientGrowth: clients is not an array:', clients);
    return {
      growthForecast: {
        nextMonth: { expectedNewClients: 0, expectedChurn: 0, netGrowth: 0, confidenceLevel: 0 },
        nextQuarter: { expectedNewClients: 0, expectedChurn: 0, netGrowth: 0, confidenceLevel: 0 }
      },
      growthFactors: [],
      recommendations: []
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('predictClientGrowth: sessions is not an array:', sessions);
    sessions = [];
  }

  const now = new Date();
  
  // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  const last30Days = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
  const last90Days = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);
  
  const newClientsLast30Days = clients.filter((c: ExtendedClient) => new Date(c.createdAt) >= last30Days).length;
  const newClientsLast90Days = clients.filter((c: ExtendedClient) => new Date(c.createdAt) >= last90Days).length;
  
  const churnedClientsLast30Days = clients.filter((c: ExtendedClient) => 
    (c.status === 'inactive' || c.status === 'suspended') &&
    new Date(c.createdAt) >= last30Days
  ).length;

  // –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤
  const monthlyGrowthRate = newClientsLast30Days;
  const quarterlyGrowthRate = newClientsLast90Days / 3; // —Å—Ä–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π —Ä–æ—Å—Ç –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª
  const churnRate = clients.length > 0 ? (churnedClientsLast30Days / clients.length) * 100 : 0;

  // –§–∞–∫—Ç–æ—Ä—ã —Ä–æ—Å—Ç–∞
  const growthFactors: Array<{
    factor: string;
    impact: 'positive' | 'negative' | 'neutral';
    weight: number;
    description: string;
  }> = [];

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const activeClientRatio = clients.filter((c: ExtendedClient) => c.status === 'active').length / clients.length;
  if (activeClientRatio > 0.8) {
    growthFactors.push({
      factor: '–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤',
      impact: 'positive',
      weight: 0.3,
      description: '–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã, —á—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º'
    });
  } else if (activeClientRatio < 0.6) {
    growthFactors.push({
      factor: '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤',
      impact: 'negative',
      weight: 0.25,
      description: '–ù–∏–∑–∫–∞—è –¥–æ–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—é'
    });
  }

  // –ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)
  const satisfactionScore = 4.2; // —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
  if (satisfactionScore > 4.0) {
    growthFactors.push({
      factor: '–í—ã—Å–æ–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      impact: 'positive',
      weight: 0.25,
      description: '–í—ã—Å–æ–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É—é—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º'
    });
  } else if (satisfactionScore < 3.5) {
    growthFactors.push({
      factor: '–ù–∏–∑–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
      impact: 'negative',
      weight: 0.3,
      description: '–ù–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏ –º–æ–≥—É—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–æ–∫–∞
  if (churnRate > 15) {
    growthFactors.push({
      factor: '–í—ã—Å–æ–∫–∏–π –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      impact: 'negative',
      weight: 0.2,
      description: '–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ç–æ–∫–∞ —Å–Ω–∏–∂–∞–µ—Ç –æ–±—â–∏–π —Ä–æ—Å—Ç'
    });
  } else if (churnRate < 5) {
    growthFactors.push({
      factor: '–ù–∏–∑–∫–∏–π –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      impact: 'positive',
      weight: 0.15,
            description: '–ù–∏–∑–∫–∏–π –æ—Ç—Ç–æ–∫ —Å–ø–æ—Å–æ–±—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É'
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç–∞
  const premiumRatio = clients.filter((c: ExtendedClient) => c.membershipType === 'premium' || c.membershipType === 'vip').length / clients.length;
  if (premiumRatio > 0.3) {
    growthFactors.push({
      factor: '–°–∏–ª—å–Ω—ã–π –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç',
      impact: 'positive',
      weight: 0.15,
      description: '–í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥'
    });
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const trialRatio = clients.filter((c: ExtendedClient) => c.status === 'trial').length / clients.length;
  if (trialRatio > 0.1) {
    growthFactors.push({
      factor: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
      impact: 'positive',
      weight: 0.1,
      description: '–ú–Ω–æ–≥–æ –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏'
    });
  }

  // –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
  const currentMonth = now.getMonth();
  const seasonalFactor = [0.8, 0.9, 1.1, 1.2, 1.3, 1.1, 0.9, 0.8, 1.0, 1.1, 1.0, 0.7][currentMonth];
  
  growthFactors.push({
    factor: '–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä',
    impact: seasonalFactor > 1.0 ? 'positive' : 'negative',
    weight: 0.1,
    description: `–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ${seasonalFactor > 1.0 ? '–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω' : '–º–µ–Ω–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω'} –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤`
  });

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
  const baseGrowthRate = (monthlyGrowthRate + quarterlyGrowthRate) / 2;
  const growthMultiplier = growthFactors.reduce((acc: number, factor) => {
    const impact = factor.impact === 'positive' ? 1 + factor.weight : 
                   factor.impact === 'negative' ? 1 - factor.weight : 1;
    return acc * impact;
  }, 1);

  const adjustedGrowthRate = baseGrowthRate * growthMultiplier * seasonalFactor;
  const expectedChurnRate = Math.max(0, churnRate / 100);

  // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü
  const nextMonthNewClients = Math.round(Math.max(0, adjustedGrowthRate));
  const nextMonthChurn = Math.round(clients.length * expectedChurnRate);
  const nextMonthNetGrowth = nextMonthNewClients - nextMonthChurn;

  // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫–≤–∞—Ä—Ç–∞–ª
  const nextQuarterNewClients = Math.round(Math.max(0, adjustedGrowthRate * 3));
  const nextQuarterChurn = Math.round(clients.length * expectedChurnRate * 3);
  const nextQuarterNetGrowth = nextQuarterNewClients - nextQuarterChurn;

  // –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
  const dataQuality = Math.min(1, clients.length / 100); // –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö = –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  const trendStability = Math.min(1, Math.abs(monthlyGrowthRate - quarterlyGrowthRate) < 5 ? 1 : 0.7);
  const confidenceLevel = Math.round((dataQuality * trendStability) * 100);

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations: Array<{
    action: string;
    expectedImpact: string;
    priority: 'high' | 'medium' | 'low';
  }> = [];

  if (churnRate > 15) {
    recommendations.push({
      action: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
      expectedImpact: '–°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –Ω–∞ 20-30%',
      priority: 'high'
    });
  }

  if (nextMonthNetGrowth < 0) {
    recommendations.push({
      action: '–£—Å–∏–ª–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      expectedImpact: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏—Ç–æ–∫–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 40-50%',
      priority: 'high'
    });
  }

  if (premiumRatio < 0.2) {
    recommendations.push({
      action: '–†–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
      expectedImpact: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞ –Ω–∞ 25-35%',
      priority: 'medium'
    });
  }

  if (activeClientRatio < 0.7) {
    recommendations.push({
      action: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      expectedImpact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ 15-20%',
      priority: 'medium'
    });
  }

  if (trialRatio > 0.1) {
    recommendations.push({
      action: '–£—Å–∏–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      expectedImpact: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 25-30%',
      priority: 'high'
    });
  }

  recommendations.push({
    action: '–í–Ω–µ–¥—Ä–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É',
    expectedImpact: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏—Ç–æ–∫ 10-15% –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
    priority: 'low'
  });

  return {
    growthForecast: {
      nextMonth: {
        expectedNewClients: nextMonthNewClients,
        expectedChurn: nextMonthChurn,
        netGrowth: nextMonthNetGrowth,
        confidenceLevel
      },
      nextQuarter: {
        expectedNewClients: nextQuarterNewClients,
        expectedChurn: nextQuarterChurn,
        netGrowth: nextQuarterNetGrowth,
        confidenceLevel: Math.max(50, confidenceLevel - 10) // –º–µ–Ω—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      }
    },
    growthFactors,
    recommendations
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è)
export function analyzeMarketingChannels(clients: ExtendedClient[]): {
  channels: Array<{
    channel: string;
    clientCount: number;
    percentage: number;
    conversionRate: number;
    averageCLV: number;
    cost: number;
    roi: number;
  }>;
  insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
  }>;
  recommendations: Array<{
    channel: string;
    action: string;
    expectedOutcome: string;
    priority: 'high' | 'medium' | 'low';
  }>;
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('analyzeMarketingChannels: clients is not an array:', clients);
    return { channels: [], insights: [], recommendations: [] };
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const channelData = [
    { name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏', share: 0.35, conversion: 0.12, cost: 15000, clvMultiplier: 1.0 },
    { name: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', share: 0.25, conversion: 0.35, cost: 5000, clvMultiplier: 1.4 },
    { name: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞', share: 0.20, conversion: 0.08, cost: 25000, clvMultiplier: 0.9 },
    { name: '–û—Ñ–ª–∞–π–Ω —Ä–µ–∫–ª–∞–º–∞', share: 0.10, conversion: 0.05, cost: 30000, clvMultiplier: 0.8 },
    { name: '–ü—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è', share: 0.10, conversion: 0.45, cost: 2000, clvMultiplier: 1.2 }
  ];

  const baseCLV = 25000; // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
  const totalClients = clients.length;

  const channels = channelData.map(channel => {
    const clientCount = Math.round(totalClients * channel.share);
    const percentage = Math.round(channel.share * 100);
    const averageCLV = Math.round(baseCLV * channel.clvMultiplier);
    const revenue = clientCount * averageCLV;
    const roi = channel.cost > 0 ? Math.round((revenue / channel.cost) * 100) / 100 : 0;

    return {
      channel: channel.name,
      clientCount,
      percentage,
      conversionRate: Math.round(channel.conversion * 100),
      averageCLV,
      cost: channel.cost,
      roi
    };
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
  const insights: Array<{
    type: 'success' | 'warning' | 'info';
    title: string;
    description: string;
  }> = [];

  const bestROI = channels.reduce((prev, current) => current.roi > prev.roi ? current : prev);
  const worstROI = channels.reduce((prev, current) => current.roi < prev.roi ? current : prev);

  insights.push({
    type: 'success',
    title: '–õ—É—á—à–∏–π –∫–∞–Ω–∞–ª –ø–æ ROI',
    description: `${bestROI.channel} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ROI ${bestROI.roi}x`
  });

  if (worstROI.roi < 1) {
    insights.push({
      type: 'warning',
      title: '–£–±—ã—Ç–æ—á–Ω—ã–π –∫–∞–Ω–∞–ª',
      description: `${worstROI.channel} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ROI (${worstROI.roi}x)`
    });
  }

  const referralChannel = channels.find(c => c.channel === '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
  if (referralChannel && referralChannel.percentage > 20) {
    insights.push({
      type: 'success',
      title: '–°–∏–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞',
      description: `${referralChannel.percentage}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º`
    });
  }

  const socialChannel = channels.find(c => c.channel === '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏');
  if (socialChannel && socialChannel.percentage > 30) {
    insights.push({
      type: 'info',
      title: '–î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π',
      description: `${socialChannel.percentage}% –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π`
    });
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const recommendations: Array<{
    channel: string;
    action: string;
    expectedOutcome: string;
    priority: 'high' | 'medium' | 'low';
  }> = [];

  if (worstROI.roi < 0.5) {
    recommendations.push({
      channel: worstROI.channel,
      action: '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
      expectedOutcome: '–≠–∫–æ–Ω–æ–º–∏—è –±—é–¥–∂–µ—Ç–∞ –∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤',
      priority: 'high'
    });
  }

  if (bestROI.roi > 2) {
    recommendations.push({
      channel: bestROI.channel,
      action: '–£–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª',
      expectedOutcome: `–†–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 30-50%`,
      priority: 'high'
    });
  }

  if (referralChannel && referralChannel.percentage < 30) {
    recommendations.push({
      channel: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      action: '–£—Å–∏–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É',
      expectedOutcome: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–æ 35-40%',
      priority: 'medium'
    });
  }

  if (socialChannel && socialChannel.conversionRate < 15) {
    recommendations.push({
      channel: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
      action: '–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥',
      expectedOutcome: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–æ 18-20%',
      priority: 'medium'
    });
  }

  const searchChannel = channels.find(c => c.channel === '–ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞');
  if (searchChannel && searchChannel.roi < 1.5) {
    recommendations.push({
      channel: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞',
      action: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–æ—Å–∞–¥–æ—á–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
      expectedOutcome: '–ü–æ–≤—ã—à–µ–Ω–∏–µ ROI –¥–æ 2.0x',
      priority: 'medium'
    });
  }

  recommendations.push({
    channel: '–û–±—â–µ–µ',
    action: '–í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤',
    expectedOutcome: '–ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤',
    priority: 'low'
  });

  return {
    channels,
    insights,
    recommendations
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–∫–æ—Ä–∫–∞—Ä–¥–∞
export function createClientScorecard(clients: ExtendedClient[], sessions: Session[]): {
  scorecard: {
    overall: {
      score: number;
      grade: 'A' | 'B' | 'C' | 'D' | 'F';
      trend: 'improving' | 'stable' | 'declining';
    };
    categories: Array<{
      category: string;
      score: number;
      weight: number;
      status: 'excellent' | 'good' | 'average' | 'poor';
      metrics: Array<{
        metric: string;
        value: number;
        target: number;
        performance: number;
      }>;
    }>;
  };
  actionItems: Array<{
    priority: 'critical' | 'high' | 'medium' | 'low';
    action: string;
    category: string;
    expectedImpact: string;
    timeline: string;
  }>;
} {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ clients - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(clients)) {
    console.error('createClientScorecard: clients is not an array:', clients);
    return {
      scorecard: {
        overall: { score: 0, grade: 'F', trend: 'declining' },
        categories: []
      },
      actionItems: []
    };
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessions - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  if (!Array.isArray(sessions)) {
    console.error('createClientScorecard: sessions is not an array:', sessions);
    sessions = [];
  }

  // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const totalClients = clients.length;
  const activeClients = clients.filter((c: ExtendedClient) => c.status === 'active').length;
  const trialClients = clients.filter((c: ExtendedClient) => c.status === 'trial').length;
    const completedSessions = sessions.filter((s: Session) => s.status === 'completed').length;
  const cancelledSessions = sessions.filter((s: Session) => s.status === 'cancelled').length;

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 1: –†–æ—Å—Ç –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ
  const last30Days = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
  const newClients = clients.filter((c: ExtendedClient) => new Date(c.createdAt) >= last30Days).length;
  const growthRate = totalClients > 0 ? (newClients / totalClients) * 100 : 0;
  
  const growthMetrics = [
    { metric: '–†–æ—Å—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã (%)', value: growthRate, target: 10, performance: Math.min(100, (growthRate / 10) * 100) },
    { metric: '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (30 –¥–Ω–µ–π)', value: newClients, target: 20, performance: Math.min(100, (newClients / 20) * 100) },
    { metric: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø—Ä–æ–±–Ω—ã—Ö (%)', value: trialClients.length > 0 ? (activeClients / (activeClients + trialClients)) * 100 : 100, target: 70, performance: Math.min(100, ((trialClients.length > 0 ? (activeClients / (activeClients + trialClients)) * 100 : 100) / 70) * 100) }
  ];
  const growthScore = growthMetrics.reduce((sum: number, m) => sum + m.performance, 0) / growthMetrics.length;

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 2: –£–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
  const retentionRate = totalClients > 0 ? (activeClients / totalClients) * 100 : 0;
  const avgSessionsPerClient = totalClients > 0 ? completedSessions / totalClients : 0;
  const churnRate = totalClients > 0 ? ((clients.filter((c: ExtendedClient) => c.status === 'inactive' || c.status === 'suspended').length) / totalClients) * 100 : 0;
  
  const retentionMetrics = [
    { metric: '–£—Ä–æ–≤–µ–Ω—å —É–¥–µ—Ä–∂–∞–Ω–∏—è (%)', value: retentionRate, target: 85, performance: Math.min(100, (retentionRate / 85) * 100) },
    { metric: '–°–µ—Å—Å–∏–π –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞', value: avgSessionsPerClient, target: 8, performance: Math.min(100, (avgSessionsPerClient / 8) * 100) },
    { metric: '–£—Ä–æ–≤–µ–Ω—å –æ—Ç—Ç–æ–∫–∞ (%)', value: churnRate, target: 10, performance: Math.max(0, 100 - (churnRate / 10) * 100) }
  ];
  const retentionScore = retentionMetrics.reduce((sum: number, m) => sum + m.performance, 0) / retentionMetrics.length;

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 3: –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  const totalSessions = completedSessions + cancelledSessions;
  const completionRate = totalSessions > 0 ? (completedSessions / totalSessions) * 100 : 0;
  const utilizationRate = 75; // —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  const responseTime = 24; // —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Å–∞—Ö
  
  const operationalMetrics = [
    { metric: '–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (%)', value: completionRate, target: 90, performance: Math.min(100, (completionRate / 90) * 100) },
    { metric: '–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ª–æ–≤ (%)', value: utilizationRate, target: 80, performance: Math.min(100, (utilizationRate / 80) * 100) },
    { metric: '–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—á–∞—Å—ã)', value: responseTime, target: 12, performance: Math.max(0, 100 - ((responseTime - 12) / 12) * 100) }
  ];
  const operationalScore = operationalMetrics.reduce((sum: number, m) => sum + m.performance, 0) / operationalMetrics.length;

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è 4: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  const membershipPrices = { basic: 2000, premium: 4000, vip: 8000 };
  const monthlyRevenue = activeClients * 3000; // —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
  const revenuePerClient = activeClients > 0 ? monthlyRevenue / activeClients : 0;
  const premiumRatio = totalClients > 0 ? (clients.filter((c: ExtendedClient) => c.membershipType === 'premium' || c.membershipType === 'vip').length / totalClients) * 100 : 0;
  
  const financialMetrics = [
    { metric: '–î–æ—Ö–æ–¥ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (‚ÇΩ)', value: revenuePerClient, target: 3500, performance: Math.min(100, (revenuePerClient / 3500) * 100) },
    { metric: '–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (—Ç—ã—Å. ‚ÇΩ)', value: monthlyRevenue / 1000, target: 500, performance: Math.min(100, (monthlyRevenue / 500000) * 100) },
    { metric: '–î–æ–ª—è –ø—Ä–µ–º–∏—É–º (%)', value: premiumRatio, target: 40, performance: Math.min(100, (premiumRatio / 40) * 100) }
  ];
  const financialScore = financialMetrics.reduce((sum: number, m) => sum + m.performance, 0) / financialMetrics.length;

  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categories = [
    {
      category: '–†–æ—Å—Ç –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ',
      score: Math.round(growthScore),
      weight: 0.25,
      status: growthScore >= 80 ? 'excellent' as const : growthScore >= 60 ? 'good' as const : growthScore >= 40 ? 'average' as const : 'poor' as const,
      metrics: growthMetrics
    },
    {
      category: '–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å',
      score: Math.round(retentionScore),
      weight: 0.30,
      status: retentionScore >= 80 ? 'excellent' as const : retentionScore >= 60 ? 'good' as const : retentionScore >= 40 ? 'average' as const : 'poor' as const,
      metrics: retentionMetrics
    },
    {
      category: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      score: Math.round(operationalScore),
      weight: 0.25,
      status: operationalScore >= 80 ? 'excellent' as const : operationalScore >= 60 ? 'good' as const : operationalScore >= 40 ? 'average' as const : 'poor' as const,
      metrics: operationalMetrics
    },
    {
      category: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
      score: Math.round(financialScore),
      weight: 0.20,
      status: financialScore >= 80 ? 'excellent' as const : financialScore >= 60 ? 'good' as const : financialScore >= 40 ? 'average' as const : 'poor' as const,
      metrics: financialMetrics
    }
  ];

  // –û–±—â–∏–π —Å—á–µ—Ç
  const overallScore = Math.round(categories.reduce((sum: number, cat) => sum + (cat.score * cat.weight), 0));
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏
  let grade: 'A' | 'B' | 'C' | 'D' | 'F';
  if (overallScore >= 90) grade = 'A';
  else if (overallScore >= 80) grade = 'B';
  else if (overallScore >= 70) grade = 'C';
  else if (overallScore >= 60) grade = 'D';
  else grade = 'F';

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  const trend: 'improving' | 'stable' | 'declining' = 
    overallScore >= 75 ? 'improving' : 
    overallScore >= 60 ? 'stable' : 'declining';

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π
  const actionItems: Array<{
    priority: 'critical' | 'high' | 'medium' | 'low';
    action: string;
    category: string;
    expectedImpact: string;
    timeline: string;
  }> = [];

  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (score < 40)
  categories.forEach(category => {
    if (category.score < 40) {
      actionItems.push({
        priority: 'critical',
        action: `–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.category}"`,
        category: category.category,
        expectedImpact: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞',
        timeline: '1-2 –Ω–µ–¥–µ–ª–∏'
      });
    }
  });

  // –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (score < 60)
  if (growthScore < 60) {
    actionItems.push({
      priority: 'high',
      action: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      category: '–†–æ—Å—Ç –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ',
      expectedImpact: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏—Ç–æ–∫–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 40-50%',
      timeline: '2-4 –Ω–µ–¥–µ–ª–∏'
    });
  }

  if (retentionScore < 60) {
    actionItems.push({
      priority: 'high',
      action: '–í–Ω–µ–¥—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
      category: '–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å',
      expectedImpact: '–°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –Ω–∞ 25-30%',
      timeline: '3-6 –Ω–µ–¥–µ–ª—å'
    });
  }

  if (operationalScore < 60) {
    actionItems.push({
      priority: 'high',
      action: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å–Ω–∏–∑–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω',
      category: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      expectedImpact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ 20-25%',
      timeline: '2-3 –Ω–µ–¥–µ–ª–∏'
    });
  }

  if (financialScore < 60) {
    actionItems.push({
      priority: 'high',
      action: '–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫',
      category: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
      expectedImpact: '–†–æ—Å—Ç –≤—ã—Ä—É—á–∫–∏ –Ω–∞ 15-20%',
      timeline: '4-6 –Ω–µ–¥–µ–ª—å'
    });
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
  if (trialClients.length > activeClients * 0.3) {
    actionItems.push({
      priority: 'high',
      action: '–£—Å–∏–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π –ø—Ä–æ–±–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
      category: '–†–æ—Å—Ç –∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ',
      expectedImpact: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –Ω–∞ 30-40%',
      timeline: '2-3 –Ω–µ–¥–µ–ª–∏'
    });
  }

  if (churnRate > 15) {
    actionItems.push({
      priority: 'high',
      action: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –æ—Ç—Ç–æ–∫–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —É–¥–µ—Ä–∂–∞–Ω–∏—è',
      category: '–£–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å',
      expectedImpact: '–°–Ω–∏–∂–µ–Ω–∏–µ –æ—Ç—Ç–æ–∫–∞ –Ω–∞ 40-50%',
      timeline: '3-4 –Ω–µ–¥–µ–ª–∏'
    });
  }

  if (completionRate < 85) {
    actionItems.push({
      priority: 'high',
      action: '–£–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–µ—Å—Å–∏—è—Ö',
      category: '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      expectedImpact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ–º–æ—Å—Ç–∏ –¥–æ 90%+',
      timeline: '2-3 –Ω–µ–¥–µ–ª–∏'
    });
  }

  if (premiumRatio < 30) {
    actionItems.push({
      priority: 'medium',
      action: '–†–∞–∑–≤–∏–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∞–ø–≥—Ä–µ–π–¥–∞',
      category: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
      expectedImpact: '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∏ –ø—Ä–µ–º–∏—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ 40%',
      timeline: '1-2 –º–µ—Å—è—Ü–∞'
    });
  }

  // –°—Ä–µ–¥–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (score 60-80)
  categories.forEach(category => {
    if (category.score >= 60 && category.score < 80) {
      actionItems.push({
        priority: 'medium',
        action: `–î–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.category}"`,
        category: category.category,
        expectedImpact: '–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
        timeline: '1-2 –º–µ—Å—è—Ü–∞'
      });
    }
  });

  // –ù–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π)
  categories.forEach(category => {
    if (category.score >= 80) {
      actionItems.push({
        priority: 'low',
        action: `–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${category.category}"`,
        category: category.category,
        expectedImpact: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞',
        timeline: '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'
      });
    }
  });

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (overallScore < 70) {
    actionItems.push({
      priority: 'high',
      action: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –≤—Å–µ—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
      category: '–û–±—â–µ–µ',
      expectedImpact: '–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
      timeline: '2-3 –Ω–µ–¥–µ–ª–∏'
    });
  }

  actionItems.push({
    priority: 'medium',
    action: '–í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ KPI',
    category: '–û–±—â–µ–µ',
    expectedImpact: '–°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º',
    timeline: '1 –º–µ—Å—è—Ü'
  });

  return {
    scorecard: {
      overall: {
        score: overallScore,
        grade,
        trend
      },
      categories
    },
    actionItems: actionItems.sort((a, b) => {
      const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };
      return priorityOrder[a.priority] - priorityOrder[b.priority];
    })
  };
}

