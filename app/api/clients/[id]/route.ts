// app/api/clients/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockClients, mockTrainers, mockSessions, Client, Session } from '@/lib/mock-data';

// GET /api/clients/[id] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
export const GET = withPermissions(
  { resource: 'clients', action: 'read' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;

      console.log(`üë§ API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ${id}`);

      const client = mockClients.find((c: Client) => c.id === id);
      if (!client) {
        return NextResponse.json(
          { success: false, error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      if (user.role === 'trainer' && client.trainerId !== user.id) {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' },
          { status: 403 }
        );
      }

      if (user.role === 'client' && client.id !== user.id) {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É' },
          { status: 403 }
        );
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const trainer = mockTrainers.find(t => t.id === client.trainerId);
      const clientSessions = mockSessions.filter((s: Session) => s.clientId === client.id);
      const completedSessions = clientSessions.filter((s: Session) => s.status === 'completed');
      const upcomingSessions = clientSessions.filter((s: Session) => 
        s.status === 'scheduled' && new Date(`${s.date}T${s.startTime}`) > new Date()
      );

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
      const lastVisit = completedSessions.length > 0 
        ? completedSessions
            .sort((a: Session, b: Session) => 
              new Date(`${b.date}T${b.startTime}`).getTime() - new Date(`${a.date}T${a.startTime}`).getTime()
            )[0]
        : null;

      // –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
      const sessionHistory = completedSessions
        .sort((a: Session, b: Session) => 
          new Date(`${b.date}T${b.startTime}`).getTime() - new Date(`${a.date}T${a.startTime}`).getTime()
        )
        .slice(0, 10)
        .map((session: Session) => {
          const startTime = new Date(`${session.date}T${session.startTime}`);
          const endTime = new Date(`${session.date}T${session.endTime}`);
          const duration = Math.round((endTime.getTime() - startTime.getTime()) / (1000 * 60));

          return {
            id: session.id,
            date: session.date,
            startTime: session.startTime,
            endTime: session.endTime,
            type: session.type,
            duration,
            notes: session.notes || ''
          };
        });

      const enrichedClient = {
        ...client,
        trainerName: trainer?.name || null,
        trainerPhone: trainer?.phone || null,
        trainerEmail: trainer?.email || null,
        totalSessions: completedSessions.length,
        upcomingSessions: upcomingSessions.length,
        lastVisit: lastVisit ? `${lastVisit.date}T${lastVisit.startTime}` : null,
        sessionHistory,
        stats: {
          totalSessions: clientSessions.length,
          completedSessions: completedSessions.length,
          scheduledSessions: clientSessions.filter((s: Session) => s.status === 'scheduled').length,
          cancelledSessions: clientSessions.filter((s: Session) => s.status === 'cancelled').length,
          noShowSessions: clientSessions.filter((s: Session) => s.status === 'no-show').length
        }
      };

      return NextResponse.json({
        success: true,
        data: enrichedClient
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞' },
        { status: 500 }
      );
    }
  }
);

// PUT /api/clients/[id] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
export const PUT = withPermissions(
  { 
    resource: 'clients', 
    action: 'update',
    requireOwnership: true,
    getOwnerId: async (req) => {
      const url = new URL(req.url);
      const clientId = url.pathname.split('/').pop();
      const client = mockClients.find((c: Client) => c.id === clientId);
      return client?.trainerId; // –í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∏–µ–Ω—Ç–∞ - –µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä
    }
  },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;
      const body = await req.json();

      console.log(`‚úèÔ∏è API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ${id}`);

      const clientIndex = mockClients.findIndex((c: Client) => c.id === id);
      if (clientIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      const client = mockClients[clientIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (user.role === 'trainer' && client.trainerId !== user.id) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞' },
          { status: 403 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      if (body.email && body.email !== client.email) {
        const existingClient = [...mockTrainers, ...mockClients].find(u => u.email === body.email);
        if (existingClient) {
          return NextResponse.json(
            { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
            { status: 409 }
          );
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
      if (body.trainerId && body.trainerId !== client.trainerId) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
        const newTrainer = mockTrainers.find(t => t.id === body.trainerId);
        if (!newTrainer) {
          return NextResponse.json(
            { success: false, error: '–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }

        // –¢—Ä–µ–Ω–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥—Ä—É–≥–∏–º —Ç—Ä–µ–Ω–µ—Ä–∞–º
        if (user.role === 'trainer') {
          return NextResponse.json(
            { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞' },
            { status: 403 }
          );
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        if (client.trainerId) {
          const oldTrainerIndex = mockTrainers.findIndex(t => t.id === client.trainerId);
          if (oldTrainerIndex !== -1 && client.status === 'active') {
            mockTrainers[oldTrainerIndex].activeClients = Math.max(0, 
              mockTrainers[oldTrainerIndex].activeClients - 1
            );
          }
        }

        const newTrainerIndex = mockTrainers.findIndex(t => t.id === body.trainerId);
        if (newTrainerIndex !== -1 && (body.status || client.status) === 'active') {
          mockTrainers[newTrainerIndex].activeClients += 1;
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
      if (body.membershipType && !['basic', 'premium', 'vip'].includes(body.membershipType)) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞' },
          { status: 400 }
        );
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
      if (body.status && !['active', 'inactive', 'suspended'].includes(body.status)) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å' },
          { status: 400 }
        );
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
      const allowedFields = [
        'name', 'email', 'phone', 'status', 'trainerId', 'membershipType'
      ];

      const updateData: Partial<Client> = {};
      for (const field of allowedFields) {
        if (body[field] !== undefined) {
          (updateData as any)[field] = body[field];
        }
      }

      const updatedClient: Client = {
        ...client,
        ...updateData,
        id, // ID –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è
        updatedAt: new Date().toISOString(),
        updatedBy: user.id
      };

      mockClients[clientIndex] = updatedClient;

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–µ—Ä–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const trainer = mockTrainers.find(t => t.id === updatedClient.trainerId);

      console.log(`‚úÖ API: –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω - ${updatedClient.name}`);

      return NextResponse.json({
        success: true,
        data: {
          ...updatedClient,
          trainerName: trainer?.name || null
        },
        message: '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞' },
        { status: 500 }
      );
    }
  }
);

// DELETE /api/clients/[id] - –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
export const DELETE = withPermissions(
  { resource: 'clients', action: 'delete' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;

      console.log(`üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ${id}`);

      const clientIndex = mockClients.findIndex((c: Client) => c.id === id);
      if (clientIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      const client = mockClients[clientIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (user.role === 'trainer' && client.trainerId !== user.id) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞' },
          { status: 403 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
      const activeSessions = mockSessions.filter((s: Session) => 
        s.clientId === id && 
        s.status === 'scheduled' && 
        new Date(`${s.date}T${s.startTime}`) > new Date()
      );

      if (activeSessions.length > 0) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏' },
          { status: 400 }
        );
      }

      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
      const deletedClient: Client = {
        ...client,
        status: 'inactive',
        updatedAt: new Date().toISOString(),
        updatedBy: user.id
      };

      mockClients[clientIndex] = deletedClient;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É —Ç—Ä–µ–Ω–µ—Ä–∞
      if (client.trainerId && client.status === 'active') {
        const trainerIndex = mockTrainers.findIndex(t => t.id === client.trainerId);
        if (trainerIndex !== -1) {
          mockTrainers[trainerIndex].activeClients = Math.max(0, 
            mockTrainers[trainerIndex].activeClients - 1
          );
        }
      }

      console.log(`‚úÖ API: –∫–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω - ${client.name}`);

      return NextResponse.json({
        success: true,
        message: '–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞' },
        { status: 500 }
      );
    }
  }
);

// PATCH /api/clients/[id] - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
export const PATCH = withPermissions(
  { resource: 'clients', action: 'update' },
  async (req: AuthenticatedRequest, context?: { params: any }) => {
    try {
      if (!context?.params?.id) {
        return NextResponse.json(
          { success: false, error: 'ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const { id } = context.params;
      const { user } = req;
      const body = await req.json();

      console.log(`üîß API: —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ${id}`);

      const clientIndex = mockClients.findIndex((c: Client) => c.id === id);
      if (clientIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      const client = mockClients[clientIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      if (user.role === 'trainer' && client.trainerId !== user.id) {
        return NextResponse.json(
                    { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞' },
          { status: 403 }
        );
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (body.action) {
        switch (body.action) {
          case 'activate':
            if (user.role !== 'admin' && user.role !== 'manager') {
              return NextResponse.json(
                { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞' },
                { status: 403 }
              );
            }
            client.status = 'active';
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É —Ç—Ä–µ–Ω–µ—Ä–∞
            if (client.trainerId) {
              const trainerIndex = mockTrainers.findIndex(t => t.id === client.trainerId);
              if (trainerIndex !== -1) {
                mockTrainers[trainerIndex].activeClients += 1;
              }
            }
            break;

          case 'suspend':
            if (user.role !== 'admin' && user.role !== 'manager') {
              return NextResponse.json(
                { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞' },
                { status: 403 }
              );
            }
            client.status = 'suspended';
            
            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É —Ç—Ä–µ–Ω–µ—Ä–∞
            if (client.trainerId) {
              const trainerIndex = mockTrainers.findIndex(t => t.id === client.trainerId);
              if (trainerIndex !== -1) {
                mockTrainers[trainerIndex].activeClients = Math.max(0, 
                  mockTrainers[trainerIndex].activeClients - 1
                );
              }
            }
            break;

          case 'assignTrainer':
            if (!body.trainerId) {
              return NextResponse.json(
                { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
                { status: 400 }
              );
            }

            const newTrainer = mockTrainers.find(t => t.id === body.trainerId);
            if (!newTrainer) {
              return NextResponse.json(
                { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
                { status: 404 }
              );
            }

            // –¢—Ä–µ–Ω–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥—Ä—É–≥–∏–º —Ç—Ä–µ–Ω–µ—Ä–∞–º
            if (user.role === 'trainer' && body.trainerId !== user.id) {
              return NextResponse.json(
                { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞' },
                { status: 403 }
              );
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            if (client.trainerId && client.status === 'active') {
              const oldTrainerIndex = mockTrainers.findIndex(t => t.id === client.trainerId);
              if (oldTrainerIndex !== -1) {
                mockTrainers[oldTrainerIndex].activeClients = Math.max(0, 
                  mockTrainers[oldTrainerIndex].activeClients - 1
                );
              }
            }

            if (client.status === 'active') {
              const newTrainerIndex = mockTrainers.findIndex(t => t.id === body.trainerId);
              if (newTrainerIndex !== -1) {
                mockTrainers[newTrainerIndex].activeClients += 1;
              }
            }

            client.trainerId = body.trainerId;
            break;

          case 'unassignTrainer':
            if (user.role === 'trainer' && client.trainerId !== user.id) {
              return NextResponse.json(
                { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' },
                { status: 403 }
              );
            }

            // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
            if (client.trainerId && client.status === 'active') {
              const trainerIndex = mockTrainers.findIndex(t => t.id === client.trainerId);
              if (trainerIndex !== -1) {
                mockTrainers[trainerIndex].activeClients = Math.max(0, 
                  mockTrainers[trainerIndex].activeClients - 1
                );
              }
            }

            client.trainerId = undefined;
            break;

          case 'updateMembership':
            if (!body.membershipType || !['basic', 'premium', 'vip'].includes(body.membershipType)) {
              return NextResponse.json(
                { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞' },
                { status: 400 }
              );
            }
            client.membershipType = body.membershipType;
            break;

          case 'updateStats':
            if (typeof body.totalSessions === 'number' && body.totalSessions >= 0) {
              client.totalSessions = body.totalSessions;
            }
            break;

          case 'addNote':
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –±—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${client.id}: ${body.note}`);
            break;

          default:
            return NextResponse.json(
              { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
              { status: 400 }
            );
        }

        client.updatedAt = new Date().toISOString();
        client.updatedBy = user.id;
        mockClients[clientIndex] = client;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const trainer = mockTrainers.find(t => t.id === client.trainerId);

        return NextResponse.json({
          success: true,
          data: {
            ...client,
            trainerName: trainer?.name || null
          },
          message: `–î–µ–π—Å—Ç–≤–∏–µ "${body.action}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`
        });
      }

      return NextResponse.json(
        { success: false, error: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' },
        { status: 400 }
      );

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞' },
        { status: 500 }
      );
    }
  }
);

