// app/api/products/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);


export async function PUT(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json();
    console.log("üîÑ API: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", params.id, body);

    const result = await convex.mutation("products:update", {
      id: params.id,
      ...body,
      updatedAt: Date.now()
    });

    console.log("‚úÖ API: –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' 
      },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { searchParams } = new URL(request.url);
    const deleteType = searchParams.get('type') || 'soft';
    
    console.log(`üîÑ API: ${deleteType === 'hard' ? '–§–∏–∑–∏—á–µ—Å–∫–æ–µ' : '–ú—è–≥–∫–æ–µ'} —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:`, params.id);

    if (deleteType === 'hard') {
      const result = await convex.mutation("products:hardDelete", {
        id: params.id
      });
      
      console.log("‚úÖ API: –ü—Ä–æ–¥—É–∫—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω:", result);
      
      return NextResponse.json({ 
        success: true, 
        message: '–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        data: result 
      });
    } else {
      const result = await convex.mutation("products:softDelete", {
        id: params.id
      });

      console.log("‚úÖ API: –ü—Ä–æ–¥—É–∫—Ç –º—è–≥–∫–æ —É–¥–∞–ª–µ–Ω:", result);
      
      return NextResponse.json({ 
        success: true, 
        message: '–ü—Ä–æ–¥—É–∫—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        data: result 
      });
    }
  } catch (error) {
    console.error("‚ùå API: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' 
      },
      { status: 500 }
    );
  }
}
