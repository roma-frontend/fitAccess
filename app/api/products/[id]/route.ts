import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const body = await request.json();
    
    console.log("üîÑ API PUT: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", id);
    console.log("üì¶ API PUT: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", body);

    const { _id, createdAt, ...updateData } = body;

    // ‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
    const updatedProduct = await convex.mutation("products:update", {
      id,
      ...updateData,
      updatedAt: Date.now()
    });

    console.log("‚úÖ API PUT: –†–µ–∑—É–ª—å—Ç–∞—Ç –º—É—Ç–∞—Ü–∏–∏:", updatedProduct);

    // ‚úÖ –ï—Å–ª–∏ –º—É—Ç–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (updatedProduct) {
      const response = NextResponse.json({ 
        success: true, 
        data: updatedProduct,
        message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        timestamp: Date.now()
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
      response.headers.set('Pragma', 'no-cache');
      response.headers.set('Expires', '0');
      response.headers.set('ETag', `"${Date.now()}"`); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ETag
      
      return response;
    }

    // ‚úÖ –ï—Å–ª–∏ –º—É—Ç–∞—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –ø—Ä–æ–¥—É–∫—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    const freshProduct = await convex.query("products:getById", { id });
    
    const response = NextResponse.json({ 
      success: true, 
      data: freshProduct,
      message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      timestamp: Date.now()
    });

    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    response.headers.set('ETag', `"${Date.now()}"`);
    
    return response;
    
  } catch (error) {
    console.error("‚ùå API PUT: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞'
      },
      { status: 500 }
    );
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log("üîÑ API POST: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ PUT –ª–æ–≥–∏–∫—É");
  return PUT(request, { params });
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log("üîÑ API PATCH: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ PUT –ª–æ–≥–∏–∫—É");
  return PUT(request, { params });
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const { searchParams } = new URL(request.url);
    const deleteType = searchParams.get('type') || 'soft';
    
    console.log(`üîÑ API DELETE: ${deleteType === 'hard' ? '–§–∏–∑–∏—á–µ—Å–∫–æ–µ' : '–ú—è–≥–∫–æ–µ'} —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:`, id);

    if (deleteType === 'hard') {
      const result = await convex.mutation("products:hardDelete", { id });
      
      console.log("‚úÖ API DELETE: –ü—Ä–æ–¥—É–∫—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω:", result);
      
      const response = NextResponse.json({ 
        success: true, 
        message: '–ü—Ä–æ–¥—É–∫—Ç –Ω–∞–≤—Å–µ–≥–¥–∞ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        data: result,
        timestamp: Date.now()
      });
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
      return response;
    } else {
      const result = await convex.mutation("products:softDelete", { id });

      console.log("‚úÖ API DELETE: –ü—Ä–æ–¥—É–∫—Ç –º—è–≥–∫–æ —É–¥–∞–ª–µ–Ω:", result);
      
      const response = NextResponse.json({ 
        success: true, 
        message: '–ü—Ä–æ–¥—É–∫—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        data: result,
        timestamp: Date.now()
      });
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
      return response;
    }
  } catch (error) {
    console.error("‚ùå API DELETE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' 
      },
      { status: 500 }
    );
  }
}

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    console.log("üîÑ API GET: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", id);

    const result = await convex.query("products:getById", { id });

    if (!result) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        },
        { status: 404 }
      );
    }

    console.log("‚úÖ API GET: –ü—Ä–æ–¥—É–∫—Ç –ø–æ–ª—É—á–µ–Ω:", result);
    
    const response = NextResponse.json({ 
      success: true, 
      data: result,
      timestamp: Date.now()
    });
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
    return response;
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' 
      },
      { status: 500 }
    );
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º OPTIONS –¥–ª—è CORS
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, PATCH, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      'Cache-Control': 'no-cache, no-store, must-revalidate',
    },
  });
}
