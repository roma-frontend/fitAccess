// app/api/products/[id]/restore/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Promise –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const { id } = await params;
    console.log("üîÑ API: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", id);

    const result = await convex.mutation("products:restore", {
      id: id
    });

    console.log("‚úÖ API: –ü—Ä–æ–¥—É–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", result);
    
    return NextResponse.json({ 
      success: true, 
      data: result,
      message: '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
    });
  } catch (error) {
    console.error("‚ùå API: –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞' 
      },
      { status: 500 }
    );
  }
}
