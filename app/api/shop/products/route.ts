// app/api/shop/products/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function GET() {
  try {
    console.log("üîÑ API GET: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
      throw new Error("NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    console.log("üîó API GET: Convex URL:", process.env.NEXT_PUBLIC_CONVEX_URL);
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç Convex
    const { ConvexHttpClient } = await import("convex/browser");
    const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL);
    
    console.log("üìû API GET: –í—ã–∑—ã–≤–∞–µ–º Convex query");
    const products = await convex.query("products:getAll");
    
    console.log("‚úÖ API GET: –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", products?.length || 0);
    
    return NextResponse.json({ 
      success: true, 
      data: products || [],
      count: products?.length || 0
    });
  } catch (error) {
    console.error("‚ùå API GET: –û—à–∏–±–∫–∞:", error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
        data: [],
        stack: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    );
  }
}
