// app/api/face-id/register/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getCurrentUser } from '@/lib/auth';

export async function POST(request: NextRequest) {
  try {
    console.log('üìù API: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Face ID...');
    
    const user = await getCurrentUser();
    
    if (!user) {
      console.log('‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    const body = await request.json();
    const { faceDescriptor, deviceInfo } = body;

    if (!faceDescriptor || !Array.isArray(faceDescriptor)) {
      console.log('‚ùå API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞');
      return NextResponse.json({
        success: false,
        error: '–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω'
      }, { status: 400 });
    }

    console.log('üë§ API: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Face ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { 
      id: user.id, 
      email: user.email,
      descriptorLength: faceDescriptor.length 
    });

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    /* 
    const faceIdRecord = await db.faceId.upsert({
      where: { userId: user.id },
      update: {
        descriptor: JSON.stringify(faceDescriptor),
        deviceInfo: deviceInfo || {},
        updatedAt: new Date(),
        lastUsed: new Date(),
      },
      create: {
        userId: user.id,
        descriptor: JSON.stringify(faceDescriptor),
        deviceInfo: deviceInfo || {},
        deviceCount: 1,
        createdAt: new Date(),
        lastUsed: new Date(),
      },
    });
    
    console.log('üíæ Face ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', faceIdRecord.id);
    */

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await new Promise(resolve => setTimeout(resolve, 1000));

    console.log('‚úÖ API: Face ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', user.id);

    return NextResponse.json({
      success: true,
      message: 'Face ID —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      userId: user.id,
      isEnabled: true,
      dateRegistered: new Date().toISOString(),
      deviceCount: 1,
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID:', error);
    return NextResponse.json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Face ID'
    }, { status: 500 });
  }
}
