// app/api/face-id/authenticate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { createToken } from '@/lib/auth';

export async function POST(request: NextRequest) {
  try {
    console.log('üîç API: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Face ID...');
    
    const body = await request.json();
    const { faceDescriptor, sessionId } = body;

    if (!faceDescriptor || !Array.isArray(faceDescriptor)) {
      console.log('‚ùå API: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞');
      return NextResponse.json({
        success: false,
        error: '–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      }, { status: 400 });
    }

    console.log('üîç API: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É –ª–∏—Ü–∞...');

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    /* 
    const faceIdRecords = await db.faceId.findMany({
      include: {
        user: true
      }
    });

    let matchedUser = null;
    let bestMatch = 0;
    const SIMILARITY_THRESHOLD = 0.6; // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏

    for (const record of faceIdRecords) {
      const storedDescriptor = JSON.parse(record.descriptor);
      const similarity = calculateSimilarity(faceDescriptor, storedDescriptor);
      
      if (similarity > SIMILARITY_THRESHOLD && similarity > bestMatch) {
        bestMatch = similarity;
        matchedUser = record.user;
      }
    }

    if (!matchedUser) {
      console.log('‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ Face ID');
      return NextResponse.json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      }, { status: 404 });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await db.faceId.updateMany({
      where: { userId: matchedUser.id },
      data: { lastUsed: new Date() }
    });
    */

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–µ–º–æ)
    const mockUser = {
      id: 'user_' + Math.random().toString(36).substr(2, 9),
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      email: 'test@example.com',
      role: 'member'
    };

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tokenPayload = {
      userId: mockUser.id,
      name: mockUser.name,
      email: mockUser.email,
      role: mockUser.role,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 —á–∞—Å–∞
    };

    const token = createToken(tokenPayload);

    console.log('‚úÖ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', mockUser.email);

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π cookie
    const response = NextResponse.json({
      success: true,
      message: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      user: mockUser,
      token: token,
      authenticated: true,
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º
    response.cookies.set('auth_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
      path: '/',
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ä–æ–ª—å—é
    response.cookies.set('user_role', mockUser.role, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 24 * 60 * 60, // 24 —á–∞—Å–∞
      path: '/',
    });

    return response;

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Face ID:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ (euclidean distance)
function calculateSimilarity(desc1: number[], desc2: number[]): number {
  if (desc1.length !== desc2.length) return 0;
  
  let sum = 0;
  for (let i = 0; i < desc1.length; i++) {
    sum += Math.pow(desc1[i] - desc2[i], 2);
  }
  
  const distance = Math.sqrt(sum);
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ö–æ–∂–µ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ —Å—Ö–æ–∂–µ—Å—Ç—å)
  return Math.max(0, 1 - distance);
}
