// app/api/face-id/status/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getCurrentUser } from '@/lib/auth';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç API: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Face ID...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
    const user = await getCurrentUser();
    
    if (!user) {
      console.log('‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return NextResponse.json({
        success: false,
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'
      }, { status: 401 });
    }

    console.log('üë§ API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', { id: user.id, email: user.email, role: user.role });

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    // –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const mockData = {
      isEnabled: user.id.length % 2 === 0, // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ ID
      lastUsed: user.id.length % 2 === 0 ? new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString() : undefined,
      dateRegistered: user.id.length % 2 === 0 ? new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString() : undefined,
      deviceCount: user.id.length % 2 === 0 ? Math.floor(Math.random() * 3) + 1 : 0,
    };

    /* 
    // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:
    const faceIdRecord = await db.faceId.findUnique({
      where: { userId: user.id }
    });

    const faceIdData = {
      isEnabled: !!faceIdRecord,
      lastUsed: faceIdRecord?.lastUsed?.toISOString(),
      dateRegistered: faceIdRecord?.createdAt?.toISOString(),
      deviceCount: faceIdRecord?.deviceCount || 0,
    };
    */

    console.log('‚úÖ API: Face ID –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', user.id, ':', mockData);

    return NextResponse.json({
      success: true,
      userId: user.id,
      ...mockData
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Face ID:', error);
    return NextResponse.json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}
