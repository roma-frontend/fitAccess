// app/api/trainers/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withTrainerManagement, withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';
import { canManageRole } from '@/lib/permissions';
import { mockTrainers } from '@/lib/mock-data';

// GET /api/trainers - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
export const GET = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withTrainerManagement(async (req: AuthenticatedRequest) => {
    try {
      console.log('üìã API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤');
      
      const { user } = req;
      const url = new URL(req.url);
      const page = parseInt(url.searchParams.get('page') || '1');
      const limit = parseInt(url.searchParams.get('limit') || '10');
      const search = url.searchParams.get('search') || '';
      const status = url.searchParams.get('status');
      const specialization = url.searchParams.get('specialization');
      const sortBy = url.searchParams.get('sortBy') || 'name';
      const sortOrder = url.searchParams.get('sortOrder') || 'asc';

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
      let trainers = mockTrainers;
      
      // –¢—Ä–µ–Ω–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–µ–±—è
      if (user.role === 'trainer') {
        trainers = trainers.filter(trainer => trainer.id === user.id);
      }
      
      // –ü–æ–∏—Å–∫
      if (search) {
        trainers = trainers.filter(trainer =>
          trainer.name.toLowerCase().includes(search.toLowerCase()) ||
          trainer.email.toLowerCase().includes(search.toLowerCase()) ||
          trainer.specialization.some(spec => 
            spec.toLowerCase().includes(search.toLowerCase())
          )
        );
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
      if (status && status !== 'all') {
        trainers = trainers.filter(trainer => trainer.status === status);
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (specialization && specialization !== 'all') {
        trainers = trainers.filter(trainer => 
          trainer.specialization.includes(specialization)
        );
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      trainers.sort((a, b) => {
        let aValue: any = a[sortBy as keyof typeof a];
        let bValue: any = b[sortBy as keyof typeof b];

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (typeof aValue === 'number' && typeof bValue === 'number') {
          return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;
        }

        // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (typeof aValue === 'string' && typeof bValue === 'string') {
          aValue = aValue.toLowerCase();
          bValue = bValue.toLowerCase();
          if (sortOrder === 'asc') {
            return aValue.localeCompare(bValue);
          } else {
            return bValue.localeCompare(aValue);
          }
        }

        return 0;
      });

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      const paginatedTrainers = trainers.slice(startIndex, endIndex);

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const stats = {
        total: mockTrainers.length,
        active: mockTrainers.filter(t => t.status === 'active').length,
        inactive: mockTrainers.filter(t => t.status === 'inactive').length,
        suspended: mockTrainers.filter(t => t.status === 'suspended').length,
        specializations: [...new Set(mockTrainers.flatMap(t => t.specialization))],
        averageRating: mockTrainers.reduce((sum, t) => sum + t.rating, 0) / mockTrainers.length
      };

      return NextResponse.json({
        success: true,
        data: paginatedTrainers,
        pagination: {
          page,
          limit,
          total: trainers.length,
          pages: Math.ceil(trainers.length / limit),
          hasMore: endIndex < trainers.length
        },
        filters: {
          search,
          status,
          specialization,
          sortBy,
          sortOrder
        },
        stats
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤' },
        { status: 500 }
      );
    }
  });

  return handler(req, { params: {} });
};

// POST /api/trainers - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
export const POST = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'create' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('‚ûï API: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞');
        
        const body = await req.json();
        const { user } = req;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if (!body.name || !body.email) {
          return NextResponse.json(
            { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email)' },
            { status: 400 }
          );
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email —Ñ–æ—Ä–º–∞—Ç–∞
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(body.email)) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' },
            { status: 400 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏
        const targetRole = body.role || 'trainer';
        if (!canManageRole(user.role, targetRole)) {
          return NextResponse.json(
            { success: false, error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ ${targetRole}` },
            { status: 403 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
        const existingTrainer = mockTrainers.find(t => t.email.toLowerCase() === body.email.toLowerCase());
        if (existingTrainer) {
          return NextResponse.json(
            { success: false, error: '–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
            { status: 409 }
          );
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        if (body.experience !== undefined && (isNaN(body.experience) || body.experience < 0)) {
          return NextResponse.json(
            { success: false, error: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' },
            { status: 400 }
          );
        }

        if (body.hourlyRate !== undefined && (isNaN(body.hourlyRate) || body.hourlyRate < 0)) {
          return NextResponse.json(
            { success: false, error: '–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' },
            { status: 400 }
          );
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
        const newTrainer = {
          id: `trainer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          name: body.name.trim(),
          email: body.email.toLowerCase().trim(),
          role: targetRole,
          status: body.status || 'active',
          phone: body.phone || '',
          specialization: Array.isArray(body.specialization) 
            ? body.specialization.filter((spec: string) => spec && spec.trim())
            : [],
          experience: typeof body.experience === 'number' ? body.experience : 0,
          rating: 0,
          activeClients: 0,
          totalSessions: 0,
          hourlyRate: typeof body.hourlyRate === 'number' ? body.hourlyRate : 1500,
          certifications: Array.isArray(body.certifications) 
            ? body.certifications.filter((cert: string) => cert && cert.trim())
            : [],
          workingHours: body.workingHours || {
            monday: { start: '09:00', end: '18:00', available: true },
            tuesday: { start: '09:00', end: '18:00', available: true },
            wednesday: { start: '09:00', end: '18:00', available: true },
            thursday: { start: '09:00', end: '18:00', available: true },
            friday: { start: '09:00', end: '18:00', available: true },
            saturday: { start: '10:00', end: '16:00', available: true },
            sunday: { start: '10:00', end: '16:00', available: false }
          },
          bio: body.bio || '',
          avatar: body.avatar || '',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          createdBy: user.id
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤
        mockTrainers.push(newTrainer);

        console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω - ${newTrainer.name} (${newTrainer.email})`);

        return NextResponse.json({
          success: true,
          data: newTrainer,
          message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PUT /api/trainers - –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'update' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üìù API: –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤');
        
        const body = await req.json();
        const { user } = req;
        const { trainers, action } = body;

        if (!Array.isArray(trainers) || trainers.length === 0) {
          return NextResponse.json(
            { success: false, error: '–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –ø—É—Å—Ç' },
            { status: 400 }
          );
        }

        const results = {
          updated: 0,
          failed: 0,
          errors: [] as string[]
        };

        for (const trainerUpdate of trainers) {
          try {
            const { id, ...updateData } = trainerUpdate;

            if (!id) {
              results.failed++;
              results.errors.push('ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
              continue;
            }

            const trainerIndex = mockTrainers.findIndex(t => t.id === id);
            if (trainerIndex === -1) {
              results.failed++;
              results.errors.push(`–¢—Ä–µ–Ω–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
              continue;
            }

            const trainer = mockTrainers[trainerIndex];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if (user.role === 'trainer' && trainer.id !== user.id) {
              results.failed++;
              results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
              continue;
            }

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if (action) {
              switch (action) {
                case 'activate':
                  if (user.role === 'admin' || user.role === 'manager') {
                    trainer.status = 'active';
                  } else {
                    results.failed++;
                    results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
                    continue;
                  }
                  break;

                case 'suspend':
                  if (user.role === 'admin' || user.role === 'manager') {
                    trainer.status = 'suspended';
                  } else {
                    results.failed++;
                    results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
                    continue;
                  }
                  break;

                case 'deactivate':
                  if (user.role === 'admin' || user.role === 'manager') {
                    trainer.status = 'inactive';
                  } else {
                    results.failed++;
                    results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
                    continue;
                  }
                  break;

                default:
                  // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                  Object.assign(trainer, updateData);
                  break;
              }
            } else {
              // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
              Object.assign(trainer, updateData);
            }

            trainer.updatedAt = new Date().toISOString();
            trainer.updatedBy = user.id;

            mockTrainers[trainerIndex] = trainer;
            results.updated++;

          } catch (error) {
            results.failed++;
            results.errors.push(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞: ${error}`);
          }
        }

        console.log(`‚úÖ API: –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - ${results.updated} —É—Å–ø–µ—à–Ω–æ, ${results.failed} –æ—à–∏–±–æ–∫`);

        return NextResponse.json({
          success: results.failed === 0,
          data: results,
          message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${results.updated} —Ç—Ä–µ–Ω–µ—Ä–æ–≤${results.failed > 0 ? `, ${results.failed} –æ—à–∏–±–æ–∫` : ''}`
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// DELETE /api/trainers - –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'delete' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üóëÔ∏è API: –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤');
        
        const body = await req.json();
        const { user } = req;
        const { ids, force = false } = body;

        if (!Array.isArray(ids) || ids.length === 0) {
          return NextResponse.json(
                        { success: false, error: '–°–ø–∏—Å–æ–∫ ID —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –ø—É—Å—Ç' },
            { status: 400 }
          );
        }

        const results = {
          deleted: 0,
          failed: 0,
          errors: [] as string[]
        };

        for (const id of ids) {
          try {
            const trainerIndex = mockTrainers.findIndex(t => t.id === id);
            if (trainerIndex === -1) {
              results.failed++;
              results.errors.push(`–¢—Ä–µ–Ω–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
              continue;
            }

            const trainer = mockTrainers[trainerIndex];

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ
            if (trainer.id === user.id) {
              results.failed++;
              results.errors.push('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
            if (!force && trainer.activeClients > 0) {
              results.failed++;
              results.errors.push(`–¢—Ä–µ–Ω–µ—Ä ${trainer.name} –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤`);
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            if (user.role !== 'admin' && user.role !== 'manager') {
              results.failed++;
              results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
              continue;
            }

            // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞)
            if (!force) {
              trainer.status = 'inactive';
              trainer.updatedAt = new Date().toISOString();
              trainer.updatedBy = user.id;
              mockTrainers[trainerIndex] = trainer;
            } else {
              // –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
              mockTrainers.splice(trainerIndex, 1);
            }

            results.deleted++;

          } catch (error) {
            results.failed++;
            results.errors.push(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ —Å ID ${id}: ${error}`);
          }
        }

        console.log(`‚úÖ API: –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - ${results.deleted} —É–¥–∞–ª–µ–Ω–æ, ${results.failed} –æ—à–∏–±–æ–∫`);

        return NextResponse.json({
          success: results.failed === 0,
          data: results,
          message: `${force ? '–£–¥–∞–ª–µ–Ω–æ' : '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ'} ${results.deleted} —Ç—Ä–µ–Ω–µ—Ä–æ–≤${results.failed > 0 ? `, ${results.failed} –æ—à–∏–±–æ–∫` : ''}`
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PATCH /api/trainers - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
export const PATCH = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'update' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üîß API: —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤');
        
        const body = await req.json();
        const { user } = req;
        const { operation, data } = body;

        if (!operation) {
          return NextResponse.json(
            { success: false, error: '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞' },
            { status: 400 }
          );
        }

        let results = {
          processed: 0,
          failed: 0,
          errors: [] as string[]
        };

        switch (operation) {
          case 'bulk-status-update':
            results = await bulkStatusUpdate(data, user);
            break;

          case 'bulk-specialization-update':
            results = await bulkSpecializationUpdate(data, user);
            break;

          case 'bulk-rate-update':
            results = await bulkRateUpdate(data, user);
            break;

          case 'bulk-working-hours-update':
            results = await bulkWorkingHoursUpdate(data, user);
            break;

          case 'recalculate-stats':
            results = await recalculateTrainerStats(data, user);
            break;

          default:
            return NextResponse.json(
              { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è' },
              { status: 400 }
            );
        }

        return NextResponse.json({
          success: results.failed === 0,
          data: results,
          message: `–û–ø–µ—Ä–∞—Ü–∏—è "${operation}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${results.processed} —É—Å–ø–µ—à–Ω–æ${results.failed > 0 ? `, ${results.failed} –æ—à–∏–±–æ–∫` : ''}`
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

async function bulkStatusUpdate(data: any, user: any) {
  const { trainerIds, status } = data;
  const results = { processed: 0, failed: 0, errors: [] as string[] };

  if (!Array.isArray(trainerIds) || !status) {
    results.failed++;
    results.errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    return results;
  }

  const validStatuses = ['active', 'inactive', 'suspended'];
  if (!validStatuses.includes(status)) {
    results.failed++;
    results.errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å');
    return results;
  }

  for (const id of trainerIds) {
    const trainerIndex = mockTrainers.findIndex(t => t.id === id);
    if (trainerIndex === -1) {
      results.failed++;
      results.errors.push(`–¢—Ä–µ–Ω–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }

    const trainer = mockTrainers[trainerIndex];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if (user.role === 'trainer' && trainer.id !== user.id) {
      results.failed++;
      results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
      continue;
    }

    trainer.status = status;
    trainer.updatedAt = new Date().toISOString();
    trainer.updatedBy = user.id;

    mockTrainers[trainerIndex] = trainer;
    results.processed++;
  }

  return results;
}

async function bulkSpecializationUpdate(data: any, user: any) {
  const { trainerIds, specialization, action = 'replace' } = data;
  const results = { processed: 0, failed: 0, errors: [] as string[] };

  if (!Array.isArray(trainerIds) || !Array.isArray(specialization)) {
    results.failed++;
    results.errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    return results;
  }

  for (const id of trainerIds) {
    const trainerIndex = mockTrainers.findIndex(t => t.id === id);
    if (trainerIndex === -1) {
      results.failed++;
      results.errors.push(`–¢—Ä–µ–Ω–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }

    const trainer = mockTrainers[trainerIndex];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if (user.role === 'trainer' && trainer.id !== user.id) {
      results.failed++;
      results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
      continue;
    }

    switch (action) {
      case 'replace':
        trainer.specialization = [...specialization];
        break;
      case 'add':
        trainer.specialization = [...new Set([...trainer.specialization, ...specialization])];
        break;
      case 'remove':
        trainer.specialization = trainer.specialization.filter(spec => !specialization.includes(spec));
        break;
    }

    trainer.updatedAt = new Date().toISOString();
    trainer.updatedBy = user.id;

    mockTrainers[trainerIndex] = trainer;
    results.processed++;
  }

  return results;
}

async function bulkRateUpdate(data: any, user: any) {
  const { trainerIds, hourlyRate, adjustmentType = 'set' } = data;
  const results = { processed: 0, failed: 0, errors: [] as string[] };

  if (!Array.isArray(trainerIds) || typeof hourlyRate !== 'number' || hourlyRate < 0) {
    results.failed++;
    results.errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏');
    return results;
  }

  for (const id of trainerIds) {
    const trainerIndex = mockTrainers.findIndex(t => t.id === id);
    if (trainerIndex === -1) {
      results.failed++;
      results.errors.push(`–¢—Ä–µ–Ω–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }

    const trainer = mockTrainers[trainerIndex];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if (user.role === 'trainer' && trainer.id !== user.id) {
      results.failed++;
      results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
      continue;
    }

    switch (adjustmentType) {
      case 'set':
        trainer.hourlyRate = hourlyRate;
        break;
      case 'increase':
        trainer.hourlyRate += hourlyRate;
        break;
      case 'decrease':
        trainer.hourlyRate = Math.max(0, trainer.hourlyRate - hourlyRate);
        break;
      case 'percentage':
        trainer.hourlyRate = Math.round(trainer.hourlyRate * (1 + hourlyRate / 100));
        break;
    }

    trainer.updatedAt = new Date().toISOString();
    trainer.updatedBy = user.id;

    mockTrainers[trainerIndex] = trainer;
    results.processed++;
  }

  return results;
}

async function bulkWorkingHoursUpdate(data: any, user: any) {
  const { trainerIds, workingHours } = data;
  const results = { processed: 0, failed: 0, errors: [] as string[] };

  if (!Array.isArray(trainerIds) || !workingHours) {
    results.failed++;
    results.errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤');
    return results;
  }

  for (const id of trainerIds) {
    const trainerIndex = mockTrainers.findIndex(t => t.id === id);
    if (trainerIndex === -1) {
      results.failed++;
      results.errors.push(`–¢—Ä–µ–Ω–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }

    const trainer = mockTrainers[trainerIndex];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if (user.role === 'trainer' && trainer.id !== user.id) {
      results.failed++;
      results.errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}`);
      continue;
    }

    trainer.workingHours = { ...trainer.workingHours, ...workingHours };
    trainer.updatedAt = new Date().toISOString();
    trainer.updatedBy = user.id;

    mockTrainers[trainerIndex] = trainer;
    results.processed++;
  }

  return results;
}

async function recalculateTrainerStats(data: any, user: any) {
  const { trainerIds } = data;
  const results = { processed: 0, failed: 0, errors: [] as string[] };

  const targetIds = Array.isArray(trainerIds) ? trainerIds : mockTrainers.map(t => t.id);

  for (const id of targetIds) {
    const trainerIndex = mockTrainers.findIndex(t => t.id === id);
    if (trainerIndex === -1) {
      results.failed++;
      results.errors.push(`–¢—Ä–µ–Ω–µ—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      continue;
    }

    const trainer = mockTrainers[trainerIndex];

    // –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
    trainer.totalSessions = Math.floor(Math.random() * 100) + trainer.totalSessions;
    trainer.rating = Math.round((Math.random() * 2 + 3) * 10) / 10; // 3.0 - 5.0
    trainer.activeClients = Math.floor(Math.random() * 20) + 5;

    trainer.updatedAt = new Date().toISOString();
    trainer.updatedBy = user.id;

    mockTrainers[trainerIndex] = trainer;
    results.processed++;
  }

  return results;
}

