// app/api/trainers/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withTrainerManagement, withPermissions } from '@/lib/api-middleware';
import { canManageRole } from '@/lib/permissions';
import { mockTrainers } from '@/lib/mock-data';

// GET /api/trainers - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
export const GET = withTrainerManagement(async (req) => {
  try {
    console.log('üìã API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤');
    
    const { user } = req;
    const url = new URL(req.url);
    const page = parseInt(url.searchParams.get('page') || '1');
    const limit = parseInt(url.searchParams.get('limit') || '10');
    const search = url.searchParams.get('search') || '';

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
    let trainers = mockTrainers;
    
    // –¢—Ä–µ–Ω–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–µ–±—è
    if (user.role === 'trainer') {
      trainers = trainers.filter(trainer => trainer.id === user.id);
    }
    
    // –ü–æ–∏—Å–∫
    if (search) {
      trainers = trainers.filter(trainer =>
        trainer.name.toLowerCase().includes(search.toLowerCase()) ||
        trainer.email.toLowerCase().includes(search.toLowerCase())
      );
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + limit;
    const paginatedTrainers = trainers.slice(startIndex, endIndex);

    return NextResponse.json({
      success: true,
      data: paginatedTrainers,
      pagination: {
        page,
        limit,
        total: trainers.length,
        pages: Math.ceil(trainers.length / limit)
      }
    });

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤' },
      { status: 500 }
    );
  }
});

// POST /api/trainers - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
export const POST = withPermissions(
  { resource: 'trainers', action: 'create' },
  async (req) => {
    try {
      console.log('‚ûï API: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞');
      
      const body = await req.json();
      const { user } = req;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!body.name || !body.email) {
        return NextResponse.json(
          { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email)' },
          { status: 400 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ —Ö—É–∫)
      const targetRole = body.role || 'trainer';
      if (!canManageRole(user.role, targetRole)) {
        return NextResponse.json(
          { success: false, error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏ ${targetRole}` },
          { status: 403 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
      const existingTrainer = mockTrainers.find(t => t.email === body.email);
      if (existingTrainer) {
        return NextResponse.json(
          { success: false, error: '–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 409 }
        );
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ –≤—Å–µ–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const newTrainer = {
        id: `trainer_${Date.now()}`,
        name: body.name,
        email: body.email,
        role: targetRole,
        status: body.status || 'active',
        phone: body.phone || '',
        specialization: Array.isArray(body.specialization) ? body.specialization : [],
        experience: typeof body.experience === 'number' ? body.experience : 0,
        rating: 0,
        activeClients: 0,
        totalSessions: 0,
        hourlyRate: typeof body.hourlyRate === 'number' ? body.hourlyRate : 1500, // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
        certifications: Array.isArray(body.certifications) ? body.certifications : [],
        workingHours: body.workingHours || {
          monday: { start: '09:00', end: '18:00', isWorking: true },
          tuesday: { start: '09:00', end: '18:00', isWorking: true },
          wednesday: { start: '09:00', end: '18:00', isWorking: true },
          thursday: { start: '09:00', end: '18:00', isWorking: true },
          friday: { start: '09:00', end: '18:00', isWorking: true },
          saturday: { start: '10:00', end: '16:00', isWorking: true },
          sunday: { start: '10:00', end: '16:00', isWorking: false }
        },
        createdAt: new Date().toISOString(),
        createdBy: user.id
      };

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
      mockTrainers.push(newTrainer);

      console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω - ${newTrainer.name} (${newTrainer.email})`);

      return NextResponse.json({
        success: true,
        data: newTrainer,
        message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 500 }
      );
    }
  }
);

// PUT /api/trainers - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
export const PUT = withPermissions(
  { resource: 'trainers', action: 'update' },
  async (req) => {
    try {
      console.log('üìù API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞');
      
      const body = await req.json();
      const { user } = req;
      const { id, ...updateData } = body;

      if (!id) {
        return NextResponse.json(
          { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const trainerIndex = mockTrainers.findIndex(t => t.id === id);
      if (trainerIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      const trainer = mockTrainers[trainerIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É
      if (user.role === 'trainer' && trainer.id !== user.id) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞' },
          { status: 403 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      if (updateData.email && updateData.email !== trainer.email) {
        const existingTrainer = mockTrainers.find(t => t.email === updateData.email && t.id !== id);
        if (existingTrainer) {
          return NextResponse.json(
            { success: false, error: '–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
            { status: 409 }
          );
        }
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
      const updatedTrainer = {
        ...trainer,
        ...updateData,
        id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID
        updatedAt: new Date().toISOString(),
        updatedBy: user.id
      };

      mockTrainers[trainerIndex] = updatedTrainer;

      console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω - ${updatedTrainer.name}`);

      return NextResponse.json({
        success: true,
        data: updatedTrainer,
        message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 500 }
      );
    }
  }
);

// DELETE /api/trainers - –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
export const DELETE = withPermissions(
  { resource: 'trainers', action: 'delete' },
  async (req) => {
    try {
      console.log('üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞');
      
      const url = new URL(req.url);
      const id = url.searchParams.get('id');

      if (!id) {
        return NextResponse.json(
          { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      const trainerIndex = mockTrainers.findIndex(t => t.id === id);
      if (trainerIndex === -1) {
        return NextResponse.json(
          { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
          { status: 404 }
        );
      }

      const trainer = mockTrainers[trainerIndex];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (trainer.activeClients > 0) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏' },
          { status: 400 }
        );
      }

      // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
      mockTrainers.splice(trainerIndex, 1);

      console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä —É–¥–∞–ª–µ–Ω - ${trainer.name}`);

      return NextResponse.json({
        success: true,
        message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 500 }
      );
    }
  }
);
