// app/api/trainers/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';
import { canManageRole } from '@/lib/permissions';
import { mockTrainers, normalizeWorkingHours } from '@/lib/mock-data';

// GET /api/trainers/[id] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
export const GET = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'read' },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`üìã API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ ${id}`);

        const trainer = mockTrainers.find(t => t.id === id);
        if (!trainer) {
          return NextResponse.json(
            { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
        if (user.role === 'trainer' && trainer.id !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É' },
            { status: 403 }
          );
        }

        return NextResponse.json({
          success: true,
          data: trainer
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PUT /api/trainers/[id] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'update' },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;
        const body = await req.json();

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`‚úèÔ∏è API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ ${id}`);

        const trainerIndex = mockTrainers.findIndex(t => t.id === id);
        if (trainerIndex === -1) {
          return NextResponse.json(
            { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }

        const trainer = mockTrainers[trainerIndex];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É
        if (user.role === 'trainer' && trainer.id !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞' },
            { status: 403 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏
        if (body.role && body.role !== trainer.role) {
          if (!canManageRole(user.role, body.role)) {
            return NextResponse.json(
              { success: false, error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ ${body.role}` },
              { status: 403 }
            );
          }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        if (body.email && body.email !== trainer.email) {
          const existingTrainer = mockTrainers.find(t => t.email === body.email && t.id !== id);
          if (existingTrainer) {
            return NextResponse.json(
              { success: false, error: '–¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
              { status: 409 }
            );
          }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è)
        const allowedFields = [
          'name', 'email', 'phone', 'specialization', 'experience', 
          'hourlyRate', 'certifications', 'workingHours', 'status'
        ];

        const updateData: any = {};
        for (const field of allowedFields) {
          if (body[field] !== undefined) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
            if (field === 'workingHours') {
              updateData[field] = normalizeWorkingHours(body[field]);
            } else {
              updateData[field] = body[field];
            }
          }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const updatedTrainer = {
          ...trainer,
          ...updateData,
          id, // ID –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å—Å—è
          updatedAt: new Date().toISOString(),
          updatedBy: user.id
        };

        mockTrainers[trainerIndex] = updatedTrainer;

        console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω - ${updatedTrainer.name}`);

        return NextResponse.json({
          success: true,
          data: updatedTrainer,
          message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// DELETE /api/trainers/[id] - –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'delete' },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ ${id}`);

        const trainerIndex = mockTrainers.findIndex(t => t.id === id);
        if (trainerIndex === -1) {
          return NextResponse.json(
            { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }

        const trainer = mockTrainers[trainerIndex];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ
        if (trainer.id === user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' },
            { status: 400 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        if (trainer.activeClients > 0) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏' },
            { status: 400 }
          );
        }

        // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)
        const deletedTrainer = {
          ...trainer,
          status: 'inactive' as const,
          updatedAt: new Date().toISOString(),
          updatedBy: user.id
        };

        mockTrainers[trainerIndex] = deletedTrainer;

        console.log(`‚úÖ API: —Ç—Ä–µ–Ω–µ—Ä —É–¥–∞–ª–µ–Ω - ${trainer.name}`);

        return NextResponse.json({
          success: true,
          message: '–¢—Ä–µ–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PATCH /api/trainers/[id] - –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
export const PATCH = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'trainers', action: 'update' },
    async (req: AuthenticatedRequest) => {
      try {
        const params = await context.params;
        const { id } = params;
        const { user } = req;
        const body = await req.json();

        if (!id) {
          return NextResponse.json(
            { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
            { status: 400 }
          );
        }

        console.log(`üîß API: —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ ${id}`);

        const trainerIndex = mockTrainers.findIndex(t => t.id === id);
        if (trainerIndex === -1) {
          return NextResponse.json(
            { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
            { status: 404 }
          );
        }

        const trainer = mockTrainers[trainerIndex];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É
        if (user.role === 'trainer' && trainer.id !== user.id) {
          return NextResponse.json(
            { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞' },
            { status: 403 }
          );
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (body.action) {
          switch (body.action) {
            case 'activate':
              if (user.role !== 'admin' && user.role !== 'manager') {
                return NextResponse.json(
                  { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞' },
                  { status: 403 }
                );
              }
              trainer.status = 'active';
              break;

            case 'suspend':
              if (user.role !== 'admin' && user.role !== 'manager') {
                return NextResponse.json(
                  { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞' },
                  { status: 403 }
                );
              }
              trainer.status = 'suspended';
              break;

            case 'updateRating':
              if (typeof body.rating === 'number' && body.rating >= 0 && body.rating <= 5) {
                trainer.rating = body.rating;
              } else {
                return NextResponse.json(
                  { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 5)' },
                  { status: 400 }
                );
              }
              break;

            case 'updateStats':
              if (typeof body.activeClients === 'number' && body.activeClients >= 0) {
                trainer.activeClients = body.activeClients;
              }
              if (typeof body.totalSessions === 'number' && body.totalSessions >= 0) {
                trainer.totalSessions = body.totalSessions;
              }
              break;

            case 'updateWorkingHours':
              if (body.workingHours) {
                trainer.workingHours = normalizeWorkingHours(body.workingHours);
              } else {
                return NextResponse.json(
                  { success: false, error: '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã' },
                  { status: 400 }
                );
              }
              break;

            case 'addCertification':
              if (typeof body.certification === 'string' && body.certification.trim()) {
                if (!trainer.certifications.includes(body.certification)) {
                  trainer.certifications.push(body.certification);
                }
              } else {
                return NextResponse.json(
                  { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞' },
                  { status: 400 }
                );
              }
              break;

            case 'removeCertification':
              if (typeof body.certification === 'string') {
                trainer.certifications = trainer.certifications.filter(
                  cert => cert !== body.certification
                );
              } else {
                return NextResponse.json(
                  { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞' },
                  { status: 400 }
                );
              }
              break;

            case 'updateSpecialization':
              if (Array.isArray(body.specialization)) {
                trainer.specialization = body.specialization.filter(
                  (spec: string) => typeof spec === 'string' && spec.trim()
                );
              } else {
                return NextResponse.json(
                  { success: false, error: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫' },
                  { status: 400 }
                );
              }
              break;

            default:
              return NextResponse.json(
                { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
                { status: 400 }
              );
          }

          trainer.updatedAt = new Date().toISOString();
          trainer.updatedBy = user.id;

          mockTrainers[trainerIndex] = trainer;

          return NextResponse.json({
            success: true,
            data: trainer,
            message: `–î–µ–π—Å—Ç–≤–∏–µ "${body.action}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`
          });
        }

        return NextResponse.json(
          { success: false, error: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ' },
          { status: 400 }
        );

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};
