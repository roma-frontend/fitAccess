// app/api/analytics/export/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { mockSessions, mockTrainers, mockClients } from '@/lib/mock-data';

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
interface User {
  id: string;
  email: string;
  role: 'admin' | 'trainer' | 'client';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getAuthenticatedUser(request: NextRequest): Promise<User | null> {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞ –∏–∑ headers –∏–ª–∏ cookies
  try {
    const token = request.headers.get('authorization')?.replace('Bearer ', '') || 
                  request.cookies.get('auth-token')?.value;
    
    if (!token) {
      return null;
    }

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return {
      id: 'user-1',
      email: 'admin@example.com',
      role: 'admin'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
function hasPermission(user: User, resource: string, action: string): boolean {
  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤—Å–µ, —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —á–∏—Ç–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
  if (user.role === 'admin') {
    return true;
  }
  
  if (user.role === 'trainer' && resource === 'analytics' && action === 'read') {
    return true;
  }
  
  return false;
}

// GET /api/analytics/export - –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
export async function GET(request: NextRequest) {
  try {
    console.log('üì§ API: —ç–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤
    const user = await getAuthenticatedUser(request);
    if (!user) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    if (!hasPermission(user, 'analytics', 'read')) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' },
        { status: 403 }
      );
    }

    const url = new URL(request.url);
    const format = url.searchParams.get('format') || 'csv'; // csv, json, xlsx
    const period = url.searchParams.get('period') || 'month';
    const trainerId = url.searchParams.get('trainerId');

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
    let sessions = [...mockSessions];
    
    if (user.role === 'trainer') {
      sessions = sessions.filter(s => s.trainerId === user.id);
    } else if (trainerId) {
      sessions = sessions.filter(s => s.trainerId === trainerId);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const now = new Date();
    let startDate: Date;
    
    switch (period) {
      case 'day':
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        break;
      case 'week':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case 'month':
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        break;
      case 'year':
        startDate = new Date(now.getFullYear(), 0, 1);
        break;
      default:
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    }

    const periodSessions = sessions.filter(session => {
      const sessionDate = new Date(`${session.date}T${session.startTime}`);
      return sessionDate >= startDate;
    });

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    const exportData = periodSessions.map(session => {
      const trainer = mockTrainers.find(t => t.id === session.trainerId);
      const client = mockClients.find(c => c.id === session.clientId);
      
      return {
        date: session.date,
        startTime: session.startTime,
        endTime: session.endTime,
        trainerName: trainer?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        clientName: client?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        type: session.type,
        status: session.status,
        notes: session.notes || '',
        revenue: session.status === 'completed' ? 2000 : 0
      };
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const completedSessions = periodSessions.filter(s => s.status === 'completed');
    const summary = {
      totalSessions: periodSessions.length,
      completedSessions: completedSessions.length,
      cancelledSessions: periodSessions.filter(s => s.status === 'cancelled').length,
      totalRevenue: completedSessions.length * 2000,
      uniqueClients: new Set(periodSessions.map(s => s.clientId)).size,
      period,
      exportDate: new Date().toISOString()
    };

    if (format === 'csv') {
      // CSV —Ñ–æ—Ä–º–∞—Ç
      const csvHeaders = [
        '–î–∞—Ç–∞',
        '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞',
        '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è', 
        '–¢—Ä–µ–Ω–µ—Ä',
        '–ö–ª–∏–µ–Ω—Ç',
        '–¢–∏–ø',
        '–°—Ç–∞—Ç—É—Å',
        '–ó–∞–º–µ—Ç–∫–∏',
        '–î–æ—Ö–æ–¥'
      ].join(',');

      const csvRows = exportData.map(row => [
        row.date,
        row.startTime,
        row.endTime,
        `"${row.trainerName}"`,
        `"${row.clientName}"`,
        row.type,
        row.status,
        `"${row.notes}"`,
        row.revenue
      ].join(','));

      const csvContent = [
        csvHeaders,
        ...csvRows,
        '',
        '–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:',
        `–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π,${summary.totalSessions}`,
        `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π,${summary.completedSessions}`,
        `–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π,${summary.cancelledSessions}`,
        `–û–±—â–∏–π –¥–æ—Ö–æ–¥,${summary.totalRevenue}`,
        `–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤,${summary.uniqueClients}`,
        `–ü–µ—Ä–∏–æ–¥,${summary.period}`,
        `–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞,${summary.exportDate}`
      ].join('\n');

      return new NextResponse(csvContent, {
        status: 200,
        headers: {
          'Content-Type': 'text/csv; charset=utf-8',
          'Content-Disposition': `attachment; filename="analytics_${period}_${new Date().toISOString().split('T')[0]}.csv"`
        }
      });
    }

    // JSON —Ñ–æ—Ä–º–∞—Ç
    const jsonData = {
      summary,
      sessions: exportData,
      exportInfo: {
        format,
        period,
        trainerId: user.role === 'trainer' ? user.id : trainerId,
        exportedBy: user.email,
        exportDate: new Date().toISOString()
      }
    };

    if (format === 'json') {
      return new NextResponse(JSON.stringify(jsonData, null, 2), {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          'Content-Disposition': `attachment; filename="analytics_${period}_${new Date().toISOString().split('T')[0]}.json"`
        }
      });
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
    return NextResponse.json({
      success: true,
      data: jsonData,
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
    });

  } catch (error: any) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö' },
      { status: 500 }
    );
  }
}
