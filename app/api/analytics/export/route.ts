// app/api/analytics/export/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface User {
  id: string;
  email: string;
  role: 'admin' | 'trainer' | 'client';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getAuthenticatedUser(request: NextRequest): Promise<User | null> {
  try {
    const token = request.headers.get('authorization')?.replace('Bearer ', '') || 
                  request.cookies.get('auth-token')?.value;
    
    if (!token) {
      return null;
    }

    // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return {
      id: 'user-1',
      email: 'admin@example.com',
      role: 'admin'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
function hasPermission(user: User, resource: string, action: string): boolean {
  if (user.role === 'admin') {
    return true;
  }
  
  if (user.role === 'trainer' && resource === 'analytics' && action === 'read') {
    return true;
  }
  
  return false;
}

// POST /api/analytics/export - –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Convex
export async function POST(request: NextRequest) {
  try {
    console.log('üì§ API: —ç–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤
    const user = await getAuthenticatedUser(request);
    if (!user) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    if (!hasPermission(user, 'analytics', 'read')) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' },
        { status: 403 }
      );
    }

    const { type, startDate, endDate, format = "json" } = await request.json();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Convex (–∏—Å–ø–æ–ª—å–∑—É–µ–º convex.query –≤–º–µ—Å—Ç–æ useQuery)
    const exportData = await convex.query("analytics:getExportData", {
      type,
      startDate,
      endDate,
      format,
    });

    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è CSV —Ñ–æ—Ä–º–∞—Ç
    if (format === 'csv') {
      let csvContent = '';
      
      switch (type) {
        case 'users':
          const userHeaders = ['ID', 'Email', '–ò–º—è', '–†–æ–ª—å', '–ê–∫—Ç–∏–≤–µ–Ω', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥'];
          const userRows = exportData.data.map((user: any) => [
            user.id,
            user.email,
            user.name,
            user.role,
            user.isActive ? '–î–∞' : '–ù–µ—Ç',
            user.createdAt,
            user.lastLoginAt || '–ù–∏–∫–æ–≥–¥–∞'
          ]);
          
          csvContent = [
            userHeaders.join(','), 
            ...userRows.map((row: any[]) => row.join(','))
          ].join('\n');
          break;
          
        case 'products':
          const productHeaders = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–¶–µ–Ω–∞', '–û—Å—Ç–∞—Ç–æ–∫', '–ê–∫—Ç–∏–≤–µ–Ω', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'];
          const productRows = exportData.data.map((product: any) => [
            product.id,
            `"${product.name}"`,
            product.category,
            product.price,
            product.stock,
            product.isActive ? '–î–∞' : '–ù–µ—Ç',
            product.createdAt
          ]);
          
          csvContent = [
            productHeaders.join(','), 
            ...productRows.map((row: any[]) => row.join(','))
          ].join('\n');
          break;
          
        case 'orders':
          const orderHeaders = ['ID', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 'Email', '–°—É–º–º–∞', '–°—Ç–∞—Ç—É—Å', '–¢–æ–≤–∞—Ä–æ–≤', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'];
          const orderRows = exportData.data.map((order: any) => [
            order.id,
            order.userId,
            order.userEmail,
            order.totalAmount,
            order.status,
            order.itemsCount,
            order.createdAt
          ]);
          
          csvContent = [
            orderHeaders.join(','), 
            ...orderRows.map((row: any[]) => row.join(','))
          ].join('\n');
          break;
          
        default:
          csvContent = JSON.stringify(exportData.data, null, 2);
      }

      return new NextResponse(csvContent, {
        status: 200,
        headers: {
          'Content-Type': 'text/csv; charset=utf-8',
          'Content-Disposition': `attachment; filename="${type}_export_${new Date().toISOString().split('T')[0]}.csv"`
        }
      });
    }

    return NextResponse.json({
      success: true,
      data: exportData,
    });

  } catch (error: any) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
    return NextResponse.json(
      { success: false, error: error.message || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö' },
      { status: 500 }
    );
  }
}

// GET –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export async function GET(request: NextRequest) {
  const url = new URL(request.url);
  const type = url.searchParams.get('type') || 'analytics';
  const format = url.searchParams.get('format') || 'json';
  const period = url.searchParams.get('period') || 'month';
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Request –æ–±—ä–µ–∫—Ç –¥–ª—è POST
  const requestBody = JSON.stringify({
    type,
    format,
    period,
    startDate: undefined,
    endDate: undefined
  });

  const postRequest = new NextRequest(request.url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      ...Object.fromEntries(request.headers.entries())
    },
    body: requestBody
  });
  
  return POST(postRequest);
}
