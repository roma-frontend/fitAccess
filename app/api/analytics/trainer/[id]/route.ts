// app/api/analytics/trainer/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { mockSessions, mockTrainers, mockClients } from '@/lib/mock-data';

// –¢–∏–ø—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'trainer' | 'client' | 'manager';
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
interface TrainerAnalytics {
  trainer: {
    id: string;
    name: string;
    email: string;
    specialization: string[];
    rating: number;
    experience: number;
  };
  period: {
    type: string;
    start: string;
    end: string;
  };
  summary: {
    totalSessions: number;
    completedSessions: number;
    cancelledSessions: number;
    scheduledSessions: number;
    noShowSessions: number;
    totalRevenue: number;
    uniqueClients: number;
    activeClients: number;
  };
  growth: {
    sessions: number;
    revenue: number;
    clients: number;
  };
  efficiency: {
    completionRate: number;
    cancellationRate: number;
    noShowRate: number;
    avgSessionsPerDay: number;
    avgRevenuePerSession: number;
  };
  distribution: {
    sessionTypes: Record<string, number>;
    weekdayStats: Array<{
      day: string;
      sessions: number;
      completed: number;
      revenue: number;
    }>;
    hourlyStats: Array<{
      hour: number;
      sessions: number;
      completed: number;
    }>;
  };
  topClients: Array<{
    id: string;
    name: string;
    totalSessions: number;
    completedSessions: number;
    revenue: number;
    lastSession: string | null;
  }>;
  recommendations: string[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getAuthenticatedUser(request: NextRequest): Promise<User | null> {
  try {
    const token = request.headers.get('authorization')?.replace('Bearer ', '') || 
                  request.cookies.get('auth-token')?.value;
    
    if (!token) {
      return null;
    }

    return {
      id: 'user-1',
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      email: 'admin@example.com',
      role: 'admin'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
function hasPermission(user: User, resource: string, action: string): boolean {
  if (user.role === 'admin') {
    return true;
  }
  
  if (user.role === 'manager' && resource === 'analytics') {
    return true;
  }
  
  if (user.role === 'trainer' && resource === 'analytics' && action === 'read') {
    return true;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏
function isValidRole(role: string): boolean {
  const validRoles = ['admin', 'trainer', 'client', 'manager'];
  return validRoles.includes(role);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
function canManageUser(userRole: string, targetRole: string): boolean {
  if (userRole === 'admin') return true;
  if (userRole === 'manager' && (targetRole === 'trainer' || targetRole === 'client')) return true;
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function generateRecommendations(
  efficiency: TrainerAnalytics['efficiency'], 
  growth: TrainerAnalytics['growth'], 
  sessionTypes: Record<string, number>
): string[] {
  const recommendations: string[] = [];

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (efficiency.completionRate < 80) {
    recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');
  }

  if (efficiency.cancellationRate > 15) {
    recommendations.push('–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏');
  }

  if (efficiency.noShowRate > 10) {
    recommendations.push('–í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—è–≤–æ–∫');
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–æ—Å—Ç—É
  if (growth.sessions < -10) {
    recommendations.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
  }

  if (growth.revenue < -15) {
    recommendations.push('–î–æ—Ö–æ–¥—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥');
  }

  if (growth.clients < -5) {
    recommendations.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤');
  }

  // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–æ—Å—Ç—É
  if (growth.sessions > 20) {
    recommendations.push('–û—Ç–ª–∏—á–Ω—ã–π —Ä–æ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
  }

  if (growth.revenue > 25) {
    recommendations.push('–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–π —Ä–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏');
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Å—Å–∏–π
  const totalSessions = sessionTypes.personal + sessionTypes.group + sessionTypes.consultation;
  if (totalSessions > 0) {
    const groupPercentage = (sessionTypes.group / totalSessions) * 100;
    const consultationPercentage = (sessionTypes.consultation / totalSessions) * 100;
    const personalPercentage = (sessionTypes.personal / totalSessions) * 100;

    if (groupPercentage < 20 && totalSessions > 10) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    if (consultationPercentage < 10 && totalSessions > 5) {
      recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }

    if (personalPercentage > 80) {
      recommendations.push('–í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —É—Å–ª—É–≥');
    }
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ
  if (efficiency.avgSessionsPerDay < 2) {
    recommendations.push('–ù–∏–∑–∫–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π');
  } else if (efficiency.avgSessionsPerDay > 8) {
    recommendations.push('–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —Å—Ç—Ä–∞–¥–∞–µ—Ç');
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  if (efficiency.completionRate > 95) {
    recommendations.push('–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º —Å –∫–æ–ª–ª–µ–≥–∞–º–∏');
  }

  if (efficiency.cancellationRate < 5) {
    recommendations.push('–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω - –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!');
  }

  // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (recommendations.length === 0) {
    recommendations.push('–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!');
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  return recommendations.slice(0, 6);
}

// GET /api/analytics/trainer/[id] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É
export async function GET(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    // –û–∂–∏–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è params
    const { id: trainerId } = await context.params;

    if (!trainerId) {
      return NextResponse.json(
        { success: false, error: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–∞–≤
    const user = await getAuthenticatedUser(request);
    if (!user) {
      return NextResponse.json(
        { success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      );
    }

    if (!hasPermission(user, 'analytics', 'read')) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' },
        { status: 403 }
      );
    }

    const url = new URL(request.url);
    const period = url.searchParams.get('period') || 'month';

    console.log(`üìä API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainerId}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if (user.role === 'trainer' && user.id !== trainerId) {
      return NextResponse.json(
        { success: false, error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –¥—Ä—É–≥–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 403 }
      );
    }

    // –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞
    const trainer = mockTrainers.find(t => t.id === trainerId);
    if (!trainer) {
      return NextResponse.json(
        { success: false, error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
    const trainerRole = trainer.role;
    if (!isValidRole(trainerRole)) {
      console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞: ${trainerRole}`);
      return NextResponse.json(
        { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (!canManageUser(user.role, trainerRole) && user.id !== trainerId) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞' },
        { status: 403 }
      );
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–Ω–µ—Ä
    if (trainerRole !== 'trainer') {
      return NextResponse.json(
        { success: false, error: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä–æ–º' },
        { status: 400 }
      );
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞
    const trainerSessions = mockSessions.filter(s => s.trainerId === trainerId);
    const trainerClients = mockClients.filter(c => c.trainerId === trainerId);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    const now = new Date();
    let startDate: Date;
    
    switch (period) {
      case 'day':
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        break;
      case 'week':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case 'month':
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        break;
      case 'quarter':
        startDate = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);
        break;
      case 'year':
        startDate = new Date(now.getFullYear(), 0, 1);
        break;
      default:
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const periodSessions = trainerSessions.filter(session => {
      const sessionDate = new Date(`${session.date}T${session.startTime}`);
      return sessionDate >= startDate && sessionDate <= now;
    });

    // –†–∞—Å—á–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    const completedSessions = periodSessions.filter(s => s.status === 'completed');
    const cancelledSessions = periodSessions.filter(s => s.status === 'cancelled');
    const scheduledSessions = periodSessions.filter(s => s.status === 'scheduled');
    const noShowSessions = periodSessions.filter(s => s.status === 'no-show');

    const avgSessionPrice = 2000; // —Ä—É–±–ª–µ–π –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    const totalRevenue = completedSessions.length * avgSessionPrice;
    const uniqueClients = new Set(periodSessions.map(s => s.clientId)).size;

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Å—Å–∏–π
    const sessionTypes = {
      personal: periodSessions.filter(s => s.type === 'personal').length,
      group: periodSessions.filter(s => s.type === 'group').length,
      consultation: periodSessions.filter(s => s.type === 'consultation').length
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const weekdayNames = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    const weekdayStats = Array.from({ length: 7 }, (_, day) => {
      const daySessions = periodSessions.filter(session => {
        const sessionDate = new Date(`${session.date}T${session.startTime}`);
        return sessionDate.getDay() === day;
      });
      
      const dayCompleted = daySessions.filter(s => s.status === 'completed');
      
      return {
        day: weekdayNames[day],
        sessions: daySessions.length,
        completed: dayCompleted.length,
        revenue: dayCompleted.length * avgSessionPrice
      };
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º
    const hourlyStats = Array.from({ length: 24 }, (_, hour) => {
      const hourSessions = periodSessions.filter(session => {
        const startHour = parseInt(session.startTime.split(':')[0]);
        return startHour === hour;
      });

      return {
        hour,
        sessions: hourSessions.length,
        completed: hourSessions.filter(s => s.status === 'completed').length
      };
    }).filter(h => h.sessions > 0);

    // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–∞
    const clientStats = trainerClients.map(client => {
      const clientSessions = periodSessions.filter(s => s.clientId === client.id);
      const completedClientSessions = clientSessions.filter(s => s.status === 'completed');
      
      const lastSessionTime = clientSessions.length > 0 
        ? Math.max(...clientSessions.map(s => new Date(`${s.date}T${s.startTime}`).getTime()))
        : null;
      return {
        id: client.id,
        name: client.name,
        totalSessions: clientSessions.length,
        completedSessions: completedClientSessions.length,
        revenue: completedClientSessions.length * avgSessionPrice,
        lastSession: lastSessionTime ? new Date(lastSessionTime).toISOString() : null
      };
    });

    const topClients = clientStats
      .sort((a, b) => b.completedSessions - a.completedSessions)
      .slice(0, 5);

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º
    const prevStartDate = new Date(startDate);
    switch (period) {
      case 'day':
        prevStartDate.setDate(prevStartDate.getDate() - 1);
        break;
      case 'week':
        prevStartDate.setDate(prevStartDate.getDate() - 7);
        break;
      case 'month':
        prevStartDate.setMonth(prevStartDate.getMonth() - 1);
        break;
      case 'quarter':
        prevStartDate.setMonth(prevStartDate.getMonth() - 3);
        break;
      case 'year':
        prevStartDate.setFullYear(prevStartDate.getFullYear() - 1);
        break;
    }

    const prevPeriodEnd = new Date(startDate);
    const prevPeriodSessions = trainerSessions.filter(session => {
      const sessionDate = new Date(`${session.date}T${session.startTime}`);
      return sessionDate >= prevStartDate && sessionDate < prevPeriodEnd;
    });

    const prevCompletedSessions = prevPeriodSessions.filter(s => s.status === 'completed');
    const prevRevenue = prevCompletedSessions.length * avgSessionPrice;
    const prevUniqueClients = new Set(prevPeriodSessions.map(s => s.clientId)).size;

    // –†–∞—Å—á–µ—Ç —Ä–æ—Å—Ç–∞
    const calculateGrowth = (current: number, previous: number): number => {
      if (previous === 0) return current > 0 ? 100 : 0;
      return Math.round(((current - previous) / previous) * 100);
    };

    const growth = {
      sessions: calculateGrowth(completedSessions.length, prevCompletedSessions.length),
      revenue: calculateGrowth(totalRevenue, prevRevenue),
      clients: calculateGrowth(uniqueClients, prevUniqueClients)
    };

    // –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const totalDays = Math.max(1, Math.ceil((now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24)));
    
    const efficiency = {
      completionRate: periodSessions.length > 0 
        ? Math.round((completedSessions.length / periodSessions.length) * 100)
        : 0,
      cancellationRate: periodSessions.length > 0
        ? Math.round((cancelledSessions.length / periodSessions.length) * 100)
        : 0,
      noShowRate: periodSessions.length > 0
        ? Math.round((noShowSessions.length / periodSessions.length) * 100)
        : 0,
      avgSessionsPerDay: period !== 'day' 
        ? Math.round(completedSessions.length / totalDays * 10) / 10 // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 1 –∑–Ω–∞–∫–∞
        : completedSessions.length,
      avgRevenuePerSession: completedSessions.length > 0 
        ? avgSessionPrice
        : 0
    };

    const trainerAnalytics: TrainerAnalytics = {
      trainer: {
        id: trainer.id,
        name: trainer.name,
        email: trainer.email,
        specialization: trainer.specialization || [],
        rating: trainer.rating || 0,
        experience: trainer.experience || 0
      },
      period: {
        type: period,
        start: startDate.toISOString(),
        end: now.toISOString()
      },
      summary: {
        totalSessions: periodSessions.length,
        completedSessions: completedSessions.length,
        cancelledSessions: cancelledSessions.length,
        scheduledSessions: scheduledSessions.length,
        noShowSessions: noShowSessions.length,
        totalRevenue,
        uniqueClients,
        activeClients: trainerClients.filter(c => c.status === 'active').length
      },
      growth,
      efficiency,
      distribution: {
        sessionTypes,
        weekdayStats: weekdayStats.filter(w => w.sessions > 0),
        hourlyStats
      },
      topClients,
      recommendations: generateRecommendations(efficiency, growth, sessionTypes)
    };

    console.log(`‚úÖ API: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ ${period}`);

    return NextResponse.json({
      success: true,
      data: trainerAnalytics,
      meta: {
        generatedAt: now.toISOString(),
        requestedBy: user.email,
        scope: 'trainer',
        trainerId: trainerId,
        period: period
      }
    });

  } catch (error: any) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

