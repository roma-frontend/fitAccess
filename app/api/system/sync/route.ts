// app/api/system/sync/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';
import { mockTrainers, mockClients, mockSessions } from '@/lib/mock-data';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
interface SyncEntityResult {
  total: number;
  synced: number;
  errors: number;
}

interface SyncResults {
  trainers: SyncEntityResult;
  clients: SyncEntityResult;
  sessions: SyncEntityResult;
  startTime: string;
  endTime: string | null;
  duration: number;
}

interface SyncStatus {
  isRunning: boolean;
  lastSync: string | null;
  nextSync: string | null;
  autoSyncEnabled: boolean;
  syncInterval: number;
  lastResults: {
    success: boolean;
    duration: number;
    totalRecords: number;
    syncedRecords: number;
    errors: number;
  } | null;
}

// POST /api/system/sync - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
export const POST = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'system', action: 'maintenance' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üîÑ API: –∑–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');

        const { user } = req;
        const body = await req.json();
        const { force = false, entities = ['trainers', 'clients', 'sessions'] } = body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const validEntities = ['trainers', 'clients', 'sessions'];
        const entitiesToSync = Array.isArray(entities)
          ? entities.filter((entity: string) => validEntities.includes(entity))
          : validEntities;

        if (entitiesToSync.length === 0) {
          return NextResponse.json(
            { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
            { status: 400 }
          );
        }

        const startTime = new Date().toISOString();

        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const syncResults: SyncResults = {
          trainers: {
            total: 0,
            synced: 0,
            errors: 0
          },
          clients: {
            total: 0,
            synced: 0,
            errors: 0
          },
          sessions: {
            total: 0,
            synced: 0,
            errors: 0
          },
          startTime,
          endTime: null,
          duration: 0
        };

        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const syncDelay = force ? 500 : 1000;
        await new Promise(resolve => setTimeout(resolve, syncDelay));

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
        if (entitiesToSync.includes('trainers')) {
          syncResults.trainers.total = mockTrainers.length;

          for (const trainer of mockTrainers) {
            try {
              // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º–æ–π
              await new Promise(resolve => setTimeout(resolve, 10)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

              if (trainer.status !== 'inactive') {
                syncResults.trainers.synced++;
              }
            } catch (error) {
              syncResults.trainers.errors++;
              console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.id}:`, error);
            }
          }
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if (entitiesToSync.includes('clients')) {
          syncResults.clients.total = mockClients.length;

          for (const client of mockClients) {
            try {
              await new Promise(resolve => setTimeout(resolve, 10));

              if (client.status !== 'inactive') {
                syncResults.clients.synced++;
              }
            } catch (error) {
              syncResults.clients.errors++;
              console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${client.id}:`, error);
            }
          }
        }

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
        if (entitiesToSync.includes('sessions')) {
          syncResults.sessions.total = mockSessions.length;

          for (const session of mockSessions) {
            try {
              await new Promise(resolve => setTimeout(resolve, 5));

              if (session.status !== 'cancelled') {
                syncResults.sessions.synced++;
              }
            } catch (error) {
              syncResults.sessions.errors++;
              console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ ${session.id}:`, error);
            }
          }
        }

        const endTime = new Date().toISOString();
        syncResults.endTime = endTime;
        syncResults.duration = new Date(endTime).getTime() - new Date(startTime).getTime();

        // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const totalRecords = syncResults.trainers.total + syncResults.clients.total + syncResults.sessions.total;
        const totalSynced = syncResults.trainers.synced + syncResults.clients.synced + syncResults.sessions.synced;
        const totalErrors = syncResults.trainers.errors + syncResults.clients.errors + syncResults.sessions.errors;

        console.log(`‚úÖ API: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${syncResults.duration}ms`);
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: $${totalSynced}/$${totalRecords} –∑–∞–ø–∏—Å–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, ${totalErrors} –æ—à–∏–±–æ–∫`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã –≤ –ë–î)
        const lastSyncResults = {
          success: totalErrors === 0,
          duration: syncResults.duration,
          totalRecords,
          syncedRecords: totalSynced,
          errors: totalErrors,
          timestamp: endTime,
          performedBy: user.id,
          entities: entitiesToSync,
          forced: force
        };

        return NextResponse.json({
          success: true,
          data: {
            ...syncResults,
            summary: {
              totalRecords,
              totalSynced,
              totalErrors,
              successRate: totalRecords > 0 ? Math.round((totalSynced / totalRecords) * 100) : 0
            }
          },
          message: totalErrors === 0
            ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            : `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å ${totalErrors} –æ—à–∏–±–∫–∞–º–∏`
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// GET /api/system/sync - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export const GET = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'system', action: 'maintenance' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üìä API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');

        const url = new URL(req.url);
        const includeHistory = url.searchParams.get('includeHistory') === 'true';

        // –ò–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const now = new Date();
        const lastSyncTime = new Date(now.getTime() - 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        const nextSyncTime = new Date(now.getTime() + 5 * 60 * 1000); // —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç

        const syncStatus: SyncStatus = {
          isRunning: false,
          lastSync: lastSyncTime.toISOString(),
          nextSync: nextSyncTime.toISOString(),
          autoSyncEnabled: true,
          syncInterval: 300000, // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
          lastResults: {
            success: true,
            duration: 1250,
            totalRecords: mockTrainers.length + mockClients.length + mockSessions.length,
            syncedRecords: mockTrainers.length + mockClients.length + mockSessions.length - 2,
            errors: 2
          }
        };

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        const systemInfo = {
          version: '1.0.0',
          environment: process.env.NODE_ENV || 'development',
          uptime: process.uptime(),
          memoryUsage: process.memoryUsage(),
          dataStats: {
            trainers: {
              total: mockTrainers.length,
              active: mockTrainers.filter(t => t.status === 'active').length,
              inactive: mockTrainers.filter(t => t.status === 'inactive').length,
              suspended: mockTrainers.filter(t => t.status === 'suspended').length
            },
            clients: {
              total: mockClients.length,
              active: mockClients.filter(c => c.status === 'active').length,
              inactive: mockClients.filter(c => c.status === 'inactive').length,
              suspended: mockClients.filter(c => c.status === 'suspended').length
            },
            sessions: {
              total: mockSessions.length,
              scheduled: mockSessions.filter(s => s.status === 'scheduled').length,
              completed: mockSessions.filter(s => s.status === 'completed').length,
              cancelled: mockSessions.filter(s => s.status === 'cancelled').length,
              noShow: mockSessions.filter(s => s.status === 'no-show').length
            }
          }
        };

        const response: any = {
          success: true,
          data: {
            syncStatus,
            systemInfo
          }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
        if (includeHistory) {
          response.data.syncHistory = [
            {
              id: 'sync_1',
              timestamp: new Date(now.getTime() - 5 * 60 * 1000).toISOString(),
              duration: 1250,
              success: true,
              totalRecords: 150,
              syncedRecords: 148,
              errors: 2,
              performedBy: 'system',
              type: 'auto'
            },
            {
              id: 'sync_2',
              timestamp: new Date(now.getTime() - 10 * 60 * 1000).toISOString(),
              duration: 980,
              success: true,
              totalRecords: 148,
              syncedRecords: 148,
              errors: 0,
              performedBy: 'admin_1',
              type: 'manual'
            },
            {
              id: 'sync_3',
              timestamp: new Date(now.getTime() - 15 * 60 * 1000).toISOString(),
              duration: 2100,
              success: false,
              totalRecords: 145,
              syncedRecords: 120,
              errors: 25,
              performedBy: 'system',
              type: 'auto'
            }
          ];
        }

        return NextResponse.json(response);

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// PUT /api/system/sync - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'system', action: 'maintenance' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('‚öôÔ∏è API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');

        const { user } = req;
        const body = await req.json();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        const allowedSettings = ['autoSyncEnabled', 'syncInterval'];
        const updates: any = {};

        for (const [key, value] of Object.entries(body)) {
          if (allowedSettings.includes(key)) {
            if (key === 'autoSyncEnabled' && typeof value === 'boolean') {
              updates[key] = value;
            } else if (key === 'syncInterval' && typeof value === 'number' && value >= 60000) { // –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
              updates[key] = value;
            } else {
              return NextResponse.json(
                { success: false, error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ${key}` },
                { status: 400 }
              );
            }
          }
        }

        if (Object.keys(updates).length === 0) {
          return NextResponse.json(
            { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
            { status: 400 }
          );
        }

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        console.log(`‚úÖ API: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}:`, updates);

        return NextResponse.json({
          success: true,
          data: updates,
          message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// DELETE /api/system/sync - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'system', action: 'maintenance' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üõë API: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');

        const { user } = req;

        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        console.log(`‚úÖ API: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.id}`);

        return NextResponse.json({
          success: true,
          message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        });

      } catch (error) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};
