// app/api/system/export/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockTrainers, mockClients, mockSessions, Trainer, Client, Session } from '@/lib/mock-data';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
interface ExportData {
  trainers?: Trainer[];
  clients?: Client[];
  sessions?: Session[];
}

interface ExportFilters {
  status?: string;
  role?: string;
  membershipType?: string;
  sessionType?: string;
}

interface DateRange {
  start: string;
  end: string;
}

interface ExportRequest {
  format?: 'json' | 'csv' | 'xlsx';
  entities?: string[];
  dateRange?: DateRange | null;
  filters?: ExportFilters;
  includeMetadata?: boolean;
}

interface ExportMetadata {
  exportedAt: string;
  exportedBy: string;
  format: string;
  entities: string[];
  totalRecords: number;
  filters: ExportFilters & { dateRange?: DateRange | null };
  recordCounts: {
    trainers?: number;
    clients?: number;
    sessions?: number;
  };
}

// POST /api/system/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
export const POST = withPermissions(
  { resource: 'system', action: 'export' },
  async (req: AuthenticatedRequest) => {
    try {
      console.log('üì§ API: —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö');

      const { user } = req;
      const body: ExportRequest = await req.json();
      const { 
        format = 'json',
        entities = ['trainers', 'clients', 'sessions'],
        dateRange = null,
        filters = {},
        includeMetadata = true
      } = body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const validFormats = ['json', 'csv', 'xlsx'];
      if (!validFormats.includes(format)) {
        return NextResponse.json(
          { success: false, error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞' },
          { status: 400 }
        );
      }

      const validEntities = ['trainers', 'clients', 'sessions'];
      const entitiesToExport = entities.filter(entity => validEntities.includes(entity));
      
      if (entitiesToExport.length === 0) {
        return NextResponse.json(
          { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' },
          { status: 400 }
        );
      }

      const exportData: ExportData = {};
      const recordCounts: { [key: string]: number } = {};

      // –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      if (entitiesToExport.includes('trainers')) {
        let trainers = [...mockTrainers];
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
        if (user.role === 'trainer') {
          trainers = trainers.filter(t => t.id === user.id);
        } else if (user.role === 'manager') {
          trainers = trainers.filter(t => t.role !== 'admin' && t.role !== 'super-admin');
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (filters.status) {
          trainers = trainers.filter(t => t.status === filters.status);
        }
        
        if (filters.role) {
          trainers = trainers.filter(t => t.role === filters.role);
        }
        
        exportData.trainers = trainers;
        recordCounts.trainers = trainers.length;
      }

      // –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (entitiesToExport.includes('clients')) {
        let clients = [...mockClients];
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
        if (user.role === 'trainer') {
          clients = clients.filter(c => c.trainerId === user.id);
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (filters.status) {
          clients = clients.filter(c => c.status === filters.status);
        }
        
        if (filters.membershipType) {
          clients = clients.filter(c => c.membershipType === filters.membershipType);
        }
        
        exportData.clients = clients;
        recordCounts.clients = clients.length;
      }

      // –≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–π
      if (entitiesToExport.includes('sessions')) {
        let sessions = [...mockSessions];
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞
        if (user.role === 'trainer') {
          sessions = sessions.filter(s => s.trainerId === user.id);
        } else if (user.role === 'client') {
          sessions = sessions.filter(s => s.clientId === user.id);
        }
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
        if (dateRange) {
          const startDate = new Date(dateRange.start);
          const endDate = new Date(dateRange.end);
          sessions = sessions.filter(s => {
            const sessionDate = new Date(s.date);
            return sessionDate >= startDate && sessionDate <= endDate;
          });
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (filters.status) {
          sessions = sessions.filter(s => s.status === filters.status);
        }
        
        if (filters.sessionType) {
          sessions = sessions.filter(s => s.type === filters.sessionType);
        }
        
        exportData.sessions = sessions;
        recordCounts.sessions = sessions.length;
      }

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const totalRecords = Object.values(recordCounts).reduce((sum, count) => sum + count, 0);
      
      const metadata: ExportMetadata = {
        exportedAt: new Date().toISOString(),
        exportedBy: user.id,
        format,
        entities: entitiesToExport,
        totalRecords,
        filters: {
          ...filters,
          dateRange
        },
        recordCounts
      };

      const exportId = `export_${Date.now()}_${user.id}`;
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ –∏ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      let mimeType = 'application/json';
      let fileExtension = 'json';
      
      switch (format) {
        case 'csv':
          mimeType = 'text/csv';
          fileExtension = 'csv';
          break;
        case 'xlsx':
          mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
          fileExtension = 'xlsx';
          break;
      }

      const downloadUrl = `/api/system/export/${exportId}/download`;
      const fileName = `fitness_export_${new Date().toISOString().split('T')[0]}.${fileExtension}`;

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      console.log(`‚úÖ API: —ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω - ${exportId} (${format}, ${totalRecords} –∑–∞–ø–∏—Å–µ–π)`);

      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—ã–ª–æ –±—ã –≤ –ë–î –∏–ª–∏ –∫—ç—à–µ)
      const exportInfo = {
        id: exportId,
        userId: user.id,
        format,
        entities: entitiesToExport,
        totalRecords,
        createdAt: metadata.exportedAt,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 —á–∞—Å–∞
        data: exportData,
        metadata: includeMetadata ? metadata : undefined
      };

      return NextResponse.json({
        success: true,
        data: {
          exportId,
          format,
          fileName,
          totalRecords,
          recordCounts,
          createdAt: metadata.exportedAt,
          downloadUrl,
          mimeType,
          expiresAt: exportInfo.expiresAt,
          entities: entitiesToExport
        },
        message: '–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 500 }
      );
    }
  }
);

// GET /api/system/export - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
export const GET = withPermissions(
  { resource: 'system', action: 'export' },
  async (req: AuthenticatedRequest) => {
    try {
      console.log('üìã API: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤');

      const { user } = req;
      const url = new URL(req.url);
      const page = parseInt(url.searchParams.get('page') || '1');
      const limit = parseInt(url.searchParams.get('limit') || '10');

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
      const mockExports = [
        {
          id: 'export_1703123456789_trainer_1',
          format: 'xlsx',
          entities: ['clients', 'sessions'],
          totalRecords: 150,
          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
          expiresAt: new Date(Date.now() + 22 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ 22 —á–∞—Å–∞
          status: 'completed',
          downloadUrl: '/api/system/export/export_1703123456789_trainer_1/download'
        },
        {
          id: 'export_1703120000000_trainer_1',
          format: 'json',
          entities: ['trainers'],
          totalRecords: 1,
          createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(), // 5 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
          expiresAt: new Date(Date.now() + 19 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ 19 —á–∞—Å–æ–≤
          status: 'completed',
          downloadUrl: '/api/system/export/export_1703120000000_trainer_1/download'
        }
      ];

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç—Ä–µ–Ω–µ—Ä—ã –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —ç–∫—Å–ø–æ—Ä—Ç—ã)
      let userExports = mockExports;
      if (user.role === 'trainer') {
        userExports = mockExports.filter(exp => exp.id.includes(user.id));
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      const paginatedExports = userExports.slice(startIndex, endIndex);

      return NextResponse.json({
        success: true,
        data: paginatedExports,
        pagination: {
          page,
          limit,
          total: userExports.length,
          pages: Math.ceil(userExports.length / limit)
        }
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤' },
        { status: 500 }
      );
    }
  }
);

// DELETE /api/system/export - –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
export const DELETE = withPermissions(
  { resource: 'system', action: 'export' },
  async (req: AuthenticatedRequest) => {
    try {
      console.log('üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞');

      const { user } = req;
      const url = new URL(req.url);
      const exportId = url.searchParams.get('exportId');

      if (!exportId) {
        return NextResponse.json(
          { success: false, error: 'ID —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
          { status: 400 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —ç–∫—Å–ø–æ—Ä—Ç—ã)
      if (user.role === 'trainer' && !exportId.includes(user.id)) {
        return NextResponse.json(
          { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞' },
          { status: 403 }
        );
      }

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
      console.log(`‚úÖ API: —ç–∫—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω - ${exportId}`);

      return NextResponse.json({
        success: true,
        message: '–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞' },
        { status: 500 }
      );
    }
  }
);
