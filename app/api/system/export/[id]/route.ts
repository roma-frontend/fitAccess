// app/api/system/export/[id]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';

// GET /api/system/export/[id] - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
export const GET = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è handler'–∞
    const params = await context.params;
    const { id: exportId } = params;

    if (!exportId) {
      return NextResponse.json(
        { success: false, error: 'ID —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    const handler = withPermissions(
      { resource: 'system', action: 'export' },
      async (req: AuthenticatedRequest) => {
        try {
          const { user } = req;

          console.log(`üìã API: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ ${exportId}`);

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
          if (user.role === 'trainer' && !exportId.includes(user.id)) {
            return NextResponse.json(
              { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞' },
              { status: 403 }
            );
          }

          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–∏—Å–∫ –≤ –ë–î
          // –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
          const exportInfo = {
            id: exportId,
            format: exportId.includes('xlsx') ? 'xlsx' : 
                    exportId.includes('csv') ? 'csv' : 'json',
            entities: ['trainers', 'clients', 'sessions'],
            totalRecords: 150,
            recordCounts: {
              trainers: user.role === 'trainer' ? 1 : 25,
              clients: user.role === 'trainer' ? 15 : 100,
              sessions: user.role === 'trainer' ? 45 : 200
            },
            createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
            expiresAt: new Date(Date.now() + 22 * 60 * 60 * 1000).toISOString(),
            status: 'completed' as const,
            downloadUrl: `/api/system/export/${exportId}/download`,
            fileSize: '2.5 MB',
            createdBy: {
              id: user.id,
              name: user.name,
              role: user.role
            },
            filters: {
              status: 'active',
              dateRange: {
                start: '2024-01-01',
                end: '2024-12-31'
              }
            },
            metadata: {
              compression: 'gzip',
              encoding: 'utf-8',
              delimiter: exportId.includes('csv') ? ',' : undefined,
              includeHeaders: true,
              includeDeleted: false
            }
          };

          return NextResponse.json({
            success: true,
            data: exportInfo
          });

        } catch (error) {
          console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
          return NextResponse.json(
            { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ' },
            { status: 500 }
          );
        }
      }
    );

    return handler(req, { params: {} });

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' },
      { status: 500 }
    );
  }
};

// DELETE /api/system/export/[id] - –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
export const DELETE = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è handler'–∞
    const params = await context.params;
    const { id: exportId } = params;

    if (!exportId) {
      return NextResponse.json(
        { success: false, error: 'ID —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    const handler = withPermissions(
      { resource: 'system', action: 'delete' },
      async (req: AuthenticatedRequest) => {
        try {
          const { user } = req;

          console.log(`üóëÔ∏è API: —É–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${exportId}`);

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
          if (user.role === 'trainer' && !exportId.includes(user.id)) {
            return NextResponse.json(
              { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞' },
              { status: 403 }
            );
          }

          // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
          console.log(`‚úÖ API: —ç–∫—Å–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω - ${exportId}`);

          return NextResponse.json({
            success: true,
            data: {
              deletedExportId: exportId,
              deletedBy: user.id,
              deletedAt: new Date().toISOString()
            },
            message: '–≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
          });

        } catch (error) {
          console.error('üí• API: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
          return NextResponse.json(
            { success: false, error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞' },
            { status: 500 }
          );
        }
      }
    );

    return handler(req, { params: {} });

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' },
      { status: 500 }
    );
  }
};

// PUT /api/system/export/[id] - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è)
export const PUT = async (
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
): Promise<NextResponse> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è handler'–∞
    const params = await context.params;
    const { id: exportId } = params;

    if (!exportId) {
      return NextResponse.json(
        { success: false, error: 'ID —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    const handler = withPermissions(
      { resource: 'system', action: 'update' },
      async (req: AuthenticatedRequest) => {
        try {
          const { user } = req;
          const body = await req.json();

          console.log(`üîÑ API: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ ${exportId}`);

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
          if (user.role === 'trainer' && !exportId.includes(user.id)) {
            return NextResponse.json(
              { success: false, error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞' },
              { status: 403 }
            );
          }

          const { action, extendHours = 24 } = body;

          if (action === 'extend') {
            const newExpiryDate = new Date();
            newExpiryDate.setHours(newExpiryDate.getHours() + extendHours);

            console.log(`‚úÖ API: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω –¥–æ ${newExpiryDate.toISOString()}`);

            return NextResponse.json({
              success: true,
              data: {
                exportId,
                newExpiresAt: newExpiryDate.toISOString(),
                extendedBy: user.id,
                extendedAt: new Date().toISOString(),
                extendHours
              },
              message: `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ ${extendHours} —á–∞—Å–æ–≤`
            });
          }

          return NextResponse.json(
            { success: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' },
            { status: 400 }
          );

        } catch (error) {
          console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
          return NextResponse.json(
            { success: false, error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞' },
            { status: 500 }
          );
        }
      }
    );

    return handler(req, { params: {} });

  } catch (error) {
    console.error('üí• API: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞' },
      { status: 500 }
    );
  }
};
