// app/api/system/import/validate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockTrainers, mockClients } from '@/lib/mock-data';

// POST /api/system/import/validate - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
export const POST = withPermissions(
  { resource: 'system', action: 'import' },
  async (req: AuthenticatedRequest) => {
    try {
      console.log('üîç API: –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º');

      const body = await req.json();
      const { data, entity } = body;

      if (!data || !entity) {
        return NextResponse.json(
          { success: false, error: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏' },
          { status: 400 }
        );
      }

      const validationResults = {
        valid: 0,
        invalid: 0,
        duplicates: 0,
        errors: [] as Array<{
          row: number;
          field: string;
          value: any;
          error: string;
        }>
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏
      switch (entity) {
        case 'trainers':
          validateTrainers(data, validationResults);
          break;
        case 'clients':
          validateClients(data, validationResults);
          break;
        case 'sessions':
          validateSessions(data, validationResults);
          break;
        default:
          return NextResponse.json(
            { success: false, error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏' },
            { status: 400 }
          );
      }

      const isValid = validationResults.errors.length === 0;

      return NextResponse.json({
        success: isValid,
        data: validationResults,
        message: isValid 
          ? `–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. ${validationResults.valid} –∑–∞–ø–∏—Å–µ–π –≥–æ—Ç–æ–≤—ã –∫ –∏–º–ø–æ—Ä—Ç—É`
          : `–ù–∞–π–¥–µ–Ω–æ ${validationResults.errors.length} –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏`
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 500 }
      );
    }
  }
);

// –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
function validateTrainers(data: any[], results: any) {
  const existingEmails = mockTrainers.map(t => t.email.toLowerCase());
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  data.forEach((trainer, index) => {
    let hasErrors = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!trainer.name) {
      results.errors.push({
        row: index + 1,
        field: 'name',
        value: trainer.name,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
      });
      hasErrors = true;
    }

    if (!trainer.email) {
      results.errors.push({
        row: index + 1,
        field: 'email',
        value: trainer.email,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
      });
      hasErrors = true;
    } else {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ email
      if (!emailRegex.test(trainer.email)) {
        results.errors.push({
          row: index + 1,
          field: 'email',
          value: trainer.email,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        });
        hasErrors = true;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      if (existingEmails.includes(trainer.email.toLowerCase())) {
        results.errors.push({
          row: index + 1,
          field: 'email',
          value: trainer.email,
          error: 'Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ'
        });
        results.duplicates++;
        hasErrors = true;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
    if (trainer.role && !['trainer', 'admin', 'manager'].includes(trainer.role)) {
            results.errors.push({
        row: index + 1,
        field: 'role',
        value: trainer.role,
        error: '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: trainer, admin, manager'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if (trainer.status && !['active', 'inactive', 'suspended'].includes(trainer.status)) {
      results.errors.push({
        row: index + 1,
        field: 'status',
        value: trainer.status,
        error: '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: active, inactive, suspended'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (trainer.phone && !/^[\+]?[1-9][\d]{0,15}$/.test(trainer.phone.replace(/\s/g, ''))) {
      results.errors.push({
        row: index + 1,
        field: 'phone',
        value: trainer.phone,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if (trainer.experience !== undefined && (isNaN(trainer.experience) || trainer.experience < 0)) {
      results.errors.push({
        row: index + 1,
        field: 'experience',
        value: trainer.experience,
        error: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
      });
      hasErrors = true;
    }

    if (trainer.rating !== undefined && (isNaN(trainer.rating) || trainer.rating < 0 || trainer.rating > 5)) {
      results.errors.push({
        row: index + 1,
        field: 'rating',
        value: trainer.rating,
        error: '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 5'
      });
      hasErrors = true;
    }

    if (!hasErrors) {
      results.valid++;
    } else {
      results.invalid++;
    }
  });
}

function validateClients(data: any[], results: any) {
  const existingEmails = [...mockTrainers, ...mockClients].map(u => u.email.toLowerCase());
  const existingTrainerIds = mockTrainers.map(t => t.id);
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  data.forEach((client, index) => {
    let hasErrors = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!client.name) {
      results.errors.push({
        row: index + 1,
        field: 'name',
        value: client.name,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
      });
      hasErrors = true;
    }

    if (!client.email) {
      results.errors.push({
        row: index + 1,
        field: 'email',
        value: client.email,
        error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
      });
      hasErrors = true;
    } else {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ email
      if (!emailRegex.test(client.email)) {
        results.errors.push({
          row: index + 1,
          field: 'email',
          value: client.email,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
        });
        hasErrors = true;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      if (existingEmails.includes(client.email.toLowerCase())) {
        results.errors.push({
          row: index + 1,
          field: 'email',
          value: client.email,
          error: 'Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ'
        });
        results.duplicates++;
        hasErrors = true;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
    if (client.trainerId && !existingTrainerIds.includes(client.trainerId)) {
      results.errors.push({
        row: index + 1,
        field: 'trainerId',
        value: client.trainerId,
        error: '–¢—Ä–µ–Ω–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    if (client.status && !['active', 'inactive', 'suspended'].includes(client.status)) {
      results.errors.push({
        row: index + 1,
        field: 'status',
        value: client.status,
        error: '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: active, inactive, suspended'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
    if (client.membershipType && !['basic', 'premium', 'vip'].includes(client.membershipType)) {
      results.errors.push({
        row: index + 1,
        field: 'membershipType',
        value: client.membershipType,
        error: '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: basic, premium, vip'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if (client.birthDate) {
      const birthDate = new Date(client.birthDate);
      const now = new Date();
      const age = now.getFullYear() - birthDate.getFullYear();
      
      if (isNaN(birthDate.getTime()) || age < 16 || age > 100) {
        results.errors.push({
          row: index + 1,
          field: 'birthDate',
          value: client.birthDate,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 100 –ª–µ—Ç)'
        });
        hasErrors = true;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (client.joinDate) {
      const joinDate = new Date(client.joinDate);
      if (isNaN(joinDate.getTime())) {
        results.errors.push({
          row: index + 1,
          field: 'joinDate',
          value: client.joinDate,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD)'
        });
        hasErrors = true;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (client.phone && !/^[\+]?[1-9][\d]{0,15}$/.test(client.phone.replace(/\s/g, ''))) {
      results.errors.push({
        row: index + 1,
        field: 'phone',
        value: client.phone,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      });
      hasErrors = true;
    }

    if (!hasErrors) {
      results.valid++;
    } else {
      results.invalid++;
    }
  });
}

function validateSessions(data: any[], results: any) {
  const existingTrainerIds = mockTrainers.map(t => t.id);
  const existingClientIds = mockClients.map(c => c.id);

  data.forEach((session, index) => {
    let hasErrors = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['trainerId', 'clientId', 'date', 'startTime', 'endTime'];
    requiredFields.forEach(field => {
      if (!session[field]) {
        results.errors.push({
          row: index + 1,
          field,
          value: session[field],
          error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
        });
        hasErrors = true;
      }
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
    if (session.trainerId && !existingTrainerIds.includes(session.trainerId)) {
      results.errors.push({
        row: index + 1,
        field: 'trainerId',
        value: session.trainerId,
        error: '–¢—Ä–µ–Ω–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    if (session.clientId && !existingClientIds.includes(session.clientId)) {
      results.errors.push({
        row: index + 1,
        field: 'clientId',
        value: session.clientId,
        error: '–ö–ª–∏–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if (session.date) {
      const sessionDate = new Date(session.date);
      if (isNaN(sessionDate.getTime())) {
        results.errors.push({
          row: index + 1,
          field: 'date',
          value: session.date,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD)'
        });
        hasErrors = true;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
    if (session.startTime && !timeRegex.test(session.startTime)) {
      results.errors.push({
        row: index + 1,
        field: 'startTime',
        value: session.startTime,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM)'
      });
      hasErrors = true;
    }

    if (session.endTime && !timeRegex.test(session.endTime)) {
      results.errors.push({
        row: index + 1,
        field: 'endTime',
        value: session.endTime,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM)'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    if (session.startTime && session.endTime && timeRegex.test(session.startTime) && timeRegex.test(session.endTime)) {
      const startMinutes = timeToMinutes(session.startTime);
      const endMinutes = timeToMinutes(session.endTime);
      
      if (endMinutes <= startMinutes) {
        results.errors.push({
          row: index + 1,
          field: 'endTime',
          value: session.endTime,
          error: '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞'
        });
        hasErrors = true;
      }

      if (endMinutes - startMinutes > 180) { // –ú–∞–∫—Å–∏–º—É–º 3 —á–∞—Å–∞
        results.errors.push({
          row: index + 1,
          field: 'endTime',
          value: session.endTime,
          error: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 3 —á–∞—Å–∞'
        });
        hasErrors = true;
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
    if (session.type && !['personal', 'group', 'consultation'].includes(session.type)) {
      results.errors.push({
        row: index + 1,
        field: 'type',
        value: session.type,
        error: '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: personal, group, consultation'
      });
      hasErrors = true;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
    if (session.status && !['scheduled', 'completed', 'cancelled', 'no-show'].includes(session.status)) {
      results.errors.push({
        row: index + 1,
        field: 'status',
        value: session.status,
        error: '–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: scheduled, completed, cancelled, no-show'
      });
      hasErrors = true;
    }

    if (!hasErrors) {
      results.valid++;
    } else {
      results.invalid++;
    }
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã
function timeToMinutes(time: string): number {
  const [hours, minutes] = time.split(':').map(Number);
  return hours * 60 + minutes;
}

