// app/api/system/import/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, type AuthenticatedRequest } from '@/lib/api-middleware';
import { mockTrainers, mockClients, mockSessions, type Trainer, type Client, type Session } from '@/lib/mock-data';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
interface ImportData {
  trainers?: any[];
  clients?: any[];
  sessions?: any[];
}

interface ImportResults {
  trainers: { imported: number; skipped: number; errors: number };
  clients: { imported: number; skipped: number; errors: number };
  sessions: { imported: number; skipped: number; errors: number };
  validationErrors: Array<{
    entity: string;
    record: any;
    error: string;
  }>;
  startTime: string;
  endTime: string | null;
}

interface ValidationError {
  entity: string;
  record: any;
  error: string;
}

// POST /api/system/import - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
export const POST = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'system', action: 'import' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üì• API: –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö');

        const { user } = req;
        
        const body = await req.json();
        const { 
          data,
          mode = 'merge',
          validateOnly = false,
          skipDuplicates = true
        }: {
          data: ImportData;
          mode?: 'merge' | 'replace' | 'append';
          validateOnly?: boolean;
          skipDuplicates?: boolean;
        } = body;

        const importResults: ImportResults = {
          trainers: { imported: 0, skipped: 0, errors: 0 },
          clients: { imported: 0, skipped: 0, errors: 0 },
          sessions: { imported: 0, skipped: 0, errors: 0 },
          validationErrors: [],
          startTime: new Date().toISOString(),
          endTime: null
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!data || typeof data !== 'object') {
          return NextResponse.json(
            { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞' },
            { status: 400 }
          );
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤
        if (data.trainers && Array.isArray(data.trainers)) {
          for (const trainerData of data.trainers) {
            try {
              // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
              if (!trainerData.name || !trainerData.email) {
                const error: ValidationError = {
                  entity: 'trainer',
                  record: trainerData,
                  error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email)'
                };
                importResults.validationErrors.push(error);
                importResults.trainers.errors++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è email
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              if (!emailRegex.test(trainerData.email)) {
                const error: ValidationError = {
                  entity: 'trainer',
                  record: trainerData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
                };
                importResults.validationErrors.push(error);
                importResults.trainers.errors++;
                continue;
              }

              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
              const existingTrainer = mockTrainers.find(t => t.email === trainerData.email);
              if (existingTrainer && skipDuplicates) {
                importResults.trainers.skipped++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
              const validRoles = ['trainer', 'admin', 'manager'];
              if (trainerData.role && !validRoles.includes(trainerData.role)) {
                const error: ValidationError = {
                  entity: 'trainer',
                  record: trainerData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å'
                };
                importResults.validationErrors.push(error);
                importResults.trainers.errors++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
              const validStatuses = ['active', 'inactive', 'suspended'];
              if (trainerData.status && !validStatuses.includes(trainerData.status)) {
                const error: ValidationError = {
                  entity: 'trainer',
                  record: trainerData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
                };
                importResults.validationErrors.push(error);
                importResults.trainers.errors++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
              if (trainerData.workingHours) {
                const workingHoursErrors = validateWorkingHours(trainerData.workingHours);
                if (workingHoursErrors.length > 0) {
                  const error: ValidationError = {
                    entity: 'trainer',
                    record: trainerData,
                    error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${workingHoursErrors.join(', ')}`
                  };
                  importResults.validationErrors.push(error);
                  importResults.trainers.errors++;
                  continue;
                }
              }

              if (!validateOnly) {
                if (existingTrainer && mode === 'merge') {
                  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
                  const trainerIndex = mockTrainers.findIndex(t => t.id === existingTrainer.id);
                  if (trainerIndex !== -1) {
                    mockTrainers[trainerIndex] = {
                      ...existingTrainer,
                      ...trainerData,
                      id: existingTrainer.id,
                      specialization: trainerData.specializations || trainerData.specialization || existingTrainer.specialization,
                      createdAt: existingTrainer.createdAt,
                      createdBy: existingTrainer.createdBy,
                      updatedAt: new Date().toISOString(),
                      updatedBy: user.id
                    };
                  }
                } else {
                  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
                  const newTrainer: Trainer = {
                    id: trainerData.id || `trainer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                    name: trainerData.name,
                    email: trainerData.email,
                    phone: trainerData.phone || '',
                    role: trainerData.role || 'trainer',
                    status: trainerData.status || 'active',
                    specialization: trainerData.specializations || trainerData.specialization || [],
                    experience: trainerData.experience || 0,
                    rating: trainerData.rating || 0,
                    activeClients: trainerData.activeClients || 0,
                    totalSessions: trainerData.totalSessions || 0,
                    hourlyRate: trainerData.hourlyRate || 0,
                    certifications: trainerData.certifications || [],
                    workingHours: trainerData.workingHours || createDefaultWorkingHours(),
                    createdAt: trainerData.createdAt || new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    createdBy: user.id,
                    updatedBy: user.id
                  };
                  mockTrainers.push(newTrainer);
                }
              }

              importResults.trainers.imported++;

            } catch (error: any) {
              const validationError: ValidationError = {
                entity: 'trainer',
                record: trainerData,
                error: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
              };
              importResults.validationErrors.push(validationError);
              importResults.trainers.errors++;
            }
          }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
        if (data.clients && Array.isArray(data.clients)) {
          for (const clientData of data.clients) {
            try {
              // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
              if (!clientData.name || !clientData.email) {
                const error: ValidationError = {
                  entity: 'client',
                  record: clientData,
                  error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email)'
                };
                importResults.validationErrors.push(error);
                importResults.clients.errors++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è email
              const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
              if (!emailRegex.test(clientData.email)) {
                const error: ValidationError = {
                  entity: 'client',
                  record: clientData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
                };
                importResults.validationErrors.push(error);
                importResults.clients.errors++;
                continue;
              }

              // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
              if (clientData.trainerId) {
                const trainer = mockTrainers.find(t => t.id === clientData.trainerId);
                if (!trainer) {
                  const error: ValidationError = {
                    entity: 'client',
                    record: clientData,
                    error: `–¢—Ä–µ–Ω–µ—Ä —Å ID ${clientData.trainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
                  };
                  importResults.validationErrors.push(error);
                  importResults.clients.errors++;
                  continue;
                }
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
              const validStatuses = ['active', 'inactive', 'suspended', 'trial'];
              if (clientData.status && !validStatuses.includes(clientData.status)) {
                const error: ValidationError = {
                  entity: 'client',
                  record: clientData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
                };
                importResults.validationErrors.push(error);
                importResults.clients.errors++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
              const validMembershipTypes = ['basic', 'premium', 'vip'];
              if (clientData.membershipType && !validMembershipTypes.includes(clientData.membershipType)) {
                const error: ValidationError = {
                  entity: 'client',
                  record: clientData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞'
                };
                importResults.validationErrors.push(error);
                importResults.clients.errors++;
                continue;
              }

              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
              const existingClient = mockClients.find(c => c.email === clientData.email);
              if (existingClient && skipDuplicates) {
                importResults.clients.skipped++;
                continue;
              }

              if (!validateOnly) {
                if (existingClient && mode === 'merge') {
                  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                  const clientIndex = mockClients.findIndex(c => c.id === existingClient.id);
                  if (clientIndex !== -1) {
                    mockClients[clientIndex] = {
                      ...existingClient,
                      ...clientData,
                      id: existingClient.id,
                      createdAt: existingClient.createdAt,
                      createdBy: existingClient.createdBy,
                      updatedAt: new Date().toISOString(),
                      updatedBy: user.id
                    };
                  }
                } else {
                  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                  const newClient: Client = {
                    id: clientData.id || `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                    name: clientData.name,
                    email: clientData.email,
                    phone: clientData.phone || '',
                    status: clientData.status || 'active',
                    trainerId: clientData.trainerId || undefined,
                    membershipType: clientData.membershipType || 'basic',
                    joinDate: clientData.joinDate || new Date().toISOString().split('T')[0],
                    totalSessions: clientData.totalSessions || 0,
                    createdAt: clientData.createdAt || new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    createdBy: user.id,
                    updatedBy: user.id
                  };
                  mockClients.push(newClient);
                }
              }

              importResults.clients.imported++;

            } catch (error: any) {
              const validationError: ValidationError = {
                entity: 'client',
                record: clientData,
                error: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
              };
              importResults.validationErrors.push(validationError);
              importResults.clients.errors++;
            }
          }
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–π
        if (data.sessions && Array.isArray(data.sessions)) {
          for (const sessionData of data.sessions) {
            try {
              // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
              if (!sessionData.date || !sessionData.startTime || !sessionData.endTime || 
                  !sessionData.trainerId || !sessionData.clientId) {
                const error: ValidationError = {
                  entity: 'session',
                  record: sessionData,
                  error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (date, startTime, endTime, trainerId, clientId)'
                };
                importResults.validationErrors.push(error);
                importResults.sessions.errors++;
                continue;
              }

              // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
              const trainer = mockTrainers.find(t => t.id === sessionData.trainerId);
              const client = mockClients.find(c => c.id === sessionData.clientId);

              if (!trainer) {
                const error: ValidationError = {
                  entity: 'session',
                  record: sessionData,
                  error: `–¢—Ä–µ–Ω–µ—Ä —Å ID ${sessionData.trainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
                };
                importResults.validationErrors.push(error);
                importResults.sessions.errors++;
                continue;
              }

              if (!client) {
                const error: ValidationError = {
                  entity: 'session',
                  record: sessionData,
                  error: `–ö–ª–∏–µ–Ω—Ç —Å ID ${sessionData.clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
                };
                importResults.validationErrors.push(error);
                importResults.sessions.errors++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
              const validStatuses = ['scheduled', 'completed', 'cancelled', 'no-show'];
              if (sessionData.status && !validStatuses.includes(sessionData.status)) {
                const error: ValidationError = {
                  entity: 'session',
                  record: sessionData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏'
                };
                importResults.validationErrors.push(error);
                importResults.sessions.errors++;
                continue;
              }

              // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
              const validTypes = ['personal', 'group', 'consultation'];
              if (sessionData.type && !validTypes.includes(sessionData.type)) {
                const error: ValidationError = {
                  entity: 'session',
                  record: sessionData,
                  error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏'
                };
                importResults.validationErrors.push(error);
                importResults.sessions.errors++;
                continue;
              }

              // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
              const sessionDateTime = new Date(`${sessionData.date}T${sessionData.startTime}`);
              const sessionEndTime = new Date(`${sessionData.date}T${sessionData.endTime}`);

              const conflictingSession = mockSessions.find(s => 
                s.trainerId === sessionData.trainerId &&
                s.status !== 'cancelled' &&
                s.id !== sessionData.id &&
                s.date === sessionData.date &&
                (
                  (sessionDateTime >= new Date(`${s.date}T${s.startTime}`) && 
                   sessionDateTime < new Date(`${s.date}T${s.endTime}`)) ||
                  (sessionEndTime > new Date(`${s.date}T${s.startTime}`) && 
                   sessionEndTime <= new Date(`${s.date}T${s.endTime}`))
                )
              );

              if (conflictingSession) {
                const error: ValidationError = {
                  entity: 'session',
                  record: sessionData,
                  error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π'
                };
                importResults.validationErrors.push(error);
                importResults.sessions.errors++;
                continue;
              }

              if (!validateOnly) {
                const existingSession = mockSessions.find(s => s.id === sessionData.id);
                
                if (existingSession && mode === 'merge') {
                  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
                  const sessionIndex = mockSessions.findIndex(s => s.id === existingSession.id);
                  if (sessionIndex !== -1) {
                    mockSessions[sessionIndex] = {
                      ...existingSession,
                      ...sessionData,
                      id: existingSession.id,
                      createdAt: existingSession.createdAt,
                      createdBy: existingSession.createdBy,
                      updatedAt: new Date().toISOString(),
                      updatedBy: user.id
                    };
                  }
                } else {
                  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                  const newSession: Session = {
                    id: sessionData.id || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                    trainerId: sessionData.trainerId,
                    clientId: sessionData.clientId,
                    date: sessionData.date,
                    startTime: sessionData.startTime,
                    endTime: sessionData.endTime,
                    type: sessionData.type || 'personal',
                    status: sessionData.status || 'scheduled',
                    notes: sessionData.notes || '',
                    createdAt: sessionData.createdAt || new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    createdBy: user.id,
                    updatedBy: user.id
                  };
                  mockSessions.push(newSession);
                }
              }

              importResults.sessions.imported++;

            } catch (error: any) {
              const validationError: ValidationError = {
                entity: 'session',
                record: sessionData,
                error: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
              };
              importResults.validationErrors.push(validationError);
              importResults.sessions.errors++;
            }
          }
        }

        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
        importResults.endTime = new Date().toISOString();

        const totalProcessed = importResults.trainers.imported + importResults.trainers.skipped + importResults.trainers.errors +
                              importResults.clients.imported + importResults.clients.skipped + importResults.clients.errors +
                              importResults.sessions.imported + importResults.sessions.skipped + importResults.sessions.errors;

        const hasErrors = importResults.validationErrors.length > 0;
        const hasImported = importResults.trainers.imported + importResults.clients.imported + importResults.sessions.imported > 0;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        if (!validateOnly && hasImported) {
          updateCountersAfterImport();
        }

        console.log(`${hasErrors ? '‚ö†Ô∏è' : '‚úÖ'} API: –∏–º–ø–æ—Ä—Ç ${validateOnly ? '–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω' : '–∑–∞–≤–µ—Ä—à–µ–Ω'} - ${totalProcessed} –∑–∞–ø–∏—Å–µ–π`);

        return NextResponse.json({
          success: !hasErrors || validateOnly,
          data: {
            ...importResults,
            summary: {
              totalProcessed,
              totalImported: importResults.trainers.imported + importResults.clients.imported + importResults.sessions.imported,
              totalSkipped: importResults.trainers.skipped + importResults.clients.skipped + importResults.sessions.skipped,
              totalErrors: importResults.trainers.errors + importResults.clients.errors + importResults.sessions.errors,
              mode,
              validateOnly,
              skipDuplicates
            }
          },
          message: validateOnly 
            ? `–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed} –∑–∞–ø–∏—Å–µ–π. ${hasErrors ? `–ù–∞–π–¥–µ–Ω–æ ${importResults.validationErrors.length} –æ—à–∏–±–æ–∫` : '–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`
            : `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed} –∑–∞–ø–∏—Å–µ–π. ${hasErrors ? `–° ${importResults.validationErrors.length} –æ—à–∏–±–∫–∞–º–∏` : '–£—Å–ø–µ—à–Ω–æ'}`
        }, { status: hasErrors && !validateOnly ? 400 : 200 });

      } catch (error: any) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// GET /api/system/import - –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
export const GET = async (
  req: NextRequest,
  context: { params: Promise<Record<string, string>> }
): Promise<NextResponse> => {
  const handler = withPermissions(
    { resource: 'system', action: 'import' },
    async (req: AuthenticatedRequest) => {
      try {
        console.log('üìã API: –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞');

        const url = new URL(req.url);
        const format = url.searchParams.get('format') || 'json';
        const entity = url.searchParams.get('entity') || 'all';

        const templates = {
          trainer: {
            id: 'trainer_example',
            name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
            email: 'ivan.ivanov@example.com',
            phone: '+7 (999) 123-45-67',
            role: 'trainer',
            status: 'active',
            specialization: ['–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '–ö–∞—Ä–¥–∏–æ'],
            experience: 5,
            rating: 4.8,
            activeClients: 15,
            totalSessions: 250,
            hourlyRate: 2500,
            certifications: ['–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É'],
            workingHours: {
              monday: { start: '09:00', end: '18:00', available: true },
              tuesday: { start: '09:00', end: '18:00', available: true },
              wednesday: { start: '09:00', end: '18:00', available: true },
              thursday: { start: '09:00', end: '18:00', available: true },
              friday: { start: '09:00', end: '18:00', available: true },
              saturday: { start: '10:00', end: '16:00', available: true },
              sunday: { start: '10:00', end: '16:00', available: false }
            }
          },
          client: {
            id: 'client_example',
            name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
            email: 'anna.petrova@example.com',
            phone: '+7 (999) 234-56-78',
            status: 'active',
            trainerId: 'trainer_example',
            membershipType: 'premium',
            joinDate: '2024-01-15',
            totalSessions: 20
          },
          session: {
            id: 'session_example',
            trainerId: 'trainer_example',
            clientId: 'client_example',
            date: '2024-01-20',
            startTime: '10:00',
            endTime: '11:00',
            type: 'personal',
            status: 'scheduled',
            notes: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'
          }
        };

        let responseData;

        switch (entity) {
          case 'trainers':
            responseData = { trainers: [templates.trainer] };
            break;
          case 'clients':
            responseData = { clients: [templates.client] };
            break;
          case 'sessions':
            responseData = { sessions: [templates.session] };
            break;
          default:
            responseData = {
              trainers: [templates.trainer],
              clients: [templates.client],
              sessions: [templates.session]
            };
        }

        if (format === 'csv') {
          const csvHeaders = {
            trainers: 'id,name,email,phone,role,status,specialization,experience,rating,activeClients,totalSessions,hourlyRate,certifications,workingHours',
            clients: 'id,name,email,phone,status,trainerId,membershipType,joinDate,totalSessions',
            sessions: 'id,trainerId,clientId,date,startTime,endTime,type,status,notes'
          };

          return new NextResponse(
            entity === 'all' 
              ? Object.values(csvHeaders).join('\n\n')
              : csvHeaders[entity as keyof typeof csvHeaders] || csvHeaders.trainers,
            {
              status: 200,
              headers: {
                'Content-Type': 'text/csv',
                'Content-Disposition': `attachment; filename="import_template_${entity}.csv"`
              }
            }
          );
        }

        return NextResponse.json({
          success: true,
          data: responseData,
          meta: {
            format,
            entity,
            description: '–®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
            instructions: {
              required_fields: {
                trainers: ['name', 'email'],
                clients: ['name', 'email'],
                sessions: ['trainerId', 'clientId', 'date', 'startTime', 'endTime']
              },
              valid_values: {
                trainer_roles: ['trainer', 'admin', 'manager'],
                statuses: ['active', 'inactive', 'suspended', 'trial'],
                membership_types: ['basic', 'premium', 'vip'],
                session_types: ['personal', 'group', 'consultation'],
                session_statuses: ['scheduled', 'completed', 'cancelled', 'no-show']
              },
              date_formats: {
                date: 'YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-20)',
                time: 'HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00)',
                datetime: 'YYYY-MM-DDTHH:MM:SSZ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-20T10:00:00Z)'
              },
              field_descriptions: {
                trainers: {
                  specialization: '–ú–∞—Å—Å–∏–≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Ç—Ä–µ–Ω–µ—Ä–∞',
                  experience: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö',
                  rating: '–†–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 5',
                  activeClients: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                  totalSessions: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π',
                  hourlyRate: '–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —Ä—É–±–ª—è—Ö',
                  certifications: '–ú–∞—Å—Å–∏–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞',
                  workingHours: '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏'
                },
                clients: {
                  trainerId: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                  membershipType: '–¢–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞: basic, premium, vip',
                  joinDate: '–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD',
                  totalSessions: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –∫–ª–∏–µ–Ω—Ç–∞',
                  status: '–°—Ç–∞—Ç—É—Å: active, inactive, suspended, trial'
                },
                sessions: {
                  trainerId: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                  clientId: 'ID –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                  type: '–¢–∏–ø —Å–µ—Å—Å–∏–∏: personal, group, consultation',
                  status: '–°—Ç–∞—Ç—É—Å: scheduled, completed, cancelled, no-show',
                  notes: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏'
                }
              },
              notes: [
                '–í—Å–µ –ø–æ–ª—è —Å email –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏',
                'trainerId –∏ clientId –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ',
                '–í—Ä–µ–º—è —Å–µ—Å—Å–∏–π –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞',
                '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º',
                '–ü–æ–ª–µ specialization –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫',
                '–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (—Ä–µ–∂–∏–º merge) —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã',
                '–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å: active, inactive, suspended, trial',
                'hourlyRate —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä—É–±–ª—è—Ö',
                'certifications - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤',
                'workingHours - –æ–±—ä–µ–∫—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏'
              ]
            }
          }
        });

      } catch (error: any) {
        console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
        return NextResponse.json(
          { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞' },
          { status: 500 }
        );
      }
    }
  );

  return handler(req, { params: {} });
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
function validateWorkingHours(workingHours: any): string[] {
  const errors: string[] = [];
  
  if (!workingHours || typeof workingHours !== 'object') {
    errors.push('workingHours –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    return errors;
  }

  const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;

  days.forEach(day => {
    if (workingHours[day]) {
      const daySchedule = workingHours[day];
      
      if (typeof daySchedule !== 'object') {
        errors.push(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${day} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º`);
        return;
      }

      if (typeof daySchedule.available !== 'boolean') {
        errors.push(`–ü–æ–ª–µ available –¥–ª—è ${day} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º`);
      }

      if (daySchedule.available) {
        if (!daySchedule.start || !timeRegex.test(daySchedule.start)) {
          errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è ${day}`);
        }

        if (!daySchedule.end || !timeRegex.test(daySchedule.end)) {
          errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è ${day}`);
        }

        if (daySchedule.start && daySchedule.end) {
          const start = new Date(`2000-01-01T${daySchedule.start}`);
          const end = new Date(`2000-01-01T${daySchedule.end}`);
          if (start >= end) {
            errors.push(`–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è ${day}`);
          }
        }
      }
    }
  });

  return errors;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function createDefaultWorkingHours(): any {
  return {
    monday: { start: '09:00', end: '18:00', available: true },
    tuesday: { start: '09:00', end: '18:00', available: true },
    wednesday: { start: '09:00', end: '18:00', available: true },
    thursday: { start: '09:00', end: '18:00', available: true },
    friday: { start: '09:00', end: '18:00', available: true },
    saturday: { start: '10:00', end: '16:00', available: true },
    sunday: { start: '10:00', end: '16:00', available: false }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
function updateCountersAfterImport() {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    mockTrainers.forEach(trainer => {
      const activeClientsCount = mockClients.filter(
        client => client.trainerId === trainer.id && client.status === 'active'
      ).length;
      trainer.activeClients = activeClientsCount;

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
      const trainerSessions = mockSessions.filter(
        session => session.trainerId === trainer.id
      ).length;
      trainer.totalSessions = trainerSessions;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–µ—Å—Å–∏–π —É –∫–ª–∏–µ–Ω—Ç–æ–≤
    mockClients.forEach(client => {
      const clientSessions = mockSessions.filter(
        session => session.clientId === client.id && session.status === 'completed'
      ).length;
      client.totalSessions = clientSessions;
    });

    console.log('‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞');
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
  }
}
