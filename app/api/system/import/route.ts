// app/api/system/import/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { withPermissions, AuthenticatedRequest } from '@/lib/api-middleware';
import { mockTrainers, mockClients, mockSessions, Trainer, Client, Session } from '@/lib/mock-data';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
interface ImportData {
  trainers?: any[];
  clients?: any[];
  sessions?: any[];
}

interface ImportResults {
  trainers: { imported: number; skipped: number; errors: number };
  clients: { imported: number; skipped: number; errors: number };
  sessions: { imported: number; skipped: number; errors: number };
  validationErrors: Array<{
    entity: string;
    record: any;
    error: string;
  }>;
  startTime: string;
  endTime: string | null;
}

interface ValidationError {
  entity: string;
  record: any;
  error: string;
}

// POST /api/system/import - –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
export const POST = withPermissions(
  { resource: 'system', action: 'import' },
  async (req: AuthenticatedRequest) => {
    try {
      console.log('üì• API: –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö');

      const { user } = req;
      
      const body = await req.json();
      const { 
        data,
        mode = 'merge',
        validateOnly = false,
        skipDuplicates = true
      }: {
        data: ImportData;
        mode?: 'merge' | 'replace' | 'append';
        validateOnly?: boolean;
        skipDuplicates?: boolean;
      } = body;

      const importResults: ImportResults = {
        trainers: { imported: 0, skipped: 0, errors: 0 },
        clients: { imported: 0, skipped: 0, errors: 0 },
        sessions: { imported: 0, skipped: 0, errors: 0 },
        validationErrors: [],
        startTime: new Date().toISOString(),
        endTime: null
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!data || typeof data !== 'object') {
        return NextResponse.json(
          { success: false, error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞' },
          { status: 400 }
        );
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      if (data.trainers && Array.isArray(data.trainers)) {
        for (const trainerData of data.trainers) {
          try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!trainerData.name || !trainerData.email) {
              const error: ValidationError = {
                entity: 'trainer',
                record: trainerData,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email)'
              };
              importResults.validationErrors.push(error);
              importResults.trainers.errors++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(trainerData.email)) {
              const error: ValidationError = {
                entity: 'trainer',
                record: trainerData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
              };
              importResults.validationErrors.push(error);
              importResults.trainers.errors++;
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const existingTrainer = mockTrainers.find(t => t.email === trainerData.email);
            if (existingTrainer && skipDuplicates) {
              importResults.trainers.skipped++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
            const validRoles = ['trainer', 'admin', 'manager'];
            if (trainerData.role && !validRoles.includes(trainerData.role)) {
              const error: ValidationError = {
                entity: 'trainer',
                record: trainerData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å'
              };
              importResults.validationErrors.push(error);
              importResults.trainers.errors++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
            const validStatuses = ['active', 'inactive', 'suspended'];
            if (trainerData.status && !validStatuses.includes(trainerData.status)) {
              const error: ValidationError = {
                entity: 'trainer',
                record: trainerData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
              };
              importResults.validationErrors.push(error);
              importResults.trainers.errors++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
            if (trainerData.workingHours) {
              const workingHoursErrors = validateWorkingHours(trainerData.workingHours);
              if (workingHoursErrors.length > 0) {
                const error: ValidationError = {
                  entity: 'trainer',
                  record: trainerData,
                  error: `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: ${workingHoursErrors.join(', ')}`
                };
                importResults.validationErrors.push(error);
                importResults.trainers.errors++;
                continue;
              }
            }

            if (!validateOnly) {
              if (existingTrainer && mode === 'merge') {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
                const trainerIndex = mockTrainers.findIndex(t => t.id === existingTrainer.id);
                if (trainerIndex !== -1) {
                  mockTrainers[trainerIndex] = {
                    ...existingTrainer,
                    ...trainerData,
                    id: existingTrainer.id,
                    specialization: trainerData.specializations || trainerData.specialization || existingTrainer.specialization,
                    createdAt: existingTrainer.createdAt,
                    createdBy: existingTrainer.createdBy,
                    updatedAt: new Date().toISOString(),
                    updatedBy: user.id
                  };
                }
              } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
                const newTrainer: Trainer = {
                  id: trainerData.id || `trainer_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                  name: trainerData.name,
                  email: trainerData.email,
                  phone: trainerData.phone || '',
                  role: trainerData.role || 'trainer',
                  status: trainerData.status || 'active',
                  specialization: trainerData.specializations || trainerData.specialization || [],
                  experience: trainerData.experience || 0,
                  rating: trainerData.rating || 0,
                  activeClients: trainerData.activeClients || 0,
                  totalSessions: trainerData.totalSessions || 0,
                  hourlyRate: trainerData.hourlyRate || 0,
                  certifications: trainerData.certifications || [],
                  workingHours: trainerData.workingHours || createDefaultWorkingHours(),
                  createdAt: trainerData.createdAt || new Date().toISOString(),
                  updatedAt: new Date().toISOString(),
                  createdBy: user.id,
                  updatedBy: user.id
                };
                mockTrainers.push(newTrainer);
              }
            }

            importResults.trainers.imported++;

          } catch (error: any) {
            const validationError: ValidationError = {
              entity: 'trainer',
              record: trainerData,
              error: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
            importResults.validationErrors.push(validationError);
            importResults.trainers.errors++;
          }
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (data.clients && Array.isArray(data.clients)) {
        for (const clientData of data.clients) {
          try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!clientData.name || !clientData.email) {
              const error: ValidationError = {
                entity: 'client',
                record: clientData,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (name, email)'
              };
              importResults.validationErrors.push(error);
              importResults.clients.errors++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è email
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(clientData.email)) {
              const error: ValidationError = {
                entity: 'client',
                record: clientData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
              };
              importResults.validationErrors.push(error);
              importResults.clients.errors++;
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
            if (clientData.trainerId) {
              const trainer = mockTrainers.find(t => t.id === clientData.trainerId);
              if (!trainer) {
                const error: ValidationError = {
                  entity: 'client',
                  record: clientData,
                  error: `–¢—Ä–µ–Ω–µ—Ä —Å ID ${clientData.trainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
                };
                importResults.validationErrors.push(error);
                importResults.clients.errors++;
                continue;
              }
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
            const validStatuses = ['active', 'inactive', 'suspended', 'trial'];
            if (clientData.status && !validStatuses.includes(clientData.status)) {
              const error: ValidationError = {
                entity: 'client',
                record: clientData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å'
              };
              importResults.validationErrors.push(error);
              importResults.clients.errors++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —á–ª–µ–Ω—Å—Ç–≤–∞
            const validMembershipTypes = ['basic', 'premium', 'vip'];
            if (clientData.membershipType && !validMembershipTypes.includes(clientData.membershipType)) {
              const error: ValidationError = {
                entity: 'client',
                record: clientData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞'
              };
              importResults.validationErrors.push(error);
              importResults.clients.errors++;
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const existingClient = mockClients.find(c => c.email === clientData.email);
            if (existingClient && skipDuplicates) {
              importResults.clients.skipped++;
              continue;
            }

            if (!validateOnly) {
              if (existingClient && mode === 'merge') {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                const clientIndex = mockClients.findIndex(c => c.id === existingClient.id);
                if (clientIndex !== -1) {
                  mockClients[clientIndex] = {
                    ...existingClient,
                    ...clientData,
                    id: existingClient.id,
                    createdAt: existingClient.createdAt,
                    createdBy: existingClient.createdBy,
                    updatedAt: new Date().toISOString(),
                    updatedBy: user.id
                  };
                }
              } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                const newClient: Client = {
                  id: clientData.id || `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                  name: clientData.name,
                  email: clientData.email,
                  phone: clientData.phone || '',
                  status: clientData.status || 'active',
                  trainerId: clientData.trainerId || undefined,
                  membershipType: clientData.membershipType || 'basic',
                  joinDate: clientData.joinDate || new Date().toISOString().split('T')[0],
                  totalSessions: clientData.totalSessions || 0,
                  createdAt: clientData.createdAt || new Date().toISOString(),
                  updatedAt: new Date().toISOString(),
                  createdBy: user.id,
                  updatedBy: user.id
                };
                mockClients.push(newClient);
              }
            }

            importResults.clients.imported++;

          } catch (error: any) {
            const validationError: ValidationError = {
              entity: 'client',
              record: clientData,
              error: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
            importResults.validationErrors.push(validationError);
            importResults.clients.errors++;
          }
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∏–º–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–π
      if (data.sessions && Array.isArray(data.sessions)) {
        for (const sessionData of data.sessions) {
          try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!sessionData.date || !sessionData.startTime || !sessionData.endTime || 
                !sessionData.trainerId || !sessionData.clientId) {
              const error: ValidationError = {
                entity: 'session',
                record: sessionData,
                error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (date, startTime, endTime, trainerId, clientId)'
              };
              importResults.validationErrors.push(error);
              importResults.sessions.errors++;
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
            const trainer = mockTrainers.find(t => t.id === sessionData.trainerId);
            const client = mockClients.find(c => c.id === sessionData.clientId);

            if (!trainer) {
              const error: ValidationError = {
                entity: 'session',
                record: sessionData,
                error: `–¢—Ä–µ–Ω–µ—Ä —Å ID ${sessionData.trainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
              };
              importResults.validationErrors.push(error);
              importResults.sessions.errors++;
              continue;
            }

            if (!client) {
              const error: ValidationError = {
                entity: 'session',
                record: sessionData,
                error: `–ö–ª–∏–µ–Ω—Ç —Å ID ${sessionData.clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
              };
              importResults.validationErrors.push(error);
              importResults.sessions.errors++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
            const validStatuses = ['scheduled', 'completed', 'cancelled', 'no-show'];
            if (sessionData.status && !validStatuses.includes(sessionData.status)) {
              const error: ValidationError = {
                entity: 'session',
                record: sessionData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏'
              };
              importResults.validationErrors.push(error);
              importResults.sessions.errors++;
              continue;
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–µ—Å—Å–∏–∏
            const validTypes = ['personal', 'group', 'consultation'];
            if (sessionData.type && !validTypes.includes(sessionData.type)) {
              const error: ValidationError = {
                entity: 'session',
                record: sessionData,
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–µ—Å—Å–∏–∏'
              };
              importResults.validationErrors.push(error);
              importResults.sessions.errors++;
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
            const sessionDateTime = new Date(`${sessionData.date}T${sessionData.startTime}`);
            const sessionEndTime = new Date(`${sessionData.date}T${sessionData.endTime}`);

                        const conflictingSession = mockSessions.find(s => 
              s.trainerId === sessionData.trainerId &&
              s.status !== 'cancelled' &&
              s.id !== sessionData.id &&
              s.date === sessionData.date &&
              (
                (sessionDateTime >= new Date(`${s.date}T${s.startTime}`) && 
                 sessionDateTime < new Date(`${s.date}T${s.endTime}`)) ||
                (sessionEndTime > new Date(`${s.date}T${s.startTime}`) && 
                 sessionEndTime <= new Date(`${s.date}T${s.endTime}`))
              )
            );

            if (conflictingSession) {
              const error: ValidationError = {
                entity: 'session',
                record: sessionData,
                error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π'
              };
              importResults.validationErrors.push(error);
              importResults.sessions.errors++;
              continue;
            }

            if (!validateOnly) {
              const existingSession = mockSessions.find(s => s.id === sessionData.id);
              
              if (existingSession && mode === 'merge') {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
                const sessionIndex = mockSessions.findIndex(s => s.id === existingSession.id);
                if (sessionIndex !== -1) {
                  mockSessions[sessionIndex] = {
                    ...existingSession,
                    ...sessionData,
                    id: existingSession.id,
                    createdAt: existingSession.createdAt,
                    createdBy: existingSession.createdBy,
                    updatedAt: new Date().toISOString(),
                    updatedBy: user.id
                  };
                }
              } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                const newSession: Session = {
                  id: sessionData.id || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                  trainerId: sessionData.trainerId,
                  clientId: sessionData.clientId,
                  date: sessionData.date,
                  startTime: sessionData.startTime,
                  endTime: sessionData.endTime,
                  type: sessionData.type || 'personal',
                  status: sessionData.status || 'scheduled',
                  notes: sessionData.notes || '',
                  createdAt: sessionData.createdAt || new Date().toISOString(),
                  updatedAt: new Date().toISOString(),
                  createdBy: user.id,
                  updatedBy: user.id
                };
                mockSessions.push(newSession);
              }
            }

            importResults.sessions.imported++;

          } catch (error: any) {
            const validationError: ValidationError = {
              entity: 'session',
              record: sessionData,
              error: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
            };
            importResults.validationErrors.push(validationError);
            importResults.sessions.errors++;
          }
        }
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞
      importResults.endTime = new Date().toISOString();

      const totalProcessed = importResults.trainers.imported + importResults.trainers.skipped + importResults.trainers.errors +
                            importResults.clients.imported + importResults.clients.skipped + importResults.clients.errors +
                            importResults.sessions.imported + importResults.sessions.skipped + importResults.sessions.errors;

      const hasErrors = importResults.validationErrors.length > 0;
      const hasImported = importResults.trainers.imported + importResults.clients.imported + importResults.sessions.imported > 0;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
      if (!validateOnly && hasImported) {
        updateCountersAfterImport();
      }

      console.log(`${hasErrors ? '‚ö†Ô∏è' : '‚úÖ'} API: –∏–º–ø–æ—Ä—Ç ${validateOnly ? '–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω' : '–∑–∞–≤–µ—Ä—à–µ–Ω'} - ${totalProcessed} –∑–∞–ø–∏—Å–µ–π`);

      return NextResponse.json({
        success: !hasErrors || validateOnly,
        data: {
          ...importResults,
          summary: {
            totalProcessed,
            totalImported: importResults.trainers.imported + importResults.clients.imported + importResults.sessions.imported,
            totalSkipped: importResults.trainers.skipped + importResults.clients.skipped + importResults.sessions.skipped,
            totalErrors: importResults.trainers.errors + importResults.clients.errors + importResults.sessions.errors,
            mode,
            validateOnly,
            skipDuplicates
          }
        },
        message: validateOnly 
          ? `–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed} –∑–∞–ø–∏—Å–µ–π. ${hasErrors ? `–ù–∞–π–¥–µ–Ω–æ ${importResults.validationErrors.length} –æ—à–∏–±–æ–∫` : '–û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`
          : `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed} –∑–∞–ø–∏—Å–µ–π. ${hasErrors ? `–° ${importResults.validationErrors.length} –æ—à–∏–±–∫–∞–º–∏` : '–£—Å–ø–µ—à–Ω–æ'}`
      }, { status: hasErrors && !validateOnly ? 400 : 200 });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ' + (error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') },
        { status: 500 }
      );
    }
  }
);

// GET /api/system/import - –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
export const GET = withPermissions(
  { resource: 'system', action: 'import' },
  async (req: AuthenticatedRequest) => {
    try {
      console.log('üìã API: –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞');

      const url = new URL(req.url);
      const format = url.searchParams.get('format') || 'json';
      const entity = url.searchParams.get('entity') || 'all';

      const templates = {
        trainer: {
          id: 'trainer_example',
          name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
          email: 'ivan.ivanov@example.com',
          phone: '+7 (999) 123-45-67',
          role: 'trainer',
          status: 'active',
          specialization: ['–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '–ö–∞—Ä–¥–∏–æ'],
          experience: 5,
          rating: 4.8,
          activeClients: 15,
          totalSessions: 250,
          hourlyRate: 2500,
          certifications: ['–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É'],
          workingHours: {
            monday: { start: '09:00', end: '18:00', available: true },
            tuesday: { start: '09:00', end: '18:00', available: true },
            wednesday: { start: '09:00', end: '18:00', available: true },
            thursday: { start: '09:00', end: '18:00', available: true },
            friday: { start: '09:00', end: '18:00', available: true },
            saturday: { start: '10:00', end: '16:00', available: true },
            sunday: { start: '10:00', end: '16:00', available: false }
          }
        },
        client: {
          id: 'client_example',
          name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
          email: 'anna.petrova@example.com',
          phone: '+7 (999) 234-56-78',
          status: 'active',
          trainerId: 'trainer_example',
          membershipType: 'premium',
          joinDate: '2024-01-15',
          totalSessions: 20
        },
        session: {
          id: 'session_example',
          trainerId: 'trainer_example',
          clientId: 'client_example',
          date: '2024-01-20',
          startTime: '10:00',
          endTime: '11:00',
          type: 'personal',
          status: 'scheduled',
          notes: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'
        }
      };

      let responseData;

      switch (entity) {
        case 'trainers':
          responseData = { trainers: [templates.trainer] };
          break;
        case 'clients':
          responseData = { clients: [templates.client] };
          break;
        case 'sessions':
          responseData = { sessions: [templates.session] };
          break;
        default:
          responseData = {
            trainers: [templates.trainer],
            clients: [templates.client],
            sessions: [templates.session]
          };
      }

      if (format === 'csv') {
        const csvHeaders = {
          trainers: 'id,name,email,phone,role,status,specialization,experience,rating,activeClients,totalSessions,hourlyRate,certifications,workingHours',
          clients: 'id,name,email,phone,status,trainerId,membershipType,joinDate,totalSessions',
          sessions: 'id,trainerId,clientId,date,startTime,endTime,type,status,notes'
        };

        return new NextResponse(
          entity === 'all' 
            ? Object.values(csvHeaders).join('\n\n')
            : csvHeaders[entity as keyof typeof csvHeaders] || csvHeaders.trainers,
          {
            status: 200,
            headers: {
              'Content-Type': 'text/csv',
              'Content-Disposition': `attachment; filename="import_template_${entity}.csv"`
            }
          }
        );
      }

      return NextResponse.json({
        success: true,
        data: responseData,
        meta: {
          format,
          entity,
          description: '–®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
          instructions: {
            required_fields: {
              trainers: ['name', 'email'],
              clients: ['name', 'email'],
              sessions: ['trainerId', 'clientId', 'date', 'startTime', 'endTime']
            },
            valid_values: {
              trainer_roles: ['trainer', 'admin', 'manager'],
              statuses: ['active', 'inactive', 'suspended', 'trial'],
              membership_types: ['basic', 'premium', 'vip'],
              session_types: ['personal', 'group', 'consultation'],
              session_statuses: ['scheduled', 'completed', 'cancelled', 'no-show']
            },
            date_formats: {
              date: 'YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-20)',
              time: 'HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00)',
              datetime: 'YYYY-MM-DDTHH:MM:SSZ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-01-20T10:00:00Z)'
            },
            field_descriptions: {
              trainers: {
                specialization: '–ú–∞—Å—Å–∏–≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π —Ç—Ä–µ–Ω–µ—Ä–∞',
                experience: '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –≥–æ–¥–∞—Ö',
                rating: '–†–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 5',
                activeClients: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
                totalSessions: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π',
                hourlyRate: '–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —Ä—É–±–ª—è—Ö',
                certifications: '–ú–∞—Å—Å–∏–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞',
                workingHours: '–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏'
              },
              clients: {
                trainerId: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                membershipType: '–¢–∏–ø —á–ª–µ–Ω—Å—Ç–≤–∞: basic, premium, vip',
                joinDate: '–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD',
                totalSessions: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –∫–ª–∏–µ–Ω—Ç–∞',
                status: '–°—Ç–∞—Ç—É—Å: active, inactive, suspended, trial'
              },
              sessions: {
                trainerId: 'ID —Ç—Ä–µ–Ω–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                clientId: 'ID –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
                type: '–¢–∏–ø —Å–µ—Å—Å–∏–∏: personal, group, consultation',
                status: '–°—Ç–∞—Ç—É—Å: scheduled, completed, cancelled, no-show',
                notes: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏'
              }
            },
            notes: [
              '–í—Å–µ –ø–æ–ª—è —Å email –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏',
              'trainerId –∏ clientId –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ',
              '–í—Ä–µ–º—è —Å–µ—Å—Å–∏–π –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞',
              '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º',
              '–ü–æ–ª–µ specialization –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫',
              '–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (—Ä–µ–∂–∏–º merge) —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã',
              '–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å: active, inactive, suspended, trial',
              'hourlyRate —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä—É–±–ª—è—Ö',
              'certifications - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤',
              'workingHours - –æ–±—ä–µ–∫—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏'
            ]
          }
        }
      });

    } catch (error: any) {
      console.error('üí• API: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞' },
        { status: 500 }
      );
    }
  }
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
function validateWorkingHours(workingHours: any): string[] {
  const errors: string[] = [];
  
  if (!workingHours || typeof workingHours !== 'object') {
    errors.push('workingHours –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    return errors;
  }

  const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
  const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;

  days.forEach(day => {
    if (workingHours[day]) {
      const daySchedule = workingHours[day];
      
      if (typeof daySchedule !== 'object') {
        errors.push(`–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${day} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º`);
        return;
      }

      if (typeof daySchedule.available !== 'boolean') {
        errors.push(`–ü–æ–ª–µ available –¥–ª—è ${day} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—É–ª–µ–≤—ã–º`);
      }

      if (daySchedule.available) {
        if (!daySchedule.start || !timeRegex.test(daySchedule.start)) {
          errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è ${day}`);
        }

        if (!daySchedule.end || !timeRegex.test(daySchedule.end)) {
          errors.push(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è ${day}`);
        }

        if (daySchedule.start && daySchedule.end) {
          const start = new Date(`2000-01-01T${daySchedule.start}`);
          const end = new Date(`2000-01-01T${daySchedule.end}`);
          if (start >= end) {
            errors.push(`–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è ${day}`);
          }
        }
      }
    }
  });

  return errors;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function createDefaultWorkingHours(): any {
  return {
        monday: { start: '09:00', end: '18:00', available: true },
    tuesday: { start: '09:00', end: '18:00', available: true },
    wednesday: { start: '09:00', end: '18:00', available: true },
    thursday: { start: '09:00', end: '18:00', available: true },
    friday: { start: '09:00', end: '18:00', available: true },
    saturday: { start: '10:00', end: '16:00', available: true },
    sunday: { start: '10:00', end: '16:00', available: false }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
function updateCountersAfterImport() {
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —É —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    mockTrainers.forEach(trainer => {
      const activeClientsCount = mockClients.filter(
        client => client.trainerId === trainer.id && client.status === 'active'
      ).length;
      trainer.activeClients = activeClientsCount;

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π
      const trainerSessions = mockSessions.filter(
        session => session.trainerId === trainer.id
      ).length;
      trainer.totalSessions = trainerSessions;
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Å–µ—Å—Å–∏–π —É –∫–ª–∏–µ–Ω—Ç–æ–≤
    mockClients.forEach(client => {
      const clientSessions = mockSessions.filter(
        session => session.clientId === client.id && session.status === 'completed'
      ).length;
      client.totalSessions = clientSessions;
    });

    console.log('‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞');
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
export function validateImportFormat(data: any): {
  isValid: boolean;
  errors: string[];
  warnings: string[];
} {
  const errors: string[] = [];
  const warnings: string[] = [];

  if (!data || typeof data !== 'object') {
    errors.push('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    return { isValid: false, errors, warnings };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
  const validKeys = ['trainers', 'clients', 'sessions'];
  const providedKeys = Object.keys(data);
  
  const invalidKeys = providedKeys.filter(key => !validKeys.includes(key));
  if (invalidKeys.length > 0) {
    warnings.push(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã: ${invalidKeys.join(', ')}`);
  }

  if (providedKeys.length === 0) {
    errors.push('–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    return { isValid: false, errors, warnings };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
  providedKeys.forEach(key => {
    if (validKeys.includes(key) && !Array.isArray(data[key])) {
      errors.push(`–ü–æ–ª–µ ${key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º`);
    }
  });

  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞
export function analyzeImportData(data: ImportData): {
  summary: {
    trainers: number;
    clients: number;
    sessions: number;
    total: number;
  };
  potentialIssues: Array<{
    type: 'warning' | 'error';
    message: string;
    count?: number;
  }>;
  recommendations: string[];
} {
  const summary = {
    trainers: data.trainers?.length || 0,
    clients: data.clients?.length || 0,
    sessions: data.sessions?.length || 0,
    total: (data.trainers?.length || 0) + (data.clients?.length || 0) + (data.sessions?.length || 0)
  };

  const potentialIssues: Array<{
    type: 'warning' | 'error';
    message: string;
    count?: number;
  }> = [];

  const recommendations: string[] = [];

  // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  if (data.trainers) {
    const duplicateEmails = findDuplicates(data.trainers, 'email');
    if (duplicateEmails.length > 0) {
      potentialIssues.push({
        type: 'error',
        message: '–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email —É —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
        count: duplicateEmails.length
      });
    }

    const trainersWithoutEmail = data.trainers.filter(t => !t.email).length;
    if (trainersWithoutEmail > 0) {
      potentialIssues.push({
        type: 'error',
        message: '–¢—Ä–µ–Ω–µ—Ä—ã –±–µ–∑ email –∞–¥—Ä–µ—Å–∞',
        count: trainersWithoutEmail
      });
    }

    const trainersWithInvalidRoles = data.trainers.filter(t => 
      t.role && !['trainer', 'admin', 'manager'].includes(t.role)
    ).length;
    if (trainersWithInvalidRoles > 0) {
      potentialIssues.push({
        type: 'warning',
        message: '–¢—Ä–µ–Ω–µ—Ä—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏',
        count: trainersWithInvalidRoles
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
    const trainersWithInvalidWorkingHours = data.trainers.filter(t => {
      if (t.workingHours) {
        return validateWorkingHours(t.workingHours).length > 0;
      }
      return false;
    }).length;
    if (trainersWithInvalidWorkingHours > 0) {
      potentialIssues.push({
        type: 'warning',
        message: '–¢—Ä–µ–Ω–µ—Ä—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ —á–∞—Å–∞–º–∏',
        count: trainersWithInvalidWorkingHours
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
    const trainersWithInvalidRate = data.trainers.filter(t => 
      t.hourlyRate !== undefined && (typeof t.hourlyRate !== 'number' || t.hourlyRate < 0)
    ).length;
    if (trainersWithInvalidRate > 0) {
      potentialIssues.push({
        type: 'warning',
        message: '–¢—Ä–µ–Ω–µ—Ä—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–æ–π',
        count: trainersWithInvalidRate
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤
  if (data.clients) {
    const duplicateClientEmails = findDuplicates(data.clients, 'email');
    if (duplicateClientEmails.length > 0) {
      potentialIssues.push({
        type: 'error',
        message: '–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email —É –∫–ª–∏–µ–Ω—Ç–æ–≤',
        count: duplicateClientEmails.length
      });
    }

    const clientsWithoutEmail = data.clients.filter(c => !c.email).length;
    if (clientsWithoutEmail > 0) {
      potentialIssues.push({
        type: 'error',
        message: '–ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ email –∞–¥—Ä–µ—Å–∞',
        count: clientsWithoutEmail
      });
    }

    const clientsWithInvalidTrainers = data.clients.filter(c => 
      c.trainerId && !data.trainers?.some(t => t.id === c.trainerId) && 
      !mockTrainers.some(t => t.id === c.trainerId)
    ).length;
    if (clientsWithInvalidTrainers > 0) {
      potentialIssues.push({
        type: 'warning',
        message: '–ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏',
        count: clientsWithInvalidTrainers
      });
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π
  if (data.sessions) {
    const sessionsWithoutRequiredFields = data.sessions.filter(s => 
      !s.trainerId || !s.clientId || !s.date || !s.startTime || !s.endTime
    ).length;
    if (sessionsWithoutRequiredFields > 0) {
      potentialIssues.push({
        type: 'error',
        message: '–°–µ—Å—Å–∏–∏ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π',
        count: sessionsWithoutRequiredFields
      });
    }

    const sessionsWithInvalidTrainers = data.sessions.filter(s => 
      s.trainerId && !data.trainers?.some(t => t.id === s.trainerId) && 
      !mockTrainers.some(t => t.id === s.trainerId)
    ).length;
    if (sessionsWithInvalidTrainers > 0) {
      potentialIssues.push({
        type: 'warning',
        message: '–°–µ—Å—Å–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏',
        count: sessionsWithInvalidTrainers
      });
    }

    const sessionsWithInvalidClients = data.sessions.filter(s => 
      s.clientId && !data.clients?.some(c => c.id === s.clientId) && 
      !mockClients.some(c => c.id === s.clientId)
    ).length;
    if (sessionsWithInvalidClients > 0) {
      potentialIssues.push({
        type: 'warning',
        message: '–°–µ—Å—Å–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
        count: sessionsWithInvalidClients
      });
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  if (summary.total > 1000) {
    recommendations.push('–ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—è–º–∏');
  }

  if (potentialIssues.some(issue => issue.type === 'error')) {
    recommendations.push('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º');
    recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "—Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
  }

  if (data.sessions && data.sessions.length > 0) {
    recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–π');
  }

  const duplicateEmails = data.trainers ? findDuplicates(data.trainers, 'email') : [];
  if (duplicateEmails.length > 0 || (data.clients && findDuplicates(data.clients, 'email').length > 0)) {
    recommendations.push('–í–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é "–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "merge"');
  }

  return {
    summary,
    potentialIssues,
    recommendations
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
function findDuplicates(array: any[], field: string): any[] {
  const seen = new Set();
  const duplicates: any[] = [];

  for (const item of array) {
    const value = item[field];
    if (value && seen.has(value)) {
      duplicates.push(item);
    } else if (value) {
      seen.add(value);
    }
  }

  return duplicates;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–º–ø–æ—Ä—Ç–µ
export function generateImportReport(results: ImportResults): {
  summary: string;
  details: Array<{
    category: string;
    imported: number;
    skipped: number;
    errors: number;
    total: number;
    successRate: number;
  }>;
  errorsByCategory: Record<string, number>;
  recommendations: string[];
} {
  const categories = [
    { name: '–¢—Ä–µ–Ω–µ—Ä—ã', key: 'trainers' as const },
    { name: '–ö–ª–∏–µ–Ω—Ç—ã', key: 'clients' as const },
    { name: '–°–µ—Å—Å–∏–∏', key: 'sessions' as const }
  ];

  const details = categories.map(category => {
    const data = results[category.key];
    const total = data.imported + data.skipped + data.errors;
    const successRate = total > 0 ? Math.round((data.imported / total) * 100) : 0;

    return {
      category: category.name,
      imported: data.imported,
      skipped: data.skipped,
      errors: data.errors,
      total,
      successRate
    };
  });

  const totalImported = details.reduce((sum, d) => sum + d.imported, 0);
  const totalErrors = details.reduce((sum, d) => sum + d.errors, 0);
  const totalProcessed = details.reduce((sum, d) => sum + d.total, 0);

  const summary = `–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${totalImported} –∑–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ ${totalProcessed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö (${totalErrors} –æ—à–∏–±–æ–∫)`;

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const errorsByCategory: Record<string, number> = {};
  results.validationErrors.forEach(error => {
    errorsByCategory[error.entity] = (errorsByCategory[error.entity] || 0) + 1;
  });

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const recommendations: string[] = [];
  
  if (totalErrors > 0) {
    recommendations.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
  }

  if (results.trainers.skipped > 0 || results.clients.skipped > 0) {
    recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ "merge" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π');
  }

  const lowSuccessRateCategories = details.filter(d => d.successRate < 80 && d.total > 0);
  if (lowSuccessRateCategories.length > 0) {
    recommendations.push(`–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –¥–ª—è: ${lowSuccessRateCategories.map(c => c.category).join(', ')}`);
  }

  if (totalProcessed > 500) {
    recommendations.push('–ü—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–∞—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—è–º–∏');
  }

  return {
    summary,
    details,
    errorsByCategory,
    recommendations
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
export function normalizeImportData(entity: 'trainer' | 'client' | 'session', data: any): any {
  const normalized = { ...data };

  switch (entity) {
    case 'trainer':
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (normalized.specializations && !normalized.specialization) {
        normalized.specialization = normalized.specializations;
        delete normalized.specializations;
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email
      if (normalized.email) {
        normalized.email = normalized.email.toLowerCase().trim();
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (normalized.phone) {
        normalized.phone = normalized.phone.replace(/[^\d+\-$\s]/g, '');
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
      if (normalized.rating) {
        normalized.rating = Math.min(5, Math.max(0, Number(normalized.rating)));
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
      if (normalized.hourlyRate) {
        normalized.hourlyRate = Math.max(0, Number(normalized.hourlyRate));
      }

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
      if (!normalized.workingHours) {
        normalized.workingHours = createDefaultWorkingHours();
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      if (!normalized.certifications) {
        normalized.certifications = [];
      }
      break;

    case 'client':
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email
      if (normalized.email) {
        normalized.email = normalized.email.toLowerCase().trim();
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (normalized.phone) {
        normalized.phone = normalized.phone.replace(/[^\d+\-$\s]/g, '');
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (normalized.joinDate && typeof normalized.joinDate === 'string') {
        const date = new Date(normalized.joinDate);
        if (!isNaN(date.getTime())) {
          normalized.joinDate = date.toISOString().split('T')[0];
        }
      }
      break;

    case 'session':
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
      if (normalized.startTime) {
        normalized.startTime = normalized.startTime.padStart(5, '0');
      }
      
      if (normalized.endTime) {
        normalized.endTime = normalized.endTime.padStart(5, '0');
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—ã
      if (normalized.date && typeof normalized.date === 'string') {
        const date = new Date(normalized.date);
        if (!isNaN(date.getTime())) {
          normalized.date = date.toISOString().split('T')[0];
        }
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫
      if (normalized.notes) {
        normalized.notes = normalized.notes.trim();
      }
      break;
  }

  return normalized;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
export function createBackup(): {
  trainers: Trainer[];
  clients: Client[];
  sessions: Session[];
  timestamp: string;
} {
  return {
    trainers: JSON.parse(JSON.stringify(mockTrainers)),
    clients: JSON.parse(JSON.stringify(mockClients)),
    sessions: JSON.parse(JSON.stringify(mockSessions)),
    timestamp: new Date().toISOString()
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
export function restoreFromBackup(backup: {
  trainers: Trainer[];
  clients: Client[];
  sessions: Session[];
  timestamp: string;
}): boolean {
  try {
    mockTrainers.length = 0;
    mockTrainers.push(...backup.trainers);
    
    mockClients.length = 0;
    mockClients.push(...backup.clients);
    
    mockSessions.length = 0;
    mockSessions.push(...backup.sessions);
    
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç ${backup.timestamp}`);
    return true;
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
export function validateEntityRelations(data: ImportData): ValidationError[] {
  const errors: ValidationError[] = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –∫–ª–∏–µ–Ω—Ç-—Ç—Ä–µ–Ω–µ—Ä
  if (data.clients) {
    data.clients.forEach(client => {
      if (client.trainerId) {
        const trainerExists = data.trainers?.some(t => t.id === client.trainerId) ||
                             mockTrainers.some(t => t.id === client.trainerId);
        
        if (!trainerExists) {
          errors.push({
            entity: 'client',
            record: client,
            error: `–°–≤—è–∑–∞–Ω–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å ID ${client.trainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
          });
        }
      }
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π —Å–µ—Å—Å–∏—è-—Ç—Ä–µ–Ω–µ—Ä-–∫–ª–∏–µ–Ω—Ç
  if (data.sessions) {
    data.sessions.forEach(session => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
      const trainerExists = data.trainers?.some(t => t.id === session.trainerId) ||
                           mockTrainers.some(t => t.id === session.trainerId);
      
      if (!trainerExists) {
        errors.push({
          entity: 'session',
          record: session,
          error: `–¢—Ä–µ–Ω–µ—Ä —Å ID ${session.trainerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
      const clientExists = data.clients?.some(c => c.id === session.clientId) ||
                          mockClients.some(c => c.id === session.clientId);
      
      if (!clientExists) {
        errors.push({
          entity: 'session',
          record: session,
          error: `–ö–ª–∏–µ–Ω—Ç —Å ID ${session.clientId} –Ω–µ –Ω–∞–π–¥–µ–Ω`
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–µ—Å—Å–∏–∏
      const client = data.clients?.find(c => c.id === session.clientId) ||
                    mockClients.find(c => c.id === session.clientId);
      
      if (client && client.trainerId && client.trainerId !== session.trainerId) {
        errors.push({
          entity: 'session',
          record: session,
          error: `–¢—Ä–µ–Ω–µ—Ä —Å–µ—Å—Å–∏–∏ (${session.trainerId}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–Ω–µ—Ä—É –∫–ª–∏–µ–Ω—Ç–∞ (${client.trainerId})`
        });
      }
    });
  }

  return errors;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
export function validateSpecificFields(entity: 'trainer' | 'client' | 'session', data: any): string[] {
  const errors: string[] = [];

  switch (entity) {
    case 'trainer':
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      if (data.specialization && !Array.isArray(data.specialization)) {
        errors.push('–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—ã—Ç–∞
      if (data.experience !== undefined && (typeof data.experience !== 'number' || data.experience < 0)) {
        errors.push('–û–ø—ã—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
      if (data.rating !== undefined && (typeof data.rating !== 'number' || data.rating < 0 || data.rating > 5)) {
        errors.push('–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 5');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
      if (data.hourlyRate !== undefined && (typeof data.hourlyRate !== 'number' || data.hourlyRate < 0)) {
        errors.push('–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      if (data.certifications && !Array.isArray(data.certifications)) {
        errors.push('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
      if (data.workingHours) {
        errors.push(...validateWorkingHours(data.workingHours));
      }
      break;

    case 'client':
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (data.joinDate && isNaN(new Date(data.joinDate).getTime())) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Å—Å–∏–π
      if (data.totalSessions !== undefined && (typeof data.totalSessions !== 'number' || data.totalSessions < 0)) {
        errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
      }
      break;

    case 'session':
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
      const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (data.startTime && !timeRegex.test(data.startTime)) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HH:MM)');
      }
      
      if (data.endTime && !timeRegex.test(data.endTime)) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HH:MM)');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
      if (data.startTime && data.endTime) {
        const start = new Date(`2000-01-01T${data.startTime}`);
        const end = new Date(`2000-01-01T${data.endTime}`);
        if (start >= end) {
          errors.push('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
        }
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
      if (data.date && isNaN(new Date(data.date).getTime())) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Å–µ—Å—Å–∏–∏');
      }
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã –≤ –±—É–¥—É—â–µ–º –¥–ª—è –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
      if (data.date && data.status === 'scheduled') {
        const sessionDate = new Date(data.date);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        if (sessionDate < today) {
          errors.push('–î–∞—Ç–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º');
        }
      }
      break;
  }

  return errors;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
export async function processBatchImport(
  data: ImportData,
  batchSize: number = 100,
  onProgress?: (progress: { processed: number; total: number; entity: string }) => void
): Promise<ImportResults> {
  const results: ImportResults = {
    trainers: { imported: 0, skipped: 0, errors: 0 },
    clients: { imported: 0, skipped: 0, errors: 0 },
    sessions: { imported: 0, skipped: 0, errors: 0 },
    validationErrors: [],
    startTime: new Date().toISOString(),
    endTime: null
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏
  if (data.trainers && data.trainers.length > 0) {
    const batches = Math.ceil(data.trainers.length / batchSize);
    for (let i = 0; i < batches; i++) {
      const start = i * batchSize;
      const end = Math.min(start + batchSize, data.trainers.length);
      const batch = data.trainers.slice(start, end);
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞
      onProgress?.({
        processed: end,
        total: data.trainers.length,
        entity: 'trainers'
      });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
      await new Promise(resolve => setTimeout(resolve, 10));
    }
  }

  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  if (data.clients && data.clients.length > 0) {
    const batches = Math.ceil(data.clients.length / batchSize);
    for (let i = 0; i < batches; i++) {
      const start = i * batchSize;
      const end = Math.min(start + batchSize, data.clients.length);
      const batch = data.clients.slice(start, end);
      
      onProgress?.({
        processed: end,
        total: data.clients.length,
        entity: 'clients'
      });
      
      await new Promise(resolve => setTimeout(resolve, 10));
    }
  }

  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–π
  if (data.sessions && data.sessions.length > 0) {
    const batches = Math.ceil(data.sessions.length / batchSize);
    for (let i = 0; i < batches; i++) {
      const start = i * batchSize;
      const end = Math.min(start + batchSize, data.sessions.length);
      const batch = data.sessions.slice(start, end);
      
      onProgress?.({
        processed: end,
        total: data.sessions.length,
        entity: 'sessions'
      });
      
      await new Promise(resolve => setTimeout(resolve, 10));
    }
  }
  
  results.endTime = new Date().toISOString();
  return results;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
export function generateImportStatistics(results: ImportResults): {
  overview: {
    totalProcessed: number;
    totalImported: number;
    totalSkipped: number;
    totalErrors: number;
    successRate: number;
    duration: number;
  };
  byEntity: Record<string, {
    processed: number;
    imported: number;
    skipped: number;
    errors: number;
    successRate: number;
  }>;
  errorAnalysis: {
    mostCommonErrors: Array<{ error: string; count: number }>;
    errorsByEntity: Record<string, number>;
  };
} {
  const startTime = new Date(results.startTime);
  const endTime = results.endTime ? new Date(results.endTime) : new Date();
  const duration = endTime.getTime() - startTime.getTime();

  const totalProcessed = Object.values(results).reduce((sum, category) => {
    if (typeof category === 'object' && 'imported' in category) {
      return sum + category.imported + category.skipped + category.errors;
    }
    return sum;
  }, 0);

  const totalImported = results.trainers.imported + results.clients.imported + results.sessions.imported;
  const totalSkipped = results.trainers.skipped + results.clients.skipped + results.sessions.skipped;
  const totalErrors = results.trainers.errors + results.clients.errors + results.sessions.errors;

  const overview = {
    totalProcessed,
    totalImported,
    totalSkipped,
    totalErrors,
    successRate: totalProcessed > 0 ? Math.round((totalImported / totalProcessed) * 100) : 0,
    duration
  };

  const byEntity = {
    trainers: {
      processed: results.trainers.imported + results.trainers.skipped + results.trainers.errors,
      imported: results.trainers.imported,
      skipped: results.trainers.skipped,
      errors: results.trainers.errors,
      successRate: 0
    },
    clients: {
      processed: results.clients.imported + results.clients.skipped + results.clients.errors,
      imported: results.clients.imported,
      skipped: results.clients.skipped,
      errors: results.clients.errors,
      successRate: 0
    },
    sessions: {
      processed: results.sessions.imported + results.sessions.skipped + results.sessions.errors,
      imported: results.sessions.imported,
      skipped: results.sessions.skipped,
      errors: results.sessions.errors,
      successRate: 0
    }
  };

  // –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–æ —Å—É—â–Ω–æ—Å—Ç—è–º
  Object.keys(byEntity).forEach(entity => {
    const data = byEntity[entity as keyof typeof byEntity];
    data.successRate = data.processed > 0 ? Math.round((data.imported / data.processed) * 100) : 0;
  });

  // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
  const errorCounts: Record<string, number> = {};
    const errorsByEntity: Record<string, number> = {};

  results.validationErrors.forEach(error => {
    errorCounts[error.error] = (errorCounts[error.error] || 0) + 1;
    errorsByEntity[error.entity] = (errorsByEntity[error.entity] || 0) + 1;
  });

  const mostCommonErrors = Object.entries(errorCounts)
    .map(([error, count]) => ({ error, count }))
    .sort((a, b) => b.count - a.count)
    .slice(0, 10);

  return {
    overview,
    byEntity,
    errorAnalysis: {
      mostCommonErrors,
      errorsByEntity
    }
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
export function exportDataTemplate(format: 'json' | 'csv' | 'xlsx', entity: 'trainers' | 'clients' | 'sessions' | 'all'): any {
  const templates = {
    trainer: {
      id: 'trainer_001',
      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      email: 'ivan.petrov@gym.com',
      phone: '+7 (999) 123-45-67',
      role: 'trainer',
      status: 'active',
      specialization: ['–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥'],
      experience: 3,
      rating: 4.5,
      activeClients: 12,
      totalSessions: 150,
      hourlyRate: 2500,
      certifications: ['–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É'],
      workingHours: createDefaultWorkingHours(),
      createdAt: '2024-01-01T00:00:00Z'
    },
    client: {
      id: 'client_001',
      name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
      email: 'anna.smirnova@email.com',
      phone: '+7 (999) 234-56-78',
      status: 'active',
      trainerId: 'trainer_001',
      membershipType: 'premium',
      joinDate: '2024-01-15',
      totalSessions: 25,
      createdAt: '2024-01-15T00:00:00Z'
    },
    session: {
      id: 'session_001',
      trainerId: 'trainer_001',
      clientId: 'client_001',
      date: '2024-01-20',
      startTime: '10:00',
      endTime: '11:00',
      type: 'personal',
      status: 'completed',
      notes: '–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –∫–ª–∏–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å',
      createdAt: '2024-01-20T09:00:00Z'
    }
  };

  switch (format) {
    case 'json':
      return entity === 'all' 
        ? { trainers: [templates.trainer], clients: [templates.client], sessions: [templates.session] }
        : { [entity]: [templates[entity.slice(0, -1) as keyof typeof templates]] };
    
    case 'csv':
      const csvData = {
        trainers: 'id,name,email,phone,role,status,specialization,experience,rating,activeClients,totalSessions,hourlyRate,certifications,workingHours,createdAt\n' +
                 'trainer_001,"–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",ivan.petrov@gym.com,"+7 (999) 123-45-67",trainer,active,"–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏;–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥",3,4.5,12,150,2500,"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞;–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É","{""monday"":{""start"":""09:00"",""end"":""18:00"",""available"":true}}",2024-01-01T00:00:00Z',
        clients: 'id,name,email,phone,status,trainerId,membershipType,joinDate,totalSessions,createdAt\n' +
                'client_001,"–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",anna.smirnova@email.com,"+7 (999) 234-56-78",active,trainer_001,premium,2024-01-15,25,2024-01-15T00:00:00Z',
        sessions: 'id,trainerId,clientId,date,startTime,endTime,type,status,notes,createdAt\n' +
                 'session_001,trainer_001,client_001,2024-01-20,10:00,11:00,personal,completed,"–û—Ç–ª–∏—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –∫–ª–∏–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–ª –ø—Ä–æ–≥—Ä–µ—Å—Å",2024-01-20T09:00:00Z'
      };
      return entity === 'all' ? Object.values(csvData).join('\n\n') : csvData[entity];
    
    default:
      return templates;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CSV –¥–∞–Ω–Ω—ã—Ö
export function validateCSVData(csvText: string, entity: 'trainers' | 'clients' | 'sessions'): {
  isValid: boolean;
  data: any[];
  errors: string[];
} {
  const errors: string[] = [];
  const lines = csvText.trim().split('\n');
  
  if (lines.length < 2) {
    errors.push('CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö');
    return { isValid: false, data: [], errors };
  }

  const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
  const requiredHeaders = {
    trainers: ['name', 'email'],
    clients: ['name', 'email'],
    sessions: ['trainerId', 'clientId', 'date', 'startTime', 'endTime']
  };

  const missingHeaders = requiredHeaders[entity].filter(h => !headers.includes(h));
  if (missingHeaders.length > 0) {
    errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: ${missingHeaders.join(', ')}`);
    return { isValid: false, data: [], errors };
  }

  const data: any[] = [];
  
  for (let i = 1; i < lines.length; i++) {
    const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
    
    if (values.length !== headers.length) {
      errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`);
      continue;
    }

    const row: any = {};
    headers.forEach((header, index) => {
      let value = values[index];
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      if (header === 'specialization' || header === 'certifications') {
        try {
          row[header] = value.split(';').filter(v => v.trim());
        } catch {
          row[header] = [value];
        }
      } else if (header === 'workingHours') {
        try {
          row[header] = JSON.parse(value);
        } catch {
          row[header] = createDefaultWorkingHours();
        }
      } else if (['experience', 'rating', 'activeClients', 'totalSessions', 'hourlyRate'].includes(header)) {
        row[header] = Number(value) || 0;
      } else if (['available'].includes(header)) {
        row[header] = value.toLowerCase() === 'true';
      } else {
        row[header] = value;
      }
    });

    data.push(row);
  }

  return {
    isValid: errors.length === 0,
    data,
    errors
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ JSON –≤ CSV
export function convertJSONToCSV(data: any[], entity: 'trainers' | 'clients' | 'sessions'): string {
  if (!data || data.length === 0) {
    return '';
  }

  const headers = Object.keys(data[0]);
  const csvHeaders = headers.join(',');
  
  const csvRows = data.map(row => {
    return headers.map(header => {
      let value = row[header];
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      if (Array.isArray(value)) {
        value = value.join(';');
      } else if (typeof value === 'object' && value !== null) {
        value = JSON.stringify(value);
      } else if (typeof value === 'string' && value.includes(',')) {
        value = `"${value}"`;
      }
      
      return value || '';
    }).join(',');
  });

  return [csvHeaders, ...csvRows].join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∞
export function sanitizeImportData(data: ImportData): ImportData {
  const sanitized: ImportData = {};

  if (data.trainers) {
    sanitized.trainers = data.trainers.map(trainer => ({
      ...trainer,
      email: trainer.email?.toLowerCase().trim(),
      phone: trainer.phone?.replace(/[^\d+\-$\s]/g, ''),
      specialization: Array.isArray(trainer.specialization) ? trainer.specialization : 
                     Array.isArray(trainer.specializations) ? trainer.specializations : [],
      certifications: Array.isArray(trainer.certifications) ? trainer.certifications : [],
      workingHours: trainer.workingHours || createDefaultWorkingHours(),
      hourlyRate: Number(trainer.hourlyRate) || 0,
      experience: Number(trainer.experience) || 0,
      rating: Math.min(5, Math.max(0, Number(trainer.rating) || 0)),
      activeClients: Number(trainer.activeClients) || 0,
      totalSessions: Number(trainer.totalSessions) || 0
    }));
  }

  if (data.clients) {
    sanitized.clients = data.clients.map(client => ({
      ...client,
      email: client.email?.toLowerCase().trim(),
      phone: client.phone?.replace(/[^\d+\-$\s]/g, ''),
      totalSessions: Number(client.totalSessions) || 0,
      joinDate: client.joinDate ? new Date(client.joinDate).toISOString().split('T')[0] : new Date().toISOString().split('T')[0]
    }));
  }

  if (data.sessions) {
    sanitized.sessions = data.sessions.map(session => ({
      ...session,
      date: session.date ? new Date(session.date).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
      startTime: session.startTime?.padStart(5, '0'),
      endTime: session.endTime?.padStart(5, '0'),
      notes: session.notes?.trim() || ''
    }));
  }

  return sanitized;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
export function validateDataIntegrity(): {
  isValid: boolean;
  issues: Array<{
    type: 'warning' | 'error';
    message: string;
    affectedRecords?: number;
  }>;
} {
  const issues: Array<{
    type: 'warning' | 'error';
    message: string;
    affectedRecords?: number;
  }> = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email —É —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  const trainerEmails = mockTrainers.map(t => t.email);
  const duplicateTrainerEmails = trainerEmails.filter((email, index) => trainerEmails.indexOf(email) !== index);
  if (duplicateTrainerEmails.length > 0) {
    issues.push({
      type: 'error',
      message: '–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email —É —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
      affectedRecords: duplicateTrainerEmails.length
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email —É –∫–ª–∏–µ–Ω—Ç–æ–≤
  const clientEmails = mockClients.map(c => c.email);
  const duplicateClientEmails = clientEmails.filter((email, index) => clientEmails.indexOf(email) !== index);
  if (duplicateClientEmails.length > 0) {
    issues.push({
      type: 'error',
      message: '–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email —É –∫–ª–∏–µ–Ω—Ç–æ–≤',
      affectedRecords: duplicateClientEmails.length
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –∫–ª–∏–µ–Ω—Ç-—Ç—Ä–µ–Ω–µ—Ä
  const clientsWithInvalidTrainers = mockClients.filter(client => 
    client.trainerId && !mockTrainers.some(trainer => trainer.id === client.trainerId)
  );
  if (clientsWithInvalidTrainers.length > 0) {
    issues.push({
      type: 'error',
      message: '–ö–ª–∏–µ–Ω—Ç—ã —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏',
      affectedRecords: clientsWithInvalidTrainers.length
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π —Å–µ—Å—Å–∏–π
  const sessionsWithInvalidTrainers = mockSessions.filter(session =>
    !mockTrainers.some(trainer => trainer.id === session.trainerId)
  );
  if (sessionsWithInvalidTrainers.length > 0) {
    issues.push({
      type: 'error',
      message: '–°–µ—Å—Å–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏',
      affectedRecords: sessionsWithInvalidTrainers.length
    });
  }

  const sessionsWithInvalidClients = mockSessions.filter(session =>
    !mockClients.some(client => client.id === session.clientId)
  );
  if (sessionsWithInvalidClients.length > 0) {
    issues.push({
      type: 'error',
      message: '–°–µ—Å—Å–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
      affectedRecords: sessionsWithInvalidClients.length
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–π
  const timeConflicts = mockSessions.filter((session, index) => {
    return mockSessions.some((otherSession, otherIndex) => {
      if (index >= otherIndex || session.trainerId !== otherSession.trainerId || 
          session.date !== otherSession.date || session.status === 'cancelled' || 
          otherSession.status === 'cancelled') {
        return false;
      }

      const sessionStart = new Date(`${session.date}T${session.startTime}`);
      const sessionEnd = new Date(`${session.date}T${session.endTime}`);
      const otherStart = new Date(`${otherSession.date}T${otherSession.startTime}`);
      const otherEnd = new Date(`${otherSession.date}T${otherSession.endTime}`);

      return (sessionStart < otherEnd && sessionEnd > otherStart);
    });
  });

  if (timeConflicts.length > 0) {
    issues.push({
      type: 'warning',
      message: '–ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ—Å—Å–∏—è—Ö',
      affectedRecords: timeConflicts.length
    });
  }

  return {
    isValid: issues.filter(issue => issue.type === 'error').length === 0,
    issues
  };
}



