// app/api/bookings/program/route.ts (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { getAuthFromRequest, createAuthErrorResponse } from '@/lib/universal-auth';

export async function POST(request: NextRequest) {
  try {
    console.log('üîç program-booking: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞');

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const auth = getAuthFromRequest(request);
    console.log('üîê program-booking: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
      authenticated: auth.authenticated,
      system: auth.system,
      userRole: auth.user?.role
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–æ–ª—å
    const authError = createAuthErrorResponse(auth, ['member']);
    if (authError) {
      console.log('‚ùå program-booking: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return NextResponse.json(authError, { status: 401 });
    }

    const user = auth.user!;
    console.log('‚úÖ program-booking: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', user.email);

    const body = await request.json();
    console.log('üìã program-booking: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', body);

    if (!body.programId || body.sessionIndex === undefined) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: programId, sessionIndex' 
        },
        { status: 400 }
      );
    }

    const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
    if (!convexUrl) {
      throw new Error('NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const memberResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'members:getByEmail',
        args: { email: user.email }
      })
    });

    if (!memberResponse.ok) {
      console.error('‚ùå program-booking: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', memberResponse.status);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞');
    }

    const memberData = await memberResponse.json();
    const member = memberData.value;

    if (!member) {
      console.log('‚ùå program-booking: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json(
        { success: false, error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 404 }
      );
    }

    console.log('üë§ program-booking: —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω:', member._id);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    const startDateTime = new Date(`${body.date}T${body.time}:00`);
    const endDateTime = new Date(startDateTime);
    endDateTime.setHours(endDateTime.getHours() + 1);

    console.log('üìÖ program-booking: —Å–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:', {
      memberId: member._id,
      programId: body.programId,
      programTitle: body.programTitle,
      startTime: startDateTime.getTime()
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    const bookingResponse = await fetch(`${convexUrl}/api/mutation`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'programBookings:create',
        args: {
          memberId: member._id,
          programId: body.programId,
          programTitle: body.programTitle,
          sessionIndex: body.sessionIndex,
          sessionType: body.type,
          instructor: body.instructor,
          startTime: startDateTime.getTime(),
          endTime: endDateTime.getTime(),
          duration: 60,
          price: 0,
          notes: `–ü—Ä–æ–≥—Ä–∞–º–º–∞: ${body.programTitle}, –ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: ${body.instructor}`,
        }
      })
    });

    if (!bookingResponse.ok) {
      const errorText = await bookingResponse.text();
      console.error('‚ùå program-booking: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingResponse.status, errorText);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }

    const bookingData = await bookingResponse.json();
    const bookingId = bookingData.value;

    console.log('‚úÖ program-booking: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ–∑–¥–∞–Ω–æ —Å ID:', bookingId);

    return NextResponse.json({
      success: true,
      booking: {
        id: bookingId,
        userId: user.id,
        programId: body.programId,
        programTitle: body.programTitle,
        sessionIndex: body.sessionIndex,
        date: body.date,
        time: body.time,
        instructor: body.instructor,
        type: body.type,
        status: 'confirmed',
        createdAt: new Date().toISOString()
      },
      message: '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      debug: {
        authSystem: auth.system,
        memberId: member._id
      }
    });

  } catch (error) {
    console.error('‚ùå program-booking: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
