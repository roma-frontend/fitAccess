// app/api/bookings/trainer/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —Ç—Ä–µ–Ω–µ—Ä–∞)
import { NextRequest, NextResponse } from 'next/server';
import { getAuthFromRequest, createAuthErrorResponse } from '@/lib/universal-auth';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üîç trainer-booking: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', body);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!body.trainerId || !body.date || !body.time) {
      return NextResponse.json(
        { 
          success: false, 
          error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: trainerId, date, time' 
        },
        { status: 400 }
      );
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const auth = getAuthFromRequest(request);
    const authError = createAuthErrorResponse(auth, ['member']);
    if (authError) {
      return NextResponse.json(authError, { status: 401 });
    }

    const user = auth.user!;
    console.log('‚úÖ trainer-booking: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', user.email);

    const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
    if (!convexUrl) {
      throw new Error('NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ users –≤–º–µ—Å—Ç–æ members
    console.log('üîç trainer-booking: –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –ø–æ email:', user.email);
    
    const userResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'users:getByEmail', // –ò—Å–ø–æ–ª—å–∑—É–µ–º users –≤–º–µ—Å—Ç–æ members
        args: { email: user.email }
      })
    });

    if (!userResponse.ok) {
      const errorText = await userResponse.text();
      console.error('‚ùå trainer-booking: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResponse.status, errorText);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const userData = await userResponse.json();
    const foundUser = userData.value;

    if (!foundUser) {
      console.log('‚ùå trainer-booking: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' },
        { status: 404 }
      );
    }

    console.log('üë§ trainer-booking: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', foundUser._id);

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –¢–†–ï–ù–ï–†–ê
    console.log('üë®‚Äçüíº trainer-booking: –∏—â–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ ID:', body.trainerId);

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º getById
    let trainerResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'trainers:getById',
        args: { id: body.trainerId }
      })
    });

    let trainer = null;
    if (trainerResponse.ok) {
      const trainerData = await trainerResponse.json();
      trainer = trainerData.value;
      console.log('üë®‚Äçüíº trainer-booking: –ø–æ–∏—Å–∫ –ø–æ ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', !!trainer);
    } else {
      console.log('‚ùå trainer-booking: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ ID:', trainerResponse.status);
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ slug
    if (!trainer) {
      console.log('üë®‚Äçüíº trainer-booking: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –ø—Ä–æ–±—É–µ–º –ø–æ slug');
      trainerResponse = await fetch(`${convexUrl}/api/query`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          path: 'trainers:getBySlug',
          args: { slug: body.trainerId }
        })
      });

      if (trainerResponse.ok) {
        const trainerData = await trainerResponse.json();
        trainer = trainerData.value;
        console.log('üë®‚Äçüíº trainer-booking: –ø–æ–∏—Å–∫ –ø–æ slug —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', !!trainer);
      } else {
        console.log('‚ùå trainer-booking: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ slug:', trainerResponse.status);
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ
    if (!trainer) {
      console.log('üë®‚Äçüíº trainer-booking: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ slug, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤');
      const allTrainersResponse = await fetch(`${convexUrl}/api/query`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          path: 'trainers:getAll',
          args: {}
        })
      });

      if (allTrainersResponse.ok) {
        const allTrainersData = await allTrainersResponse.json();
        const allTrainers = allTrainersData.value || [];
        console.log('üë®‚Äçüíº trainer-booking: –≤—Å–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', allTrainers.length);
        
        // –ò—â–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        trainer = allTrainers.find((t: any) => 
          t._id === body.trainerId ||
          t.name?.toLowerCase().replace(/\s+/g, '-') === body.trainerId ||
          t.email === body.trainerId ||
          t.name === body.trainerId
        );
        
        if (trainer) {
          console.log('üë®‚Äçüíº trainer-booking: –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', trainer.name);
        } else {
          console.log('üë®‚Äçüíº trainer-booking: –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã:', allTrainers.map((t: any) => ({
            id: t._id,
            name: t.name,
            slug: t.name?.toLowerCase().replace(/\s+/g, '-')
          })));
        }
      }
    }

    if (!trainer) {
      console.log('‚ùå trainer-booking: —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
      return NextResponse.json(
        { 
          success: false, 
          error: '–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
          debug: {
            searchedId: body.trainerId,
            searchMethods: ['getById', 'getBySlug', 'getAll'],
            suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
          }
        },
        { status: 404 }
      );
    }

    console.log('üë®‚Äçüíº trainer-booking: —Ç—Ä–µ–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', trainer.name, 'ID:', trainer._id);

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const startDateTime = new Date(`${body.date}T${body.time}:00`);
    const endDateTime = new Date(startDateTime);
    endDateTime.setHours(endDateTime.getHours() + 1);

    console.log('üìÖ trainer-booking: —Å–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', {
      userId: foundUser._id,
      trainerId: trainer._id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞
      startTime: startDateTime.getTime(),
      endTime: endDateTime.getTime(),
    });

    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const bookingResponse = await fetch(`${convexUrl}/api/mutation`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'bookings:createForUser', // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        args: {
          userId: foundUser._id,
          trainerId: trainer._id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞
          startTime: startDateTime.getTime(),
          endTime: endDateTime.getTime(),
          duration: 60,
          workoutType: body.type || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
          price: parseFloat(body.price?.replace(/[^\d]/g, '') || '0'),
          notes: body.notes || '',
          status: 'pending',
          createdAt: Date.now(),
          updatedAt: Date.now()
        }
      })
    });

    if (!bookingResponse.ok) {
      const errorText = await bookingResponse.text();
      console.error('‚ùå trainer-booking: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingResponse.status, errorText);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    const bookingData = await bookingResponse.json();
    const bookingId = bookingData.value;

    console.log('‚úÖ trainer-booking: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID:', bookingId);

    return NextResponse.json({
      success: true,
      booking: {
        id: bookingId,
        trainerId: trainer._id,
        trainerName: trainer.name,
        date: body.date,
        time: body.time,
        type: body.type,
        price: body.price,
        status: 'pending',
        createdAt: new Date().toISOString(),
      },
      message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
      debug: {
        authSystem: auth.system,
        userId: foundUser._id,
        trainerId: trainer._id,
        trainerName: trainer.name
      }
    });

  } catch (error) {
    console.error('‚ùå trainer-booking: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    console.log('üîç trainer-booking GET: –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const auth = getAuthFromRequest(request);
    const authError = createAuthErrorResponse(auth, ['member']);
    if (authError) {
      return NextResponse.json(authError, { status: 401 });
    }

    const user = auth.user!;
    console.log('‚úÖ trainer-booking GET: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', user.email);

    const convexUrl = process.env.NEXT_PUBLIC_CONVEX_URL;
    if (!convexUrl) {
      throw new Error('NEXT_PUBLIC_CONVEX_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'users:getByEmail',
        args: { email: user.email }
      })
    });

    if (!userResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    const userData = await userResponse.json();
    const foundUser = userData.value;

    if (!foundUser) {
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const bookingsResponse = await fetch(`${convexUrl}/api/query`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        path: 'bookings:getByUser',
        args: { userId: foundUser._id }
      })
    });

    if (!bookingsResponse.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π');
    }

    const bookingsData = await bookingsResponse.json();
    const bookings = bookingsData.value || [];

    console.log('‚úÖ trainer-booking GET: –ø–æ–ª—É—á–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookings.length);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const bookingsWithTrainers = await Promise.all(
      bookings.map(async (booking: any) => {
        try {
          const trainerResponse = await fetch(`${convexUrl}/api/query`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              path: 'trainers:getById',
              args: { id: booking.trainerId }
            })
          });

          let trainerName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä';
          if (trainerResponse.ok) {
            const trainerData = await trainerResponse.json();
            const trainer = trainerData.value;
            if (trainer) {
              trainerName = trainer.name;
            }
          }
          
          return {
            id: booking._id,
            trainerId: booking.trainerId,
            trainerName: trainerName,
            date: new Date(booking.startTime).toISOString().split('T')[0],
            time: new Date(booking.startTime).toLocaleTimeString('ru-RU', { 
              hour: '2-digit', 
              minute: '2-digit' 
            }),
            type: booking.workoutType,
            price: booking.price,
            status: booking.status,
            createdAt: new Date(booking.createdAt).toISOString(),
          };
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
          return {
            id: booking._id,
            trainerId: booking.trainerId,
            trainerName: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
            date: new Date(booking.startTime).toISOString().split('T')[0],
            time: new Date(booking.startTime).toLocaleTimeString('ru-RU', { 
              hour: '2-digit', 
              minute: '2-digit' 
            }),
            type: booking.workoutType,
            price: booking.price,
            status: booking.status,
            createdAt: new Date(booking.createdAt).toISOString(),
          };
        }
      })
    );

    return NextResponse.json({
      success: true,
      bookings: bookingsWithTrainers,
      debug: {
        authSystem: auth.system,
        bookingsCount: bookings.length
      }
    });

  } catch (error) {
    console.error('‚ùå trainer-booking GET: –æ—à–∏–±–∫–∞:', error);
    
    return NextResponse.json(
      { 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
