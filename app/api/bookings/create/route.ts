// app/api/bookings/create/route.ts (–Ω–æ–≤—ã–π —Ñ–∞–π–ª)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    console.log('üìÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');

    const body = await request.json();
    const {
      trainerId,
      trainerName,
      service,
      date,
      time,
      client,
      totalPrice
    } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!trainerId || !service || !date || !time || !client.name || !client.phone) {
      return NextResponse.json(
        { error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
    const existingBookings = await convex.query("bookings:getByDateAndTime", {
      trainerId,
      date,
      time
    });

    if (existingBookings && existingBookings.length > 0) {
      return NextResponse.json(
        { error: '–≠—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç' },
        { status: 409 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const bookingId = await convex.mutation("bookings:create", {
      trainerId,
      trainerName,
      serviceName: service.name,
      servicePrice: service.price,
      serviceDuration: service.duration,
      date,
      time,
      clientName: client.name,
      clientPhone: client.phone,
      clientEmail: client.email || '',
      clientNotes: client.notes || '',
      status: 'confirmed',
      createdAt: Date.now()
    });

    console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', bookingId);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
    // await sendBookingConfirmation(client.email, bookingData);
    // await notifyTrainer(trainerId, bookingData);

    return NextResponse.json({
      success: true,
      bookingId,
      message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}
