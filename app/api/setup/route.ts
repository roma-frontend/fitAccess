// app/api/setup/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { NextRequest, NextResponse } from 'next/server';
import { createToken } from '@/lib/auth';
import { ConvexHttpClient } from 'convex/browser';

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ
    const users = await convex.query('users:getAll');
    const hasAdmins = users.some((user: any) => user.role === "admin");
    
    if (hasAdmins) {
      console.log("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      return NextResponse.json(
        { error: 'Administrator already exists' },
        { status: 403 }
      );
    }
    
    const body = await request.json();
    const { name, email, password, photoUrl, faceDescriptor } = body;
    
    console.log("üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:", { name, email, hasPassword: !!password });
    
    if (!name || !password || !photoUrl || !faceDescriptor) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }
    
    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const userId = await convex.mutation('users:createAdmin', {
      name,
      email,
      password,
      photoUrl,
      faceDescriptor,
    });
    
    console.log("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —Å ID:", userId);
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = await createToken({
      userId,
      name,
      email: email || '',
      role: 'admin',
    });
    
    console.log("üé´ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω");
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
    const response = NextResponse.json({ 
      success: true,
      user: { userId, name, email, role: 'admin' }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookies —á–µ—Ä–µ–∑ NextResponse
    response.cookies.set('auth_token', token, {
      httpOnly: true,
      path: '/',
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 8, // 8 —á–∞—Å–æ–≤
      sameSite: 'strict',
    });
    
    response.cookies.set('user_role', 'admin', {
      path: '/',
      secure: process.env.NODE_ENV === 'production',
      maxAge: 60 * 60 * 8,
      sameSite: 'strict',
    });
    
    console.log("üç™ Cookies —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
    
    return response;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
    return NextResponse.json(
      { error: 'Setup failed: ' + (error instanceof Error ? error.message : 'Unknown error') },
      { status: 500 }
    );
  }
}
