// app/api/orders/route.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function GET(request: NextRequest) {
  try {
    console.log("üîç API: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const authResponse = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/auth/check`, {
      headers: {
        'Cookie': request.headers.get('cookie') || '',
      },
    });
    
    const authData = await authResponse.json();
    console.log("üë§ API: –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", { authenticated: authData.authenticated, userId: authData.user?.id });
    
    if (!authData.authenticated) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let orders = [];
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ member
    if (authData.user.role === 'member' || authData.user.role === 'client') {
      try {
        orders = await convex.query("orders:getByMember", { 
          memberId: authData.user.id 
        });
        console.log("üì¶ API: –ó–∞–∫–∞–∑—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞–π–¥–µ–Ω—ã:", orders.length);
      } catch (error) {
        console.log("‚ö†Ô∏è API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ user");
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ member, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ user
        orders = await convex.query("orders:getByUser", { 
          userId: authData.user.id 
        });
        console.log("üì¶ API: –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã:", orders.length);
      }
    } else {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫ user
      orders = await convex.query("orders:getByUser", { 
        userId: authData.user.id 
      });
      console.log("üì¶ API: –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã:", orders.length);
    }

    return NextResponse.json({
      success: true,
      orders: orders || []
    });

  } catch (error) {
    console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
