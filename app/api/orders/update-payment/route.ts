// app/api/orders/update-payment/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

export async function POST(request: NextRequest) {
  try {
    const { paymentIntentId, status, paymentStatus, paymentId, paidAt } = await request.json();

    console.log('üîÑ Updating order payment status:', { paymentIntentId, status, paymentStatus });

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    const order = await convex.query("orders:getByPaymentIntentId", { 
      paymentIntentId 
    });

    if (!order) {
      return NextResponse.json(
        { error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    await convex.mutation("orders:updateByPaymentIntentId", {
      paymentIntentId,
      status,
      paymentStatus,
      paymentId,
      paidAt,
    });

    console.log('‚úÖ Order updated successfully');

    return NextResponse.json({
      success: true,
      order,
    });

  } catch (error) {
    console.error('‚ùå Error updating order:', error);
    
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
      },
      { status: 500 }
    );
  }
}
