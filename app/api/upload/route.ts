// app/api/upload/route.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å ml_default)
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';

export async function POST(request: NextRequest) {
  try {
    console.log('üìÅ POST /api/upload - –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value;
    if (!sessionId) {
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    if (!sessionData) {
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    if (!['super-admin', 'admin', 'manager'].includes(sessionData.user.role)) {
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const type = formData.get('type') as string || 'profile';

    if (!file) {
      return NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    if (!allowedTypes.includes(file.type)) {
      return NextResponse.json({
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP, GIF'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    const maxSize = 10 * 1024 * 1024;
    if (file.size > maxSize) {
      return NextResponse.json({
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB'
      }, { status: 400 });
    }

    console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary...');

    const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME || 'dgbtipi5o';
    
    let uploadPreset = 'ml_default';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ preset'—ã –¥–æ—Å—Ç—É–ø–Ω—ã
    console.log('üîç –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π preset...');

    const cloudinaryFormData = new FormData();
    cloudinaryFormData.append('file', file);
    cloudinaryFormData.append('upload_preset', uploadPreset);
    cloudinaryFormData.append('folder', 'user-avatars');

    const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Cloudinary:', {
      url: cloudinaryUrl,
      preset: uploadPreset,
      folder: 'user-avatars'
    });

    try {
      const cloudinaryResponse = await fetch(cloudinaryUrl, {
        method: 'POST',
        body: cloudinaryFormData,
      });

      const responseText = await cloudinaryResponse.text();
      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Cloudinary:', {
        status: cloudinaryResponse.status,
        ok: cloudinaryResponse.ok,
        response: responseText.substring(0, 500)
      });

      if (!cloudinaryResponse.ok) {
        // –ï—Å–ª–∏ ml_default –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ preset
        console.log('‚ö†Ô∏è ml_default –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –±–µ–∑ preset...');
        
        const fallbackFormData = new FormData();
        fallbackFormData.append('file', file);
        fallbackFormData.append('folder', 'user-avatars');
        
        // –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á–∏ –¥–ª—è signed upload
        const apiKey = process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY;
        const timestamp = Math.round(Date.now() / 1000);
        
        if (apiKey) {
          fallbackFormData.append('api_key', apiKey);
          fallbackFormData.append('timestamp', timestamp.toString());
      
        }

        return NextResponse.json({
          error: 'Upload preset –Ω–µ –Ω–∞–π–¥–µ–Ω',
          details: `Preset "${uploadPreset}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∞–∫–∫–∞—É–Ω—Ç–µ ${cloudName}`,
          suggestion: '–°–æ–∑–¥–∞–π—Ç–µ unsigned upload preset –≤ Cloudinary Dashboard',
          cloudinaryResponse: responseText,
        }, { status: 500 });
      }

      const cloudinaryData = JSON.parse(responseText);
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary:', {
        url: cloudinaryData.secure_url,
        publicId: cloudinaryData.public_id
      });

      return NextResponse.json({
        success: true,
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary',
        url: cloudinaryData.secure_url,
        data: {
          fileName: cloudinaryData.public_id,
          originalName: file.name,
          size: file.size,
          type: file.type,
          url: cloudinaryData.secure_url,
          uploadedAt: new Date().toISOString(),
          uploadedBy: sessionData.user.name,
          cloudinaryData: {
            publicId: cloudinaryData.public_id,
            width: cloudinaryData.width,
            height: cloudinaryData.height,
            format: cloudinaryData.format,
            bytes: cloudinaryData.bytes
          }
        }
      });

    } catch (cloudinaryError) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Cloudinary:', cloudinaryError);
      return NextResponse.json({
        error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Cloudinary',
        details: cloudinaryError instanceof Error ? cloudinaryError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 });
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    return NextResponse.json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}
