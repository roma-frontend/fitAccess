// app/api/upload/route.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Cloudinary –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
import { NextRequest, NextResponse } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import { existsSync } from 'fs';

export async function POST(request: NextRequest) {
  try {
    console.log('üìÅ POST /api/upload - –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const sessionId = request.cookies.get('session_id')?.value;
    console.log('üç™ Session ID –Ω–∞–π–¥–µ–Ω:', !!sessionId);

    if (!sessionId) {
      console.log('‚ùå –ù–µ—Ç session ID');
      return NextResponse.json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const sessionData = getSession(sessionId);
    console.log('üë§ Session data –Ω–∞–π–¥–µ–Ω–∞:', !!sessionData);

    if (!sessionData) {
      console.log('‚ùå –°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞');
      return NextResponse.json({ error: '–°–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('üîê –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', sessionData.user.role);
    if (!['super-admin', 'admin', 'manager'].includes(sessionData.user.role)) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤');
      return NextResponse.json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' }, { status: 403 });
    }

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª...');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const type = formData.get('type') as string || 'profile';
    const uploadTo = formData.get('uploadTo') as string || 'local';

    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏:', {
      hasFile: !!file,
      type,
      uploadTo
    });

    if (!file) {
      console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FormData');
      return NextResponse.json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 400 });
    }

    console.log('üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:', {
      name: file.name,
      size: file.size,
      type: file.type,
      uploadTo
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
    if (!allowedTypes.includes(file.type)) {
      console.log('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.type);
      return NextResponse.json({
        error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP'
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
      console.log('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size);
      return NextResponse.json({
        error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB'
      }, { status: 400 });
    }

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary
    if (uploadTo === 'cloudinary') {
      console.log('‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Cloudinary...');

      const cloudName = process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME;
      console.log('üåê Cloud Name:', cloudName);

      if (!cloudName) {
        console.log('‚ùå NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        return NextResponse.json({
          error: 'Cloudinary –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
        }, { status: 500 });
      }

      const cloudinaryFormData = new FormData();
      cloudinaryFormData.append('file', file);

      const uploadPreset = 'ml_default';
      cloudinaryFormData.append('upload_preset', uploadPreset);
      cloudinaryFormData.append('folder', `user-${type}`);

      const cloudinaryUrl = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;
      console.log('üì§ URL Cloudinary:', cloudinaryUrl);
      console.log('üì§ Upload preset:', uploadPreset);
      console.log('üì§ Folder: user-' + type);

      try {
        console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Cloudinary...');

        const cloudinaryResponse = await fetch(cloudinaryUrl, {
          method: 'POST',
          body: cloudinaryFormData,
        });

        console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç Cloudinary:', {
          status: cloudinaryResponse.status,
          statusText: cloudinaryResponse.statusText,
          ok: cloudinaryResponse.ok
        });

        const responseText = await cloudinaryResponse.text();
        console.log('üìÑ –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Cloudinary:', responseText);

        if (!cloudinaryResponse.ok) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç Cloudinary:', {
            status: cloudinaryResponse.status,
            statusText: cloudinaryResponse.statusText,
            response: responseText
          });

          return NextResponse.json({
            error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary',
            details: `${cloudinaryResponse.status}: ${responseText}`,
            cloudinaryUrl,
            cloudName
          }, { status: 500 });
        }

        let cloudinaryData;
        try {
          cloudinaryData = JSON.parse(responseText);
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Cloudinary:', parseError);
          return NextResponse.json({
            error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Cloudinary',
            details: responseText
          }, { status: 500 });
        }

        console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary:', {
          url: cloudinaryData.secure_url,
          publicId: cloudinaryData.public_id
        });

        return NextResponse.json({
          success: true,
          message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Cloudinary',
          url: cloudinaryData.secure_url,
          data: {
            fileName: cloudinaryData.public_id,
            originalName: file.name,
            size: file.size,
            type: file.type,
            url: cloudinaryData.secure_url,
            uploadedAt: new Date().toISOString(),
            uploadedBy: sessionData.user.name,
            cloudinaryData: {
              publicId: cloudinaryData.public_id,
              width: cloudinaryData.width,
              height: cloudinaryData.height,
              format: cloudinaryData.format,
              bytes: cloudinaryData.bytes
            }
          }
        });

      } catch (cloudinaryError) {
        console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Cloudinary:', cloudinaryError);
        return NextResponse.json({
          error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Cloudinary',
          details: cloudinaryError instanceof Error ? cloudinaryError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }, { status: 500 });
      }
    }

    // –õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (—Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
    console.log('üíæ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ...');

    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now();
    const randomString = Math.random().toString(36).substring(2, 15);
    const fileExtension = file.name.split('.').pop();
    const fileName = `${type}_${timestamp}_${randomString}.${fileExtension}`;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const uploadDir = join(process.cwd(), 'public', 'uploads', type);
    const filePath = join(uploadDir, fileName);

    console.log('üìÅ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', filePath);

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!existsSync(uploadDir)) {
      await mkdir(uploadDir, { recursive: true });
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', uploadDir);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    await writeFile(filePath, buffer);
    console.log('‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', fileName);

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
    const fileUrl = `/uploads/${type}/${fileName}`;

    return NextResponse.json({
      success: true,
      message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ',
      url: fileUrl,
      data: {
        fileName,
        originalName: file.name,
        size: file.size,
        type: file.type,
        url: fileUrl,
        uploadedAt: new Date().toISOString(),
        uploadedBy: sessionData.user.name
      }
    });

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    return NextResponse.json(
      {
        success: false,
        error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
}
