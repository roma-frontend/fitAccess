// app/auth/face-auth/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useRouter, useSearchParams } from "next/navigation";
import { FaceAuthDesktop } from "@/components/auth/face-auth/FaceAuthDesktop";
import { FaceAuthMobile } from "@/components/auth/face-auth/FaceAuthMobile";
import type { FaceDetectionData } from "@/components/auth/face-scanner/video-scanner";
import { toast } from "@/hooks/use-toast";

type ViewMode = 'desktop' | 'mobile';
type AuthMode = 'login' | 'register';

export default function FaceAuthPage() {
  const [isRegistering, setIsRegistering] = useState(false);
  const [faceData, setFaceData] = useState<FaceDetectionData | null>(null);
  const [sessionId] = useState(() => Math.random().toString(36).substr(2, 9));
  const [viewMode, setViewMode] = useState<ViewMode>('desktop');
  const [scanCount, setScanCount] = useState(0);
  const [lastScanTime, setLastScanTime] = useState<Date | null>(null);
  
  const { authStatus } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();
  
  const [mode, setMode] = useState<AuthMode>('login');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏ –≤–∏–¥
  useEffect(() => {
    const mobileMode = searchParams.get('mobile') === 'true';
    if (mobileMode) setViewMode('mobile');
    
    setMode(authStatus?.authenticated ? 'register' : 'login');
  }, [authStatus, searchParams]);

  const handleFaceDetected = (faceDetectionData: FaceDetectionData) => {
    setFaceData(faceDetectionData);
    setScanCount(prev => prev + 1);
    setLastScanTime(new Date());
  };

  const switchMode = (newMode: ViewMode) => {
    const newUrl = newMode === 'mobile' 
      ? `${window.location.pathname}?mobile=true&session=${sessionId}`
      : window.location.pathname;
    window.history.pushState({}, '', newUrl);
    setViewMode(newMode);
  };

  const sharedProps = {
    mode,
    setMode,
    faceData,
    sessionId,
    scanCount,
    lastScanTime,
    isRegistering,
    setIsRegistering,
    authStatus,
    router,
    onFaceDetected: handleFaceDetected,
    onSwitchMode: switchMode
  };

  const handleFaceLogin = async (faceDetectionData: FaceDetectionData) => {
  if (!faceDetectionData.descriptor) {
    toast({
      variant: "destructive",
      title: "–û—à–∏–±–∫–∞",
      description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –ª–∏—Ü–∞",
    });
    return;
  }

  toast({
    title: "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description: "–ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...",
  });
  
  // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  setTimeout(() => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—É –ª–∏—Ü–∞
    const userFound = false; // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    
    if (userFound) {
      toast({
        title: "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        description: "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
      });
      router.push("/dashboard");
    } else {
      toast({
        variant: "destructive",
        title: "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        description: "Face ID –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–æ–π–¥–∏—Ç–µ –ø–æ –ø–∞—Ä–æ–ª—é –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Face ID –≤ –ø—Ä–æ—Ñ–∏–ª–µ.",
        action: (
          <div className="flex space-x-2 mt-2">
            <button
              onClick={() => router.push('/member-login')}
              className="px-3 py-1 bg-blue-600 text-white text-xs rounded"
            >
              –í–æ–π—Ç–∏ –ø–æ –ø–∞—Ä–æ–ª—é
            </button>
            <button
              onClick={() => router.push('/register')}
              className="px-3 py-1 bg-green-600 text-white text-xs rounded"
            >
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
          </div>
        ),
      });
    }
  }, 2000);
};

  return viewMode === 'mobile' 
    ? <FaceAuthMobile {...sharedProps} />
    : <FaceAuthDesktop {...sharedProps} />;
}
