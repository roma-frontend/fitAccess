// ShopPage.tsx

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import PaymentForm from "@/components/PaymentForm";
import ReceiptModal from "@/components/ReceiptModal";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import {
  ShoppingCart,
  Search,
  Filter,
  Plus,
  Minus,
  X,
  Coffee,
  Zap,
  Cookie,
  Shirt,
  ArrowLeft,
  CheckCircle,
  AlertCircle,
  User,
  LogIn,
  Shield,
} from "lucide-react";

interface Product {
  _id: string;
  name: string;
  description?: string;
  category: string;
  price: number;
  imageUrl?: string;
  inStock: number;
  nutrition?: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
    sugar?: number;
  };
  isPopular?: boolean;
}

interface CartItem {
  product: Product;
  quantity: number;
}

export default function ShopPage() {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);
  const [user, setUser] = useState<any>(null);
  const [authLoading, setAuthLoading] = useState(true);
  const [hasShopAccess, setHasShopAccess] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [cart, setCart] = useState<CartItem[]>([]);
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [categoryFilter, setCategoryFilter] = useState<string>("all");
  const [loading, setLoading] = useState(true);
  const [orderStep, setOrderStep] = useState<
    "shop" | "cart" | "checkout" | "payment" | "confirm"
  >("shop");
  const [pickupType, setPickupType] = useState<string>("counter");
  const [paymentMethod, setPaymentMethod] = useState<string>("card");
  const [orderNotes, setOrderNotes] = useState<string>("");
  const [receipt, setReceipt] = useState<any>(null);
  const [showReceipt, setShowReceipt] = useState(false);

  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    checkAuthentication();
  }, []);

  useEffect(() => {
    if (isAuthenticated && hasShopAccess) {
      fetchProducts();
      loadCartFromStorage();
    }
  }, [isAuthenticated, hasShopAccess]);

  useEffect(() => {
    filterProducts();
  }, [products, searchQuery, categoryFilter]);

  useEffect(() => {
    saveCartToStorage();
  }, [cart]);

  const checkAuthentication = async () => {
    try {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...");
      const response = await fetch("/api/auth/check");
      const data = await response.json();

      if (data.authenticated) {
        setIsAuthenticated(true);
        setUser(data.user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É - —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const canAccessShop = data.user.role === 'member';
        setHasShopAccess(canAccessShop);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', data.user.email, '–†–æ–ª—å:', data.user.role);
        console.log('üõí –î–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É:', canAccessShop ? '–†–ê–ó–†–ï–®–ï–ù' : '–ó–ê–ü–†–ï–©–ï–ù');
      } else {
        setIsAuthenticated(false);
        setHasShopAccess(false);
        console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
      setIsAuthenticated(false);
      setHasShopAccess(false);
    } finally {
      setAuthLoading(false);
    }
  };

  const handleLogin = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    sessionStorage.setItem("returnUrl", "/shop");
    router.push("/member-login"); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ö–æ–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  };

  const handleGoToDashboard = () => {
    switch (user?.role) {
      case 'super-admin':
      case 'admin':
        router.push('/admin');
        break;
      case 'manager':
        router.push('/manager-dashboard');
        break;
      case 'trainer':
        router.push('/trainer-dashboard');
        break;
      case 'member':
        router.push('/member-dashboard');
        break;
      default:
        router.push('/');
    }
  };

  const handleLogoutAndLoginAsMember = async () => {
    try {
      await fetch('/api/auth/logout', { method: 'POST' });
      sessionStorage.setItem('returnUrl', '/shop');
      router.push('/member-login');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      router.push('/member-login');
    }
  };

  const fetchProducts = async () => {
    try {
      const response = await fetch("/api/products");
      if (response.ok) {
        const data = await response.json();
        setProducts(data.products || []);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã",
      });
    } finally {
      setLoading(false);
    }
  };

  const filterProducts = () => {
    let filtered = products;

    if (searchQuery) {
      filtered = filtered.filter(
        (product) =>
          product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          product.description?.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (categoryFilter !== "all") {
      filtered = filtered.filter(
        (product) => product.category === categoryFilter
      );
    }

    filtered.sort((a, b) => {
      if (a.isPopular && !b.isPopular) return -1;
      if (!a.isPopular && b.isPopular) return 1;
      return a.name.localeCompare(b.name);
    });

    setFilteredProducts(filtered);
  };

  const loadCartFromStorage = () => {
    try {
      const savedCart = localStorage.getItem("fitaccess_cart");
      if (savedCart) {
        setCart(JSON.parse(savedCart));
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã:", error);
    }
  };

  const saveCartToStorage = () => {
    try {
      localStorage.setItem("fitaccess_cart", JSON.stringify(cart));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:", error);
    }
  };

  const addToCart = (product: Product) => {
    if (product.inStock === 0) {
      toast({
        variant: "destructive",
        title: "–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è",
        description: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
      });
      return;
    }

    setCart((prevCart) => {
      const existingItem = prevCart.find(
        (item) => item.product._id === product._id
      );

      if (existingItem) {
        if (existingItem.quantity >= product.inStock) {
          toast({
            variant: "destructive",
            title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞",
            description: `–í –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–ª—å–∫–æ ${product.inStock} —à—Ç.`,
          });
          return prevCart;
        }

        return prevCart.map((item) =>
          item.product._id === product._id
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      } else {
        return [...prevCart, { product, quantity: 1 }];
      }
    });

    toast({
      title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
      description: `${product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`,
    });
  };

  const updateQuantity = (productId: string, newQuantity: number) => {
    if (newQuantity === 0) {
      removeFromCart(productId);
      return;
    }

    setCart((prevCart) =>
      prevCart.map((item) =>
        item.product._id === productId
          ? { ...item, quantity: Math.min(newQuantity, item.product.inStock) }
          : item
      )
    );
  };

  const removeFromCart = (productId: string) => {
    setCart((prevCart) =>
      prevCart.filter((item) => item.product._id !== productId)
    );
  };

  const clearCart = () => {
    setCart([]);
  };

  const getTotalPrice = () => {
    return cart.reduce(
      (total, item) => total + item.product.price * item.quantity,
      0
    );
  };

  const getTotalItems = () => {
    return cart.reduce((total, item) => total + item.quantity, 0);
  };

  const handleCheckout = async () => {
    if (cart.length === 0) {
      toast({
        variant: "destructive",
        title: "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
        description: "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞",
      });
      return;
    }

    if (paymentMethod === "card") {
      setOrderStep("payment");
      return;
    }

    try {
      const orderItems = cart.map((item) => ({
        productId: item.product._id,
        productName: item.product.name,
        quantity: item.quantity,
        price: item.product.price,
        totalPrice: item.product.price * item.quantity,
      }));

      const response = await fetch("/api/orders/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          items: orderItems,
          totalAmount: getTotalPrice(),
          pickupType,
          paymentMethod,
          notes: orderNotes || undefined,
          status: paymentMethod === "cash" ? "confirmed" : "pending",
        }),
      });

      if (response.ok) {
        const orderData = await response.json();
        setOrderStep("confirm");
        clearCart();

        if (paymentMethod !== "card") {
          const simpleReceipt = {
            receiptId: `ORD-${orderData.orderId}`,
            orderId: orderData.orderId,
            amount: getTotalPrice(),
            currency: "RUB",
            paidAt: new Date().toISOString(),
            paymentMethod:
              paymentMethod === "cash" ? "–ù–∞–ª–∏—á–Ω—ã–µ" : "–°–ø–∏—Å–∞–Ω–∏–µ —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞",
            items: orderItems,
          };
          setReceipt(simpleReceipt);
        }

        toast({
          title: "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
          description: "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        });
      } else {
        throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞");
      }
    } catch (error) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      });
    }
  };

  const handlePaymentSuccess = (paymentReceipt: any) => {
    setReceipt(paymentReceipt);
    setOrderStep("confirm");
    clearCart();
    setShowReceipt(true);
  };

  const handlePaymentError = (error: string) => {
    toast({
      variant: "destructive",
      title: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
      description: error,
    });
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case "drinks":
        return <Coffee className="h-4 w-4" />;
      case "supplements":
        return <Zap className="h-4 w-4" />;
      case "snacks":
        return <Cookie className="h-4 w-4" />;
      case "merchandise":
        return <Shirt className="h-4 w-4" />;
      default:
        return <Coffee className="h-4 w-4" />;
    }
  };

  const getCategoryName = (category: string) => {
    switch (category) {
      case "drinks":
        return "–ù–∞–ø–∏—Ç–∫–∏";
      case "supplements":
        return "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ";
      case "snacks":
        return "–°–Ω–µ–∫–∏";
      case "merchandise":
        return "–ú–µ—Ä—á";
      default:
        return category;
    }
  };

  const getRoleDisplayName = (role: string): string => {
    switch (role) {
      case 'admin':
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'super-admin':
        return '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'manager':
        return '–ú–µ–Ω–µ–¥–∂–µ—Ä';
      case 'trainer':
        return '–¢—Ä–µ–Ω–µ—Ä';
      case 'member':
        return '–£—á–∞—Å—Ç–Ω–∏–∫';
      default:
        return role;
    }
  };

  // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  if (authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É...</p>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-8">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <ShoppingCart className="h-8 w-8 text-blue-600" />
            </div>
            <CardTitle>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω FitAccess</CardTitle>
            <CardDescription>
              –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
            </CardDescription>
                    </CardHeader>
          <CardContent className="space-y-4">
            <Alert>
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>
                –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞
              </AlertDescription>
            </Alert>

            <div className="space-y-2">
              <Button onClick={handleLogin} className="w-full">
                <LogIn className="h-4 w-4 mr-2" />
                –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
              </Button>

              <Button
                variant="outline"
                onClick={() => router.push("/staff-login")}
                className="w-full"
              >
                <Shield className="h-4 w-4 mr-2" />
                –í—Ö–æ–¥ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
              </Button>

              <Button
                variant="ghost"
                onClick={() => router.push("/")}
                className="w-full"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É (–ø–µ—Ä—Å–æ–Ω–∞–ª)
  if (isAuthenticated && !hasShopAccess) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-8">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <AlertCircle className="h-8 w-8 text-yellow-600" />
            </div>
            <CardTitle>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</CardTitle>
            <CardDescription>
              –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Alert className="border-yellow-200 bg-yellow-50">
              <AlertCircle className="h-4 w-4 text-yellow-600" />
              <AlertDescription className="text-yellow-800">
                –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ <strong>{getRoleDisplayName(user.role)}</strong>.
                <br />
                –ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞.
              </AlertDescription>
            </Alert>

            <div className="bg-gray-50 rounded-lg p-4">
              <h4 className="font-medium mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h4>
              <div className="text-sm space-y-1">
                <p><strong>–ò–º—è:</strong> {user.name}</p>
                <p><strong>Email:</strong> {user.email}</p>
                <p><strong>–†–æ–ª—å:</strong> <Badge>{getRoleDisplayName(user.role)}</Badge></p>
              </div>
            </div>

            <div className="bg-blue-50 rounded-lg p-4">
              <h4 className="font-medium mb-2 text-blue-800">–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</li>
                <li>‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º</li>
                <li>‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏</li>
                <li>‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</li>
              </ul>
            </div>

            <div className="space-y-2">
              <Button onClick={handleGoToDashboard} className="w-full">
                <User className="h-4 w-4 mr-2" />
                –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
              </Button>

              <Button
                variant="outline"
                onClick={handleLogoutAndLoginAsMember}
                className="w-full"
              >
                <LogIn className="h-4 w-4 mr-2" />
                –í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫
              </Button>

              <Button
                variant="ghost"
                onClick={() => router.push("/")}
                className="w-full"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Ç–æ–≤–∞—Ä—ã
  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                onClick={() => {
                  if (orderStep === "shop") {
                    window.history.back();
                  } else {
                    setOrderStep("shop");
                  }
                }}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                –ù–∞–∑–∞–¥
              </Button>
              <div>
                <h1 className="text-xl font-bold text-gray-900">
                  –ú–∞–≥–∞–∑–∏–Ω FitAccess
                </h1>
                <p className="text-sm text-gray-500">
                  {orderStep === "shop" && "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã"}
                  {orderStep === "cart" && "–ö–æ—Ä–∑–∏–Ω–∞"}
                  {orderStep === "checkout" && "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"}
                  {orderStep === "payment" && "–û–ø–ª–∞—Ç–∞"}
                  {orderStep === "confirm" && "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω"}
                </p>
              </div>
            </div>

            <div className="flex items-center space-x-4">
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <User className="h-4 w-4" />
                <span>{user?.name}</span>
                <Badge variant="outline" className="text-xs">
                  {getRoleDisplayName(user?.role)}
                </Badge>
              </div>

              {/* –ö–æ—Ä–∑–∏–Ω–∞ */}
              <Button
                variant="outline"
                onClick={() => setOrderStep("cart")}
                className="relative"
              >
                <ShoppingCart className="h-4 w-4 mr-2" />
                –ö–æ—Ä–∑–∏–Ω–∞
                {getTotalItems() > 0 && (
                  <Badge className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {getTotalItems()}
                  </Badge>
                )}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ú–∞–≥–∞–∑–∏–Ω */}
        {orderStep === "shop" && (
          <div className="space-y-6">
            {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
            <Card>
              <CardContent className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="relative">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="pl-10"
                    />
                  </div>

                  <Select
                    value={categoryFilter}
                    onValueChange={setCategoryFilter}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="–ö–∞—Ç–µ–≥–æ—Ä–∏—è" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</SelectItem>
                      <SelectItem value="drinks">–ù–∞–ø–∏—Ç–∫–∏</SelectItem>
                      <SelectItem value="supplements">
                        –°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
                      </SelectItem>
                      <SelectItem value="snacks">–°–Ω–µ–∫–∏</SelectItem>
                      <SelectItem value="merchandise">–ú–µ—Ä—á</SelectItem>
                    </SelectContent>
                  </Select>

                  <Button
                    variant="outline"
                    onClick={() => {
                      setSearchQuery("");
                      setCategoryFilter("all");
                    }}
                  >
                    <Filter className="h-4 w-4 mr-2" />
                    –°–±—Ä–æ—Å–∏—Ç—å
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã */}
            {products.some((p) => p.isPopular) &&
              categoryFilter === "all" &&
              !searchQuery && (
                <div>
                  <h2 className="text-2xl font-bold mb-4">üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ–µ</h2>
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
                    {products
                      .filter((p) => p.isPopular)
                      .slice(0, 4)
                      .map((product) => (
                        <ProductCard
                          key={product._id}
                          product={product}
                          onAddToCart={() => addToCart(product)}
                          cartQuantity={
                            cart.find(
                              (item) => item.product._id === product._id
                            )?.quantity || 0
                          }
                        />
                      ))}
                  </div>
                </div>
              )}

            {/* –í—Å–µ —Ç–æ–≤–∞—Ä—ã */}
            <div>
              <h2 className="text-2xl font-bold mb-4">
                {categoryFilter === "all"
                  ? "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
                  : getCategoryName(categoryFilter)}
              </h2>

              <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {filteredProducts.map((product) => (
                  <ProductCard
                    key={product._id}
                    product={product}
                    onAddToCart={() => addToCart(product)}
                    cartQuantity={
                      cart.find((item) => item.product._id === product._id)
                        ?.quantity || 0
                    }
                  />
                ))}
              </div>

              {filteredProducts.length === 0 && (
                <Card className="p-12 text-center">
                  <Search className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </h3>
                  <p className="text-gray-600 mb-4">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
                  </p>
                  <Button
                    variant="outline"
                    onClick={() => {
                      setSearchQuery("");
                      setCategoryFilter("all");
                    }}
                  >
                    –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                  </Button>
                </Card>
              )}
            </div>
          </div>
        )}

        {/* –ö–æ—Ä–∑–∏–Ω–∞ */}
        {orderStep === "cart" && (
          <div className="max-w-4xl mx-auto">
            <Card>
              <CardHeader>
                <CardTitle>–ö–æ—Ä–∑–∏–Ω–∞</CardTitle>
                <CardDescription>
                  {cart.length > 0
                    ? `${getTotalItems()} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É ${getTotalPrice()} ‚ÇΩ`
                    : "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"}
                </CardDescription>
              </CardHeader>
              <CardContent>
                {cart.length > 0 ? (
                  <div className="space-y-4">
                    {cart.map((item) => (
                      <CartItemCard
                        key={item.product._id}
                        item={item}
                        onUpdateQuantity={(quantity) =>
                          updateQuantity(item.product._id, quantity)
                        }
                        onRemove={() => removeFromCart(item.product._id)}
                      />
                    ))}

                    <div className="border-t pt-4">
                      <div className="flex items-center justify-between text-lg font-bold">
                        <span>–ò—Ç–æ–≥–æ:</span>
                        <span>{getTotalPrice()} ‚ÇΩ</span>
                      </div>
                    </div>

                    <div className="flex gap-3">
                      <Button
                        variant="outline"
                        onClick={() => setOrderStep("shop")}
                        className="flex-1"
                      >
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
                      </Button>
                      <Button
                        onClick={() => setOrderStep("checkout")}
                        className="flex-1"
                      >
                        –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <ShoppingCart className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
                    </h3>
                    <p className="text-gray-600 mb-4">
                      –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
                    </p>
                    <Button onClick={() => setOrderStep("shop")}>
                      –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        )}

        {/* –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */}
        {orderStep === "checkout" && (
          <div className="max-w-4xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* –§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ */}
            <Card>
              <CardHeader>
                <CardTitle>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <label className="block text-sm font-medium mb-2">
                    –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è
                  </label>
                  <Select value={pickupType} onValueChange={setPickupType}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="counter">–ù–∞ —Å—Ç–æ–π–∫–µ —Ä–µ—Å–µ–ø—à–Ω</SelectItem>
                      <SelectItem value="locker">
                        –í –∞–≤—Ç–æ–º–∞—Ç–µ (—à–∫–∞—Ñ—á–∏–∫)
                      </SelectItem>
                      <SelectItem value="table">–ü—Ä–∏–Ω–µ—Å—Ç–∏ –∫ —Å—Ç–æ–ª–∏–∫—É</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                  </label>
                                    <Select
                    value={paymentMethod}
                    onValueChange={setPaymentMethod}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="card">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</SelectItem>
                      <SelectItem value="cash">–ù–∞–ª–∏—á–Ω—ã–µ</SelectItem>
                      <SelectItem value="membership">
                        –°–ø–∏—Å–∞—Ç—å —Å –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
                  </label>
                  <Input
                    placeholder="–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è..."
                    value={orderNotes}
                    onChange={(e) => setOrderNotes(e.target.value)}
                  />
                </div>

                <div className="flex gap-3">
                  <Button
                    variant="outline"
                    onClick={() => setOrderStep("cart")}
                    className="flex-1"
                  >
                    –ù–∞–∑–∞–¥
                  </Button>
                  <Button onClick={handleCheckout} className="flex-1">
                    {paymentMethod === "card"
                      ? "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"
                      : "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"}
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
            <Card>
              <CardHeader>
                <CardTitle>–í–∞—à –∑–∞–∫–∞–∑</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {cart.map((item) => (
                    <div
                      key={item.product._id}
                      className="flex items-center justify-between"
                    >
                      <div className="flex-1">
                        <p className="font-medium">{item.product.name}</p>
                        <p className="text-sm text-gray-600">
                          {item.product.price} ‚ÇΩ √ó {item.quantity}
                        </p>
                      </div>
                      <span className="font-medium">
                        {item.product.price * item.quantity} ‚ÇΩ
                      </span>
                    </div>
                  ))}
                </div>

                <div className="border-t mt-4 pt-4">
                  <div className="flex items-center justify-between text-lg font-bold">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span>{getTotalPrice()} ‚ÇΩ</span>
                  </div>
                </div>

                <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-medium mb-2">–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h4>
                  <p className="text-sm text-blue-800">
                    –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ 10-15 –º–∏–Ω—É—Ç
                  </p>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π */}
        {orderStep === "payment" && (
          <div className="max-w-4xl mx-auto">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* –§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã */}
              <PaymentForm
                items={cart.map((item) => ({
                  productId: item.product._id,
                  productName: item.product.name,
                  quantity: item.quantity,
                  price: item.product.price,
                  totalPrice: item.product.price * item.quantity,
                }))}
                totalAmount={getTotalPrice()}
                pickupType={pickupType}
                notes={orderNotes}
                onSuccess={handlePaymentSuccess}
                onError={handlePaymentError}
              />

              {/* –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ */}
              <Card>
                <CardHeader>
                  <CardTitle>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {cart.map((item) => (
                      <div
                        key={item.product._id}
                        className="flex items-center justify-between"
                      >
                        <div className="flex-1">
                          <p className="font-medium">{item.product.name}</p>
                          <p className="text-sm text-gray-600">
                            {item.product.price} ‚ÇΩ √ó {item.quantity}
                          </p>
                        </div>
                        <span className="font-medium">
                          {item.product.price * item.quantity} ‚ÇΩ
                        </span>
                      </div>
                    ))}
                  </div>

                  <div className="border-t mt-4 pt-4">
                    <div className="flex items-center justify-between text-lg font-bold">
                      <span>–ò—Ç–æ–≥–æ:</span>
                      <span>{getTotalPrice()} ‚ÇΩ</span>
                    </div>
                  </div>

                  <div className="mt-4 space-y-2 text-sm text-gray-600">
                    <p>
                      <strong>–ü–æ–ª—É—á–µ–Ω–∏–µ:</strong>{" "}
                      {pickupType === "counter"
                        ? "–ù–∞ —Å—Ç–æ–π–∫–µ —Ä–µ—Å–µ–ø—à–Ω"
                        : pickupType === "locker"
                          ? "–í –∞–≤—Ç–æ–º–∞—Ç–µ"
                          : "–ó–∞ —Å—Ç–æ–ª–∏–∫–æ–º"}
                    </p>
                    {orderNotes && (
                      <p>
                        <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {orderNotes}
                      </p>
                    )}
                  </div>

                  <Button
                    variant="outline"
                    onClick={() => setOrderStep("checkout")}
                    className="w-full mt-4"
                  >
                    –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                  </Button>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ */}
        {orderStep === "confirm" && (
          <div className="max-w-2xl mx-auto">
            <Card>
              <CardContent className="p-8 text-center">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
                  <CheckCircle className="h-8 w-8 text-green-600" />
                </div>

                <h2 className="text-2xl font-bold text-gray-900 mb-4">
                  {paymentMethod === "card"
                    ? "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!"
                    : "–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!"}
                </h2>

                <p className="text-gray-600 mb-6">
                  –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ
                  {receipt?.receiptId ||
                    Math.random().toString(36).substr(2, 6).toUpperCase()}
                  {paymentMethod === "card" ? " –æ–ø–ª–∞—á–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç" : " –ø—Ä–∏–Ω—è—Ç"} –≤
                  –æ–±—Ä–∞–±–æ—Ç–∫—É. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 10-15 –º–∏–Ω—É—Ç.
                </p>

                {receipt && (
                  <div className="mb-6">
                    <Button
                      variant="outline"
                      onClick={() => setShowReceipt(true)}
                      className="mb-4"
                    >
                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–µ–∫
                    </Button>

                    <div className="bg-gray-50 rounded-lg p-4 text-left">
                      <h4 className="font-medium mb-2">–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:</h4>
                      <div className="text-sm space-y-1">
                        <p>
                          –°—É–º–º–∞:{" "}
                          <strong>
                            {receipt.amount} {receipt.currency || "‚ÇΩ"}
                          </strong>
                        </p>
                        <p>
                          –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:{" "}
                          <strong>
                            {receipt.paymentMethod || "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞"}
                          </strong>
                        </p>
                        <p>
                          –î–∞—Ç–∞:{" "}
                          <strong>
                            {new Date(receipt.paidAt).toLocaleString()}
                          </strong>
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                <div className="bg-gray-50 rounded-lg p-4 mb-6">
                  <h3 className="font-medium mb-2">–ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
                  <ul className="text-sm text-gray-600 space-y-1">
                    <li>‚Ä¢ –ú—ã –Ω–∞—á–Ω–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑</li>
                    <li>‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤</li>
                    <li>
                      ‚Ä¢ –ó–∞–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑{" "}
                      {pickupType === "counter"
                        ? "–Ω–∞ —Å—Ç–æ–π–∫–µ —Ä–µ—Å–µ–ø—à–Ω"
                        : pickupType === "locker"
                          ? "–≤ –∞–≤—Ç–æ–º–∞—Ç–µ"
                          : "–∑–∞ –≤–∞—à–∏–º —Å—Ç–æ–ª–∏–∫–æ–º"}
                    </li>
                  </ul>
                </div>

                <div className="flex gap-3">
                  <Button
                    variant="outline"
                    onClick={() => (window.location.href = "/member-dashboard")}
                    className="flex-1"
                  >
                    –í –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
                  </Button>
                  <Button
                    onClick={() => setOrderStep("shop")}
                    className="flex-1"
                  >
                    –ó–∞–∫–∞–∑–∞—Ç—å –µ—â–µ
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —á–µ–∫–æ–º */}
      <ReceiptModal
        receipt={receipt}
        isOpen={showReceipt}
        onClose={() => setShowReceipt(false)}
      />
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function ProductCard({
  product,
  onAddToCart,
  cartQuantity,
}: {
  product: Product;
  onAddToCart: () => void;
  cartQuantity: number;
}) {
  const getProductImage = (product: Product) => {
    if (product.imageUrl) {
      return product.imageUrl;
    }

    switch (product.category) {
      case "drinks":
        return "https://images.unsplash.com/photo-1544145945-f90425340c7e?w=400&h=300&fit=crop";
      case "supplements":
        return "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop";
      case "snacks":
        return "https://images.unsplash.com/photo-1599490659213-e2b9527bd087?w=400&h=300&fit=crop";
      case "merchandise":
        return "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400&h=300&fit=crop";
      default:
        return "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop";
    }
  };

  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow">
      <div className="relative">
        <img
          src={getProductImage(product)}
          alt={product.name}
          className="w-full h-40 object-cover"
          onError={(e) => {
            e.currentTarget.src =
              "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop";
          }}
        />
        {product.isPopular && (
          <Badge className="absolute top-2 left-2 bg-orange-500">üî• –•–∏—Ç</Badge>
        )}
        {product.inStock < 5 && product.inStock > 0 && (
          <Badge className="absolute top-2 right-2 bg-yellow-500">–ú–∞–ª–æ</Badge>
        )}
        {product.inStock === 0 && (
          <Badge className="absolute top-2 right-2 bg-red-500">
            –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
          </Badge>
        )}
      </div>

      <CardContent className="p-4">
        <div className="mb-3">
          <h4 className="font-bold text-lg mb-1">{product.name}</h4>
          {product.description && (
            <p className="text-sm text-gray-600 line-clamp-2">
              {product.description}
            </p>
          )}
        </div>

        {product.nutrition && (
          <div className="mb-3 p-2 bg-gray-50 rounded text-xs">
            <div className="grid grid-cols-2 gap-1">
              {product.nutrition.calories && (
                <span>–ö–∞–ª–æ—Ä–∏–∏: {product.nutrition.calories}</span>
              )}
              {product.nutrition.protein && (
                <span>–ë–µ–ª–∫–∏: {product.nutrition.protein}–≥</span>
              )}
              {product.nutrition.carbs && (
                <span>–£–≥–ª–µ–≤–æ–¥—ã: {product.nutrition.carbs}–≥</span>
              )}
              {product.nutrition.fat && (
                <span>–ñ–∏—Ä—ã: {product.nutrition.fat}–≥</span>
              )}
            </div>
          </div>
        )}

        <div className="flex items-center justify-between mb-3">
          <span className="font-bold text-xl">{product.price} ‚ÇΩ</span>
          <span className="text-xs text-gray-500">
            –í –Ω–∞–ª–∏—á–∏–∏: {product.inStock} —à—Ç.
          </span>
        </div>

        {cartQuantity > 0 ? (
          <div className="flex items-center justify-center gap-3">
            <span className="text-sm font-medium">
              –í –∫–æ—Ä–∑–∏–Ω–µ: {cartQuantity}
            </span>
            <Button
              size="sm"
              onClick={onAddToCart}
              disabled={
                product.inStock === 0 || cartQuantity >= product.inStock
              }
            >
              <Plus className="h-4 w-4" />
            </Button>
          </div>
        ) : (
          <Button
            onClick={onAddToCart}
            disabled={product.inStock === 0}
            className="w-full"
          >
            {product.inStock === 0 ? "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" : "–í –∫–æ—Ä–∑–∏–Ω—É"}
          </Button>
        )}
      </CardContent>
    </Card>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
function CartItemCard({
  item,
  onUpdateQuantity,
  onRemove,
}: {
  item: CartItem;
  onUpdateQuantity: (quantity: number) => void;
  onRemove: () => void;
}) {
  const getProductImage = (product: Product) => {
    if (product.imageUrl) {
      return product.imageUrl;
    }

    switch (product.category) {
      case "drinks":
        return "https://images.unsplash.com/photo-1544145945-f90425340c7e?w=400&h=300&fit=crop";
      case "supplements":
                return "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop";
      case "snacks":
        return "https://images.unsplash.com/photo-1599490659213-e2b9527bd087?w=400&h=300&fit=crop";
      case "merchandise":
        return "https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?w=400&h=300&fit=crop";
      default:
        return "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop";
    }
  };

  return (
    <div className="flex items-center space-x-4 p-4 border rounded-lg">
      <img
        src={getProductImage(item.product)}
        alt={item.product.name}
        className="w-16 h-16 object-cover rounded"
        onError={(e) => {
          e.currentTarget.src =
            "https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop";
        }}
      />

      <div className="flex-1">
        <h4 className="font-medium">{item.product.name}</h4>
        <p className="text-sm text-gray-600">{item.product.price} ‚ÇΩ –∑–∞ —à—Ç.</p>
        {item.product.nutrition && (
          <p className="text-xs text-gray-500">
            {item.product.nutrition.calories} –∫–∫–∞–ª
          </p>
        )}
      </div>

      <div className="flex items-center space-x-2">
        <Button
          variant="outline"
          size="sm"
          onClick={() => onUpdateQuantity(item.quantity - 1)}
          disabled={item.quantity <= 1}
        >
          <Minus className="h-4 w-4" />
        </Button>

        <span className="w-8 text-center font-medium">{item.quantity}</span>

        <Button
          variant="outline"
          size="sm"
          onClick={() => onUpdateQuantity(item.quantity + 1)}
          disabled={item.quantity >= item.product.inStock}
        >
          <Plus className="h-4 w-4" />
        </Button>
      </div>

      <div className="text-right">
        <p className="font-bold">{item.product.price * item.quantity} ‚ÇΩ</p>
        <Button
          variant="ghost"
          size="sm"
          onClick={onRemove}
          className="text-red-600 hover:text-red-800"
        >
          <X className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}



