// app/forgot-password/page.tsx (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { ValidatedInput } from '@/components/ValidatedInput';
import { Mail, ArrowLeft, Shield, Clock, CheckCircle } from 'lucide-react';

export default function ForgotPasswordPage() {
  const [email, setEmail] = useState('');
  const [userType, setUserType] = useState<'member' | 'staff'>('member');
  const [loading, setLoading] = useState(false);
  const [sent, setSent] = useState(false);
  const [cooldown, setCooldown] = useState(0);
  
  const { toast } = useToast();
  const router = useRouter();

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  const isValidEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!email.trim()) {
      toast({
        variant: 'destructive',
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å'
      });
      return;
    }

    if (!isValidEmail(email.trim())) {
      toast({
        variant: 'destructive',
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å'
      });
      return;
    }

    if (cooldown > 0) {
      toast({
        variant: 'destructive',
        title: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ',
        description: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ ${cooldown} —Å–µ–∫—É–Ω–¥`
      });
      return;
    }

    setLoading(true);

    try {
      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email: email.trim().toLowerCase(), userType })
      });

      const data = await response.json();

      if (data.success) {
        setSent(true);
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç
        setCooldown(300);
        const interval = setInterval(() => {
          setCooldown(prev => {
            if (prev <= 1) {
              clearInterval(interval);
              return 0;
            }
            return prev - 1;
          });
        }, 1000);

        toast({
          title: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üìß',
          description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è'
        });
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞');
      }
    } catch (error) {
      console.error('Forgot password error:', error);
      toast({
        variant: 'destructive',
        title: '–û—à–∏–±–∫–∞',
        description: error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ'
      });
    } finally {
      setLoading(false);
    }
  };

  const handleResend = () => {
    if (cooldown > 0) {
      toast({
        variant: 'destructive',
        title: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ',
        description: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ ${Math.floor(cooldown / 60)}:${(cooldown % 60).toString().padStart(2, '0')}`
      });
      return;
    }
    setSent(false);
  };

  if (sent) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <CheckCircle className="h-8 w-8 text-green-600" />
            </div>
            <CardTitle className="text-green-900">–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</CardTitle>
          </CardHeader>
          <CardContent className="text-center space-y-4">
            <div className="space-y-2">
              <p className="text-gray-700">
                –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞:
              </p>
              <p className="font-medium text-blue-600 break-all">{email}</p>
            </div>
            
            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg text-left">
              <h4 className="font-medium text-blue-900 mb-2">–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</h4>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É (–≤–∫–ª—é—á–∞—è –ø–∞–ø–∫—É "–°–ø–∞–º")</li>
                <li>‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –ø–∏—Å—å–º–µ</li>
                <li>‚Ä¢ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å</li>
                <li>‚Ä¢ –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ</li>
              </ul>
            </div>

            {cooldown > 0 && (
              <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                <div className="flex items-center justify-center space-x-2 text-orange-700">
                  <Clock className="h-4 w-4" />
                  <span className="text-sm">
                    –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ {Math.floor(cooldown / 60)}:{(cooldown % 60).toString().padStart(2, '0')}
                  </span>
                </div>
              </div>
            )}

            <div className="space-y-2">
              <Button
                onClick={handleResend}
                variant="outline"
                className="w-full"
                disabled={cooldown > 0}
              >
                {cooldown > 0 ? (
                  <>
                    <Clock className="h-4 w-4 mr-2" />
                    –ü–æ–¥–æ–∂–¥–∏—Ç–µ {Math.floor(cooldown / 60)}:{(cooldown % 60).toString().padStart(2, '0')}
                  </>
                ) : (
                  <>
                    <Mail className="h-4 w-4 mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                  </>
                )}
              </Button>
              <Button
                onClick={() => router.push(userType === 'staff' ? '/staff-login' : '/member-login')}
                variant="ghost"
                className="w-full"
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <Shield className="h-8 w-8 text-blue-600" />
          </div>
          <CardTitle>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</CardTitle>
          <p className="text-gray-600">
            –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
          </p>
        </CardHeader>
        
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
              </label>
              <div className="flex space-x-2">
                <Button
                  type="button"
                  variant={userType === 'member' ? 'default' : 'outline'}
                  onClick={() => setUserType('member')}
                  className="flex-1"
                >
                  üë§ –£—á–∞—Å—Ç–Ω–∏–∫
                </Button>
                <Button
                  type="button"
                  variant={userType === 'staff' ? 'default' : 'outline'}
                  onClick={() => setUserType('staff')}
                  className="flex-1"
                >
                  üõ°Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–ª
                </Button>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">
                Email –∞–¥—Ä–µ—Å *
              </label>
              <ValidatedInput
                type="email"
                name="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="your@email.com"
                required
                className="w-full"
              />
              {email && !isValidEmail(email) && (
                <p className="text-sm text-red-600 mt-1">
                  –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å
                </p>
              )}
            </div>

            <div className="p-3 bg-gray-50 border rounded-lg">
              <div className="text-xs text-gray-600 space-y-1">
                <p>üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã</p>
                <p>‚è±Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å</p>
                <p>üö´ –õ–∏–º–∏—Ç: 1 –∑–∞–ø—Ä–æ—Å –≤ 5 –º–∏–Ω—É—Ç</p>
              </div>
            </div>

            <Button
              type="submit"
              disabled={loading || !email.trim() || !isValidEmail(email.trim())}
              className="w-full"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                </>
              ) : (
                <>
                  <Mail className="h-4 w-4 mr-2" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                </>
              )}
            </Button>

            <Button
              type="button"
              onClick={() => router.push(userType === 'staff' ? '/staff-login' : '/member-login')}
              variant="ghost"
              className="w-full"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}
