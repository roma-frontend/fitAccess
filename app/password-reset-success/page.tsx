// app/password-reset-success/page.tsx
"use client";

import { useEffect, useState, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CheckCircle, ArrowRight, Loader2 } from 'lucide-react';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ª–æ–≥–∏–∫–æ–π, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useSearchParams
function PasswordResetSuccessContent() {
  const [countdown, setCountdown] = useState(5);
  const router = useRouter();
  const searchParams = useSearchParams();
  const userType = searchParams.get('type') || 'member';

  useEffect(() => {
    const timer = setInterval(() => {
      setCountdown((prev) => {
        if (prev <= 1) {
          const loginUrl = userType === 'staff' ? '/staff-login' : '/member-login';
          router.push(loginUrl);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [router, userType]);

  const handleGoToLogin = () => {
    const loginUrl = userType === 'staff' ? '/staff-login' : '/member-login';
    router.push(loginUrl);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <CheckCircle className="h-12 w-12 text-green-600" />
          </div>
          <CardTitle className="text-green-900 text-2xl">
            –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! üéâ
          </CardTitle>
        </CardHeader>
        
        <CardContent className="text-center space-y-6">
          <div className="space-y-2">
            <p className="text-gray-700 font-medium">
              –í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
            </p>
            <p className="text-sm text-gray-500">
              –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
            </p>
          </div>

          <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <p className="text-sm text-blue-800">
              –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {countdown} —Å–µ–∫—É–Ω–¥...
            </p>
          </div>

          <div className="space-y-2">
            <Button
              onClick={handleGoToLogin}
              className="w-full bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700"
            >
              –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
            
            <Button
              onClick={() => router.push('/')}
              variant="ghost"
              className="w-full"
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </Button>
          </div>

          <div className="pt-4 border-t border-gray-200">
            <div className="text-xs text-gray-500 space-y-1">
              <p>üîê –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω</p>
              <p>üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email</p>
              <p>üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
function LoadingFallback() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardContent className="text-center py-8">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4 text-green-600" />
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </CardContent>
      </Card>
    </div>
  );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
export default function PasswordResetSuccessPage() {
  return (
    <Suspense fallback={<LoadingFallback />}>
      <PasswordResetSuccessContent />
    </Suspense>
  );
}
