// app/mobile-scanner/[sessionId]/mobile-scanner-client.tsx
"use client";

import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { useRouter } from "next/navigation";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import dynamic from 'next/dynamic';

interface FaceDescriptor {
  id: string;
  name: string;
  faceDescriptor: number[];
}

interface MobileScannerClientProps {
  sessionId: string;
}

// Dynamically import face-api to avoid SSR issues
const FaceAPIComponent = dynamic(
  () => import('./face-api-component'),
  { 
    ssr: false,
    loading: () => (
      <Card className="mb-6">
        <CardContent className="p-6">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="font-medium text-blue-900">
              –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü...
            </p>
          </div>
        </CardContent>
      </Card>
    )
  }
);

export function MobileScannerClient({ sessionId }: MobileScannerClientProps) {
  const { toast } = useToast();
  const [isMobile, setIsMobile] = useState(false);
  const [currentUrl, setCurrentUrl] = useState("");

  const faceDescriptors = useQuery(api.users.getAllFaceDescriptors) || [];

  useEffect(() => {
    const checkMobile = () => {
      const userAgent = navigator.userAgent.toLowerCase();
      const mobileKeywords = ["mobile", "android", "iphone", "ipad", "tablet"];
      return mobileKeywords.some((keyword) => userAgent.includes(keyword));
    };

    setIsMobile(checkMobile());
    setCurrentUrl(window.location.href);
  }, []);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(currentUrl);
      toast({
        title: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞",
        description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Å—Å–∏—é —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
      });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-2xl mx-auto">
        <Card className="mb-6">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold">
              üì± –ú–æ–±–∏–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –ª–∏—Ü–∞
            </CardTitle>
            <CardDescription>–°–µ—Å—Å–∏—è: {sessionId}</CardDescription>
          </CardHeader>
        </Card>

        <FaceAPIComponent 
          sessionId={sessionId}
          faceDescriptors={faceDescriptors}
          isMobile={isMobile}
        />

        {/* Alternative options */}
        <div className="space-y-4 mt-6">
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-300" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-white text-gray-500">–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã</span>
            </div>
          </div>

          <div className="grid grid-cols-1 gap-3">
            <Button
              onClick={() => (window.location.href = "/login")}
              variant="outline"
              className="w-full"
            >
              üîê –í–æ–π—Ç–∏ –ø–æ –ø–∞—Ä–æ–ª—é
            </Button>

            <Button
              onClick={() => (window.location.href = "/")}
              variant="outline"
              className="w-full"
            >
              üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            </Button>
          </div>
        </div>

        {/* Information cards */}
        <div className="mt-6 space-y-4">
          {faceDescriptors.length === 0 && (
            <Card className="bg-orange-50 border-orange-200">
              <CardContent className="p-4">
                <p className="font-medium text-orange-900">
                  –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Ü
                </p>
                <p className="text-sm text-orange-800 mt-1">
                  –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ –≤ —Å–∏—Å—Ç–µ–º–µ.
                </p>
              </CardContent>
            </Card>
          )}

          {faceDescriptors.length > 0 && (
            <Card className="bg-green-50 border-green-200">
              <CardContent className="p-4">
                <p className="font-medium text-green-900">
                  –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
                </p>
                <p className="text-sm text-green-800 mt-1">
                  –ù–∞–π–¥–µ–Ω–æ {faceDescriptors.length} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
                </p>
              </CardContent>
            </Card>
          )}

          {/* Mobile scanning tips */}
          <Card className="bg-blue-50 border-blue-200">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-blue-900">
                üì± –°–æ–≤–µ—Ç—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <ul className="text-sm text-blue-800 space-y-1">
                <li>‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ</li>
                <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Ü–æ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–æ</li>
                <li>‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ 30-50 —Å–º –æ—Ç –ª–∏—Ü–∞</li>
                <li>‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É</li>
                <li>‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π</li>
                {isMobile && (
                  <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏</li>
                )}
              </ul>
            </CardContent>
          </Card>

          {/* Session info */}
          <Card className="bg-purple-50 border-purple-200">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-purple-900">
                üì≤ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π:
              </CardTitle>
            </CardHeader>
            <CardContent className="pt-0">
              <div className="space-y-3">
                <p className="text-sm text-purple-800">
                  –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏:
                </p>
                <div className="flex">
                  <input
                    type="text"
                    value={currentUrl}
                    readOnly
                    className="flex-1 px-3 py-2 text-sm border border-purple-200 rounded-l bg-white"
                  />
                  <Button
                    onClick={copyToClipboard}
                    variant="outline"
                    className="rounded-l-none border-l-0 border-purple-200"
                  >
                    üìã
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
