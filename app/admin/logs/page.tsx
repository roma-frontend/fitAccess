// app/(dashboard)/admin/logs/page.tsx
"use client";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useQuery } from "convex/react";
import { format, formatDistanceToNow } from "date-fns";
import { ru } from "date-fns/locale";
import { CheckCircle, XCircle, Search } from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { useState } from "react";
import type { Id } from "@/convex/_generated/dataModel";

interface User {
  _id: Id<"users">;
  name: string;
  email?: string;
  role?: string;
  photoUrl?: string;
  faceDescriptor?: number[];
  createdAt: number;
}

interface AccessLog {
  _id: Id<"accessLogs">;
  userId?: Id<"users">;
  success: boolean;
  timestamp: number;
  deviceInfo?: string;
  ipAddress?: string;
  photoUrl?: string;
}

export default function AdminLogsPage() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—É—Ç–∏ –≤–º–µ—Å—Ç–æ api –æ–±—ä–µ–∫—Ç–æ–≤
  const logs = (useQuery("accessLogs:getAll" as any) as AccessLog[] | undefined) || [];
  const users = (useQuery("users:getAll" as any) as User[] | undefined) || [];
  const [searchQuery, setSearchQuery] = useState("");
  
  const getUserName = (userId: Id<"users">) => {
    const user = users.find((u: User) => u._id === userId);
    return user ? user.name : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  };
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  const filteredLogs = logs.filter((log: AccessLog) => {
    if (!searchQuery) return true;
    
    const userName = log.userId ? getUserName(log.userId) : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    const deviceInfo = log.deviceInfo || "";
    const searchLower = searchQuery.toLowerCase();
    
    return userName.toLowerCase().includes(searchLower) || 
           deviceInfo.toLowerCase().includes(searchLower);
  });
  
  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">–ñ—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞</h1>
        <p className="text-muted-foreground mt-2">
          –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {logs.length} | –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filteredLogs.length}
        </p>
      </div>
      
      <Card>
        <CardHeader>
          <CardTitle>–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–∞</CardTitle>
          <CardDescription>
            –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center mb-4">
            <div className="relative flex-1">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É..."
                className="pl-8"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
          </div>
          
          {logs.length === 0 ? (
            <div className="text-center py-10">
              <div className="text-6xl mb-4">üìù</div>
              <p className="text-muted-foreground text-lg">–ñ—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞ –ø—É—Å—Ç</p>
              <p className="text-sm text-muted-foreground mt-2">
                –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
              </p>
            </div>
          ) : filteredLogs.length === 0 ? (
            <div className="text-center py-10">
              <div className="text-6xl mb-4">üîç</div>
              <p className="text-muted-foreground text-lg">–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-sm text-muted-foreground mt-2">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
              </p>
            </div>
          ) : (
            <div className="rounded-md border">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                    <TableHead>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHead>
                    <TableHead>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</TableHead>
                    <TableHead>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</TableHead>
                    <TableHead>IP –∞–¥—Ä–µ—Å</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredLogs.map((log: AccessLog) => (
                    <TableRow key={log._id}>
                      <TableCell>
                        {log.success ? (
                          <Badge variant="outline" className="bg-green-100 text-green-800 border-green-200">
                            <CheckCircle className="h-4 w-4 mr-1" /> –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="bg-red-100 text-red-800 border-red-200">
                            <XCircle className="h-4 w-4 mr-1" /> –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
                          </Badge>
                        )}
                      </TableCell>
                      <TableCell>
                        {log.userId ? getUserName(log.userId) : "‚Äî"}
                      </TableCell>
                      <TableCell>
                        <div>
                          {format(new Date(log.timestamp), "dd.MM.yyyy HH:mm:ss")}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {formatDistanceToNow(new Date(log.timestamp), { 
                            addSuffix: true,
                            locale: ru
                          })}
                        </div>
                      </TableCell>
                      <TableCell className="max-w-xs">
                        <div className="truncate" title={log.deviceInfo}>
                          {log.deviceInfo || "‚Äî"}
                        </div>
                      </TableCell>
                      <TableCell>
                        {log.ipAddress || "‚Äî"}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {logs.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{logs.length}</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">–£—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">
                {logs.filter((log: AccessLog) => log.success).length}
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-red-600">
                {logs.filter((log: AccessLog) => !log.success).length}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">
                {new Set(logs.filter((log: AccessLog) => log.userId).map((log: AccessLog) => log.userId)).size}
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
