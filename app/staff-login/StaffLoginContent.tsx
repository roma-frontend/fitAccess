// app/staff-login/StaffLoginContent.tsx
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import Link from "next/link";
import { SmartForm } from "@/components/SmartForm";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, Mail, ArrowLeft } from "lucide-react";
import { ValidatedInput } from "@/components/ValidatedInput";

export default function StaffLoginContent() {
  const [isLoading, setIsLoading] = useState(false);
  const [showForgotPassword, setShowForgotPassword] = useState(false);
  const [resetEmail, setResetEmail] = useState("");
  const [resetSent, setResetSent] = useState(false);
  const { toast } = useToast();
  const router = useRouter();
  const searchParams = useSearchParams();
  const redirectPath = searchParams.get("redirect");

  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await fetch("/api/auth/check");
        const data = await response.json();

        if (
          data.authenticated &&
          ["admin", "super-admin", "manager", "trainer"].includes(
            data.user?.role
          )
        ) {
          const dashboardUrl = getDashboardForRole(data.user.role);
          router.replace(dashboardUrl);
        }
      } catch (error) {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å:", error);
      }
    };

    checkAuth();
  }, [router]);

  const getDashboardForRole = (role: string): string => {
    switch (role) {
      case "admin":
      case "super-admin":
        return "/admin";
      case "manager":
        return "/manager-dashboard";
      case "trainer":
        return "/trainer-dashboard";
      default:
        return "/staff-dashboard";
    }
  };

  const handleStaffLogin = async (formData: any) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password,
          role: formData.role,
        }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        toast({
          title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
          description: `–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${getRoleDisplayName(data.user.role)}`,
        });

        const returnUrl = sessionStorage.getItem("returnUrl");
        if (returnUrl) {
          sessionStorage.removeItem("returnUrl");
          window.location.href = returnUrl;
          return;
        }

        const destination =
          data.dashboardUrl ||
          redirectPath ||
          getDashboardForRole(data.user.role);

        setTimeout(() => {
          window.location.href = destination;
        }, 500);
      } else {
        throw new Error(data.error || `–û—à–∏–±–∫–∞ ${response.status}`);
      }
    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞:", error);
      const errorMessage =
        error instanceof Error
          ? error.message
          : "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é";
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: errorMessage,
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasswordReset = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!resetEmail.trim()) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å",
      });
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch("/api/auth/forgot-password", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          email: resetEmail.trim().toLowerCase(),
          userType: "staff",
        }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        setResetSent(true);
        toast({
          title: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üìß",
          description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
        });
      } else {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description:
          error instanceof Error
            ? error.message
            : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const getRoleDisplayName = (role: string): string => {
    switch (role) {
      case "admin":
        return "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
      case "super-admin":
        return "–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";
      case "manager":
        return "–ú–µ–Ω–µ–¥–∂–µ—Ä";
      case "trainer":
        return "–¢—Ä–µ–Ω–µ—Ä";
      default:
        return "–ü–µ—Ä—Å–æ–Ω–∞–ª";
    }
  };

  const handleSuperAdminQuickLogin = async () => {
    setIsLoading(true);
    try {
      const response = await fetch("/api/debug/auth", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "test-login",
          email: "romangulanyan@gmail.com",
          password: "Hovik-1970",
        }),
      });

      const result = await response.json();

      if (result.success) {
        toast({
          title: "–ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!",
          description: "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        });

        const returnUrl = sessionStorage.getItem("returnUrl");
        if (returnUrl) {
          sessionStorage.removeItem("returnUrl");
          window.location.href = returnUrl;
        } else {
          window.location.href = "/admin";
        }
      } else {
        throw new Error("–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞: " + result.error);
      }
    } catch (error) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞",
        description:
          error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      });
      console.error("Quick login error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  const ForgotPasswordForm = () => (
    <Card className="shadow-xl">
      <CardHeader className="text-center pb-6">
        <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center mx-auto mb-4">
          <Mail className="h-8 w-8 text-white" />
        </div>
        <CardTitle className="text-2xl font-bold">
          {resetSent ? "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" : "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"}
        </CardTitle>
        <p className="text-gray-600">
          {resetSent
            ? "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"
            : "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"}
        </p>
      </CardHeader>

      <CardContent className="space-y-6">
        {resetSent ? (
          <div className="text-center space-y-4">
            <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
              <Mail className="h-12 w-12 text-green-600 mx-auto mb-2" />
              <p className="text-green-800 font-medium">
                –ü–∏—Å—å–º–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {resetEmail}
              </p>
              <p className="text-green-600 text-sm mt-2">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º", –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
              </p>
            </div>

            <div className="space-y-2">
              <Button
                onClick={() => {
                  setResetSent(false);
                  setResetEmail("");
                }}
                variant="outline"
                className="w-full"
                disabled={isLoading}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
              </Button>

              <Button
                onClick={() => setShowForgotPassword(false)}
                variant="ghost"
                className="w-full"
                disabled={isLoading}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
              </Button>
            </div>
          </div>
        ) : (
          <form onSubmit={handlePasswordReset} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Email –∞–¥—Ä–µ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ *
              </label>
              <ValidatedInput
                type="email"
                name="resetEmail"
                value={resetEmail}
                onChange={(e) => setResetEmail(e.target.value)}
                placeholder="your.email@company.com"
                required
                className="h-11 w-full"
              />
              <p className="text-xs text-gray-500 mt-1">
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π email –∞–¥—Ä–µ—Å
              </p>
            </div>

            <Button
              type="submit"
              disabled={isLoading || !resetEmail.trim()}
              className="w-full h-11"
            >
              {isLoading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
                </>
              ) : (
                <>
                  <Mail className="h-4 w-4 mr-2" />
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                </>
              )}
            </Button>

            <Button
              type="button"
              onClick={() => setShowForgotPassword(false)}
              variant="ghost"
              className="w-full"
              disabled={isLoading}
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É
            </Button>
          </form>
        )}
      </CardContent>
    </Card>
  );

  if (showForgotPassword) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
        <div className="max-w-md w-full">
          <ForgotPasswordForm />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
      <div className="max-w-md w-full space-y-6">
        <SmartForm
          type="staff-login"
          onSubmit={handleStaffLogin}
          isLoading={isLoading}
        />

        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
        <div className="text-center">
          <button
            type="button"
            onClick={() => setShowForgotPassword(true)}
            disabled={isLoading}
            className="text-blue-600 hover:text-blue-500 text-sm font-medium transition-colors disabled:opacity-50"
          >
            –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
          </button>
        </div>

        <div className="text-center">
          <Link
            href="/forgot-password"
            className="text-blue-600 hover:text-blue-500 text-sm transition-colors"
          >
            –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </Link>
        </div>

        <div className="text-center space-y-3">
          <p className="text-xs text-gray-500">–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ö–æ–¥–∞</p>
          <div className="space-y-2">
            <Link href="/member-login" className="block">
              <Button
                variant="outline"
                className="w-full h-10"
                disabled={isLoading}
              >
                üë§ –í—Ö–æ–¥ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
              </Button>
            </Link>
            <Link href="/" className="block">
              <Button
                variant="ghost"
                className="w-full h-8 text-xs"
                disabled={isLoading}
              >
                ‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
              </Button>
            </Link>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ */}
        <Card className="bg-red-50 border-red-200">
          <CardHeader>
            <CardTitle className="text-sm text-red-900">
              üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            </CardTitle>
          </CardHeader>
          <CardContent className="text-xs text-red-800 space-y-2">
            <p>üîê –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–∞—Ä–æ–ª—è–º</p>
            <p>üìß –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email –∞–¥—Ä–µ—Å–æ–≤</p>
            <p>üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π</p>
            <p>‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
            <p>üîÑ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</p>
          </CardContent>
        </Card>

        {/* –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ */}
        {process.env.NODE_ENV === "development" && (
          <Card className="bg-yellow-50 border-yellow-200">
            <CardHeader>
              <CardTitle className="text-sm text-yellow-900">
                üß™ –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button
                onClick={handleSuperAdminQuickLogin}
                variant="outline"
                size="sm"
                className="w-full text-xs"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="h-3 w-3 mr-2 animate-spin" />
                    –í—Ö–æ–¥–∏–º...
                  </>
                ) : (
                  "üëë –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"
                )}
              </Button>
              <p className="text-xs text-yellow-700 text-center">
                –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}
