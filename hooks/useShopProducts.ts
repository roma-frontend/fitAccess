"use client";

import { useEffect, useState, useMemo } from "react";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";
import { useShopProductsAPI, type ShopProduct } from './useShopProductsAPI';

export interface ShopProductStats {
  total: number;
  active: number;
  inStock: number;
  lowStock: number;
  outOfStock: number;
  totalValue: number;
  byCategory: Record<string, {
    count: number;
    inStock: number;
    totalValue: number;
    averagePrice: number;
  }>;
  lowStockProducts: Array<{
    id: string;
    name: string;
    currentStock: number;
    minStock: number;
    category: string;
  }>;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Products API
function isProductsApiAvailable() {
  try {
    return api && api.products && typeof api.products === 'object';
  } catch (error) {
    return false;
  }
}

// –û–¥–∏–Ω –º–æ–∫-–ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ fallback
function getMockProduct(): ShopProduct {
  return {
    _id: "mock_fallback" as Id<"products">,
    name: "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å (–¥–µ–º–æ)",
    description: "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–π –ø—Ä–æ—Ç–µ–∏–Ω –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã. –≠—Ç–æ –¥–µ–º–æ-–ø—Ä–æ–¥—É–∫—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
    category: "supplements",
    price: 2500,
    imageUrl: "https://via.placeholder.com/300x300/4F46E5/FFFFFF?text=Demo+Protein",
    inStock: 50,
    minStock: 10,
    isPopular: true,
    isActive: true,
    nutrition: {
      calories: 120,
      protein: 25,
      carbs: 3,
      fat: 1
    },
    createdAt: Date.now()
  };
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export function useShopProducts() {
  const { products, loading, error } = useShopProductsAPI();
  
  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º undefined
  if (loading) {
    console.log('‚è≥ useShopProducts: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ API...');
    return undefined;
  }
  
  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
  if (error) {
    console.log('‚ùå useShopProducts: –û—à–∏–±–∫–∞ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ:', error);
    return [getMockProduct()];
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
  if (products && products.length > 0) {
    console.log('‚úÖ useShopProducts: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API:', products.length);
    return products;
  }
  
  // –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
  console.log('üîÑ useShopProducts: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ');
  return [getMockProduct()];
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
export function useShopProduct(productId: Id<"products">) {
  let result;
  try {
    if (isProductsApiAvailable() && api.products?.getById) {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      result = useQuery(api.products.getById, { id: productId });
    }
  } catch (error) {
    console.warn('Product by ID API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    result = undefined;
  }

  return result ?? null;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export function useShopProductsByCategory(category: string) {
  const fallbackData: ShopProduct[] = category === 'supplements' ? [getMockProduct()] : [];

  let result;
  try {
    if (isProductsApiAvailable() && api.products?.getByCategory) {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      result = useQuery(api.products.getByCategory, { category });
    }
  } catch (error) {
    console.warn('Products by category API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    result = undefined;
  }

  return result ?? fallbackData;
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export function usePopularProducts() {
  const fallbackData: ShopProduct[] = [getMockProduct()];

  let result;
  try {
    if (isProductsApiAvailable() && api.products?.getPopular) {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      result = useQuery(api.products.getPopular, {});
    }
  } catch (error) {
    console.warn('Popular products API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    result = undefined;
  }

  return result ?? fallbackData;
}

// –•—É–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - –í–´–ß–ò–°–õ–Ø–ï–ú –ù–ê –ö–õ–ò–ï–ù–¢–ï
export function useShopProductStats() {
  const products = useShopProducts();

  return useMemo(() => {
    // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    if (products === undefined) {
      console.log('‚è≥ useShopProductStats: –ü—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è...');
      return undefined;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    if (!products || products.length === 0) {
      return {
        total: 0,
        active: 0,
        inStock: 0,
        lowStock: 0,
        outOfStock: 0,
        totalValue: 0,
        byCategory: {},
        lowStockProducts: []
      };
    }

    console.log('üìä useShopProductStats: –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è', products.length, '–ø—Ä–æ–¥—É–∫—Ç–æ–≤');

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats: ShopProductStats = {
      total: products.length,
      active: products.filter((p: ShopProduct) => p.isActive).length,
      inStock: products.filter((p: ShopProduct) => p.inStock > (p.minStock || 5)).length,
      lowStock: products.filter((p: ShopProduct) => p.inStock > 0 && p.inStock <= (p.minStock || 5)).length,
      outOfStock: products.filter((p: ShopProduct) => p.inStock === 0).length,
      totalValue: products.reduce((sum: number, p: ShopProduct) => sum + (p.price * p.inStock), 0),
      byCategory: products.reduce((acc: Record<string, any>, p: ShopProduct) => {
        if (!acc[p.category]) {
          acc[p.category] = {
            count: 0,
            inStock: 0,
            totalValue: 0,
            averagePrice: 0
          };
        }
        
        acc[p.category].count++;
        if (p.inStock > 0) acc[p.category].inStock++;
        acc[p.category].totalValue += p.price * p.inStock;
        
        return acc;
      }, {}),
      lowStockProducts: products
        .filter((p: ShopProduct) => p.inStock > 0 && p.inStock <= (p.minStock || 5))
        .map((p: ShopProduct) => ({
          id: p._id,
          name: p.name,
          currentStock: p.inStock,
          minStock: p.minStock || 5,
          category: p.category
        }))
    };

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    Object.keys(stats.byCategory).forEach((category: string) => {
      const categoryProducts = products.filter((p: ShopProduct) => p.category === category);
      const totalPrice = categoryProducts.reduce((sum: number, p: ShopProduct) => sum + p.price, 0);
      stats.byCategory[category].averagePrice = totalPrice / categoryProducts.length;
    });

    console.log('‚úÖ useShopProductStats: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞:', stats);
    return stats;
  }, [products]);
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Products API
export function useShopAvailability() {
  const [isAvailable, setIsAvailable] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const products = useShopProducts();

  useEffect(() => {
    const checkAvailability = () => {
      try {
        const available = isProductsApiAvailable();
        setIsAvailable(available);
        console.log('üîç useShopAvailability: API –¥–æ—Å—Ç—É–ø–µ–Ω:', available);
      } catch (error) {
        console.warn('Products API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        setIsAvailable(false);
      } finally {
        setIsLoading(false);
      }
    };

    checkAvailability();
  }, []);

  return { 
    isAvailable, 
    isLoading: isLoading || products === undefined,
    hasProducts: products && products.length > 0,
    productsCount: products?.length || 0
  };
}

// –•—É–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤–∫–ª—é—á–∞—è —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
export function useShopDebugProducts() {
  let result;
  try {
    if (isProductsApiAvailable() && api.products?.getAllForDebug) {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      result = useQuery(api.products.getAllForDebug, {});
    }
  } catch (error) {
    console.warn('Debug products API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    result = undefined;
  }

  return result ?? [getMockProduct()];
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å fallback –Ω–∞ –º–æ–∫
export function useShopProductsWithFallback() {
  const realData = useShopProducts();
  const { isAvailable } = useShopAvailability();

  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º undefined
  if (realData === undefined) {
    console.log('‚è≥ useShopProductsWithFallback: –ó–∞–≥—Ä—É–∑–∫–∞...');
    return undefined;
  }

  // –ï—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (isAvailable && realData && realData.length > 0) {
    console.log('‚úÖ useShopProductsWithFallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', realData.length);
    return realData;
  }

  // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
  console.log('üîÑ useShopProductsWithFallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ');
  return [getMockProduct()];
}

// –•—É–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å fallback
export function useShopProductStatsWithFallback() {
  const realData = useShopProductStats();
  const { isAvailable } = useShopAvailability();

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (realData !== undefined) {
    console.log('‚úÖ useShopProductStatsWithFallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    return realData;
  }

  // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
  console.log('üîÑ useShopProductStatsWithFallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  const mockProduct = getMockProduct();
  
  const fallbackStats: ShopProductStats = {
    total: 1,
    active: 1,
    inStock: 1,
    lowStock: 0,
    outOfStock: 0,
    totalValue: mockProduct.price * mockProduct.inStock,
    byCategory: {
      [mockProduct.category]: {
        count: 1,
        inStock: 1,
        totalValue: mockProduct.price * mockProduct.inStock,
        averagePrice: mockProduct.price
      }
    },
    lowStockProducts: []
  };

  return fallbackStats;
}

// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
export function getCategoryDisplayName(category: string): string {
  const names: Record<string, string> = {
    'supplements': '–î–æ–±–∞–≤–∫–∏',
    'drinks': '–ù–∞–ø–∏—Ç–∫–∏',
    'snacks': '–°–Ω–µ–∫–∏',
    'merchandise': '–¢–æ–≤–∞—Ä—ã'
  };
  return names[category] || category;
}

export function formatProductPrice(price: number): string {
  return new Intl.NumberFormat('ru-RU', {
    style: 'currency',
    currency: 'RUB',
    minimumFractionDigits: 0
  }).format(price);
}

export function getStockStatus(product: ShopProduct): 'in_stock' | 'low_stock' | 'out_of_stock' {
  if (product.inStock === 0) return 'out_of_stock';
  if (product.inStock <= (product.minStock || 5)) return 'low_stock';
  return 'in_stock';
}

export function getStockStatusText(status: 'in_stock' | 'low_stock' | 'out_of_stock'): string {
  const texts: Record<string, string> = {
    'in_stock': '–í –Ω–∞–ª–∏—á–∏–∏',
    'low_stock': '–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ',
    'out_of_stock': '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'
  };
  return texts[status];
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö—É–∫–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export {
  useShopProductsWithFallback as useProductsData,
  useShopProductStatsWithFallback as useProductStatsData,
  useShopAvailability as useAvailability
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤
export type { ShopProduct };
