// hooks/useProducts.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"use client";

import { useState, useEffect } from "react";

// –¢–∏–ø—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ
export interface Product {
  _id: string;
  name: string;
  description: string;
  category: 'supplements' | 'drinks' | 'snacks' | 'merchandise';
  price: number;
  inStock: number;
  isPopular?: boolean;
  isActive?: boolean; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ø–æ–ª–µ!
  image?: string;
  nutrition?: {
    calories?: number;
    protein?: number;
    carbs?: number;
    fat?: number;
    sugar?: number;
  };
  createdAt?: number;
  updatedAt?: number;
}

export interface ProductFormData {
  name: string;
  description: string;
  category: Product['category'];
  price: number;
  inStock: number;
  isPopular: boolean;
  nutrition: {
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
    sugar: number;
  };
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API
export function useProducts() {
  const [products, setProducts] = useState<Product[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchProducts = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API...");
      const response = await fetch('/api/products');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.success) {
        console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", result.count);
        const productsData = Array.isArray(result.data) ? result.data : [];
        setProducts(productsData);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ API:", result.error);
        setError(result.error);
        setProducts([]);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤';
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", err);
      setError(errorMessage);
      setProducts([]);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  return { 
    products: products || [],
    isLoading, 
    error, 
    refetch: fetchProducts 
  };
}

export function useProductsByCategory(category: string) {
  const { products } = useProducts();
  return Array.isArray(products) ? products.filter(p => p.category === category) : [];
}

export function usePopularProducts() {
  const { products } = useProducts();
  return Array.isArray(products) ? products.filter(p => p.isPopular) : [];
}

// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —á–µ—Ä–µ–∑ API
export function useProductManagement() {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const createProduct = async (productData: ProductFormData): Promise<boolean> => {
    setIsLoading(true);
    setError(null);

    try {
      console.log("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ API:", productData);
      
      const response = await fetch('/api/products', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(productData),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ API:", result.data);
        return true;
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", result.error);
        setError(result.error);
        return false;
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞';
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", err);
      setError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const updateProduct = async (id: string, productData: Partial<ProductFormData>): Promise<boolean> => {
    console.log("üîÑ useProductManagement: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", { id, productData });
    
    setIsLoading(true);
    setError(null);
  
    try {
      console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ API:", id, productData);
      
      const response = await fetch(`/api/products/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(productData),
      });
  
      console.log("üîÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);
  
      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå –û—à–∏–±–∫–∞ HTTP:", errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }
  
      const result = await response.json();
      console.log("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç API:", result);
      
      if (result.success) {
        console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ API:", result.data);
        return true;
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", result.error);
        setError(result.error);
        return false;
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞';
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", err);
      setError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  const deleteProduct = async (id: string, deleteType: 'soft' | 'hard' = 'soft'): Promise<boolean> => {
    console.log(`üîÑ useProductManagement: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è`, { id, deleteType });
    
    setIsLoading(true);
    setError(null);
  
    try {
      console.log(`üîÑ ${deleteType === 'hard' ? '–§–∏–∑–∏—á–µ—Å–∫–æ–µ' : '–ú—è–≥–∫–æ–µ'} —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ API:`, id);
      
      const url = `/api/products/${id}?type=${deleteType}`;
      console.log("üîÑ URL –∑–∞–ø—Ä–æ—Å–∞:", url);
      
      const response = await fetch(url, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });
  
      console.log("üîÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);
  
      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå –û—à–∏–±–∫–∞ HTTP:", errorText);
        throw new Error(`HTTP error! status: ${response.status}, ${errorText}`);
      }
  
      const result = await response.json();
      console.log("üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç API:", result);
      
      if (result.success) {
        console.log("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ API:", result.message);
        return true;
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", result.error);
        setError(result.error);
        return false;
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞';
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:", err);
      setError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    createProduct,
    updateProduct,
    deleteProduct,
    isLoading,
    error
  };
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Product
export function useProductsAsProduct(): Product[] {
  const { products } = useProducts();
  return Array.isArray(products) ? products : [];
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
export function useProductStats() {
  const { products } = useProducts();

  if (!Array.isArray(products) || products.length === 0) return null;

  return {
    total: products.length,
    inStock: products.filter(p => p.inStock > 10).length,
    lowStock: products.filter(p => p.inStock > 0 && p.inStock <= 10).length,
    outOfStock: products.filter(p => p.inStock === 0).length,
    totalValue: products.reduce((sum, p) => sum + (p.price * p.inStock), 0),
    averagePrice: products.length > 0 ? products.reduce((sum, p) => sum + p.price, 0) / products.length : 0,
    popularCount: products.filter(p => p.isPopular).length,
  };
}
