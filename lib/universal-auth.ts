// lib/universal-auth.ts
import { NextRequest } from 'next/server';
import { getSession } from '@/lib/simple-auth';
import jwt from 'jsonwebtoken';

interface User {
  id: string;
  email: string;
  role: string;
  name?: string;
}

interface AuthResult {
  authenticated: boolean;
  user: User | null;
  system: 'sessions' | 'jwt' | 'none';
  error?: string;
}

export function getAuthFromRequest(request: NextRequest): AuthResult {
  try {
    console.log('üîç universal-auth: –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const sessionId = request.cookies.get('session_id')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    const finalSessionId = sessionId || sessionIdDebug;
    
    console.log('üç™ universal-auth: session_id –Ω–∞–π–¥–µ–Ω:', !!sessionId);
    console.log('üç™ universal-auth: session_id_debug –Ω–∞–π–¥–µ–Ω:', !!sessionIdDebug);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (finalSessionId) {
      const session = getSession(finalSessionId);
      console.log('üë§ universal-auth: —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞:', !!session);

      if (session) {
        console.log('‚úÖ universal-auth: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é —É—Å–ø–µ—à–Ω–∞');
        return {
          authenticated: true,
          user: {
            id: session.user.id,
            email: session.user.email,
            role: session.user.role,
            name: session.user.name
          },
          system: 'sessions'
        };
      }
    }

    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
    const authToken = request.cookies.get('auth_token')?.value;
    console.log('üîë universal-auth: auth_token –Ω–∞–π–¥–µ–Ω:', !!authToken);
    
    if (authToken) {
      try {
        if (!process.env.JWT_SECRET) {
          console.error('‚ùå universal-auth: JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          return {
            authenticated: false,
            user: null,
            system: 'none',
            error: 'JWT_SECRET not configured'
          };
        }

        console.log('üîç universal-auth: –ø—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω...');
        const decoded = jwt.verify(authToken, process.env.JWT_SECRET) as any;
        console.log('‚úÖ universal-auth: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ JWT —É—Å–ø–µ—à–Ω–∞');

        return {
          authenticated: true,
          user: {
            id: decoded.userId,
            email: decoded.email,
            role: decoded.role,
            name: decoded.name
          },
          system: 'jwt'
        };

      } catch (jwtError) {
        console.error('‚ùå universal-auth: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT:', jwtError);
        return {
          authenticated: false,
          user: null,
          system: 'none',
          error: `JWT verification failed: ${jwtError instanceof Error ? jwtError.message : 'Unknown error'}`
        };
      }
    }

    // –ù–∏ —Å–µ—Å—Å–∏–∏, –Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç
    console.log('‚ùå universal-auth: –Ω–∏ —Å–µ—Å—Å–∏–∏, –Ω–∏ JWT —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return {
      authenticated: false,
      user: null,
      system: 'none',
      error: 'No valid session_id or auth_token found'
    };

  } catch (error) {
    console.error('‚ùå universal-auth: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return {
      authenticated: false,
      user: null,
      system: 'none',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏
export function requireRole(auth: AuthResult, allowedRoles: string[]): boolean {
  if (!auth.authenticated || !auth.user) {
    return false;
  }
  
  return allowedRoles.includes(auth.user.role);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export function createAuthErrorResponse(auth: AuthResult, requiredRoles?: string[]) {
  if (!auth.authenticated) {
    return {
      success: false,
      error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      debug: {
        system: auth.system,
        error: auth.error
      }
    };
  }
  
  if (requiredRoles && !requireRole(auth, requiredRoles)) {
    return {
      success: false,
      error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
      debug: {
        userRole: auth.user?.role,
        requiredRoles,
        system: auth.system
      }
    };
  }
  
  return null;
}
