// lib/users-db.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import bcrypt from "bcryptjs";
import { ConvexHttpClient } from "convex/browser";

const client = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Convex (—Å _id)
export interface User {
  _id: string;
  email: string;
  password: string;
  role: 'super-admin' | 'admin' | 'manager' | 'trainer' | 'member';
  name: string;
  createdAt: number;
  createdBy?: string;
  isActive: boolean;
  lastLogin?: number;
  photoUrl?: string;
  faceDescriptor?: number[];
  faceRecognitionEnabled?: boolean;
  faceDescriptorUpdatedAt?: number;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  phone?: string;
  bio?: string;
  specializations?: string[];
  experience?: number;
  hourlyRate?: number;
  workingHours?: any;
  rating?: number;
  totalReviews?: number;
  status?: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ _id)
export interface CreateUserData {
  email: string;
  password: string;
  role: UserRole;
  name: string;
  isActive: boolean;
  createdBy?: string;
  photoUrl?: string;
  faceDescriptor?: number[];
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  phone?: string;
  bio?: string;
  specializations?: string[];
  experience?: number;
  hourlyRate?: number;
}

export type UserRole = 'super-admin' | 'admin' | 'manager' | 'trainer' | 'member';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–æ–ª–∏
export function isValidRole(role: string): role is UserRole {
  return ['super-admin', 'admin', 'manager', 'trainer', 'member'].includes(role);
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
export async function findUserById(id: string): Promise<User | null> {
  try {
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ ID:', id);
    
    // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const user: User | null = await client.query("users:getUserOrTrainerById", { userId: id });
    
    if (user) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—Ç—Ä–µ–Ω–µ—Ä:', user.email, user.role);
      // –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const { source, tableType, ...cleanUser } = user as any;
      return cleanUser;
    }
    
    console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/—Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID:', id);
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID:', error);
    return null;
  }
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function createUser(userData: CreateUserData, createdBy: string): Promise<User> {
  try {
    console.log(`üîß –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: ${userData.email}`);
    console.log('üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      email: userData.email,
      name: userData.name,
      role: userData.role,
      isActive: userData.isActive
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const existingUser: User | null = await client.query("users:getByEmail", { email: userData.email });
    if (existingUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', userData.email);
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
    if (!isValidRole(userData.role)) {
      console.log('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å:', userData.role);
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å: ${userData.role}`);
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º Convex mutation...');
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Convex
    const convexData = {
      email: userData.email,
      password: userData.password,
      name: userData.name,
      role: userData.role,
      isActive: userData.isActive,
      createdAt: Date.now(),
      createdBy: createdBy,
      photoUrl: userData.photoUrl,
      faceDescriptor: userData.faceDescriptor || [],
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      phone: userData.phone || '',
      bio: userData.bio || '',
      specializations: userData.specializations || [],
      experience: userData.experience || 0,
      hourlyRate: userData.hourlyRate || 0,
    };
    
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Convex:', convexData);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userId: string = await client.mutation("users:create", convexData);
    
    console.log('‚úÖ Convex mutation –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, ID:', userId);
    
    // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const newUser: User | null = await findUserById(userId);
    
    if (!newUser) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î: ${newUser.email} (${newUser.role})`);
    return newUser;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (error instanceof Error) {
      console.error('üìã –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('üìã Stack:', error.stack);
    }
    
    throw error;
  }
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function updateUser(id: string, updates: Partial<User>, updatedBy: string): Promise<User | null> {
  try {
    console.log(`üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: ${id}`);
    
    const user = await findUserById(id);
    if (!user) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if (user.role === 'super-admin' && user.email === 'romangulanyan@gmail.com') {
      throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
    // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    await client.mutation("users:updateUserOrTrainer", { 
      userId: id, // ‚úÖ –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ userId
      updates: {
        name: updates.name,
        email: updates.email,
        role: updates.role,
        isActive: updates.isActive,
        photoUrl: updates.photoUrl,
        password: updates.password,
        phone: updates.phone,
        bio: updates.bio,
        specializations: updates.specializations,
        experience: updates.experience,
        hourlyRate: updates.hourlyRate,
      }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await findUserById(id);
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î: ${user.email}`);
    return updatedUser;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function deleteUser(id: string, deletedBy: string): Promise<boolean> {
  try {
    console.log(`üîß –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: ${id}`);
    
    const user = await findUserById(id);
    if (!user) {
      return false;
    }
    
    // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    if (user.role === 'super-admin' && user.email === 'romangulanyan@gmail.com') {
      throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    const userType = await client.query("users:getUserType", { userId: id });
    
    if (userType === 'trainer') {
      // –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–Ω–µ—Ä, —É–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trainers
      await client.mutation("trainers:deleteTrainer", { id });
    } else {
      // –ò–Ω–∞—á–µ —É–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
      await client.mutation("users:deleteUser", { userId: id });
    }
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î: ${user.email}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function getAllUsers(): Promise<User[]> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    const users: User[] = await client.query("users:getAll");
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trainers
    const trainers: User[] = await client.query("trainers:getAllTrainers") || [];
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const allUsers = [
      ...users,
      ...trainers.map(trainer => ({
        ...trainer,
        role: 'trainer' as UserRole // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
      }))
    ];
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}, —Ç—Ä–µ–Ω–µ—Ä–æ–≤: ${trainers.length}`);
    return allUsers;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    return [];
  }
}

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function getUserStats(): Promise<Record<UserRole, number>> {
  try {
    const allUsers = await getAllUsers();
    const stats: Record<UserRole, number> = {
      'super-admin': 0,
      'admin': 0,
      'manager': 0,
      'trainer': 0,
      'member': 0
    };
    
    allUsers.forEach((user: User) => {
      if (isValidRole(user.role)) {
        stats[user.role]++;
      }
    });
    
    return stats;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return {
      'super-admin': 0,
      'admin': 0,
      'manager': 0,
      'trainer': 0,
      'member': 0
    };
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
export async function initializeSuperAdmin(): Promise<void> {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –≤ –ë–î...');
    
    const existingSuperAdmin: User | null = await client.query("users:getByEmail", { 
      email: "romangulanyan@gmail.com" 
    });
    
    if (existingSuperAdmin) {
      console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î:', existingSuperAdmin.email);
      return;
    }
    
    console.log('üîß –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –≤ –ë–î...');
    
    const superAdminId = await client.mutation("users:create", {
      email: "romangulanyan@gmail.com",
      password: "Hovik-1970",
      name: "Roman Gulanyan",
      role: "super-admin",
      isActive: true,
      createdAt: Date.now(),
    });
    
    console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω –≤ –ë–î —Å ID:', superAdminId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:', error);
  }
}

export async function validatePassword(email: string, password: string): Promise<User | null> {
  try {
    console.log(`üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: ${email}`);
    
    const user: User | null = await client.query("users:getByEmail", { email });
    
    if (!user) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: ${email}`);
      return null;
    }
    
    if (!user.isActive) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: ${email}`);
      return null;
    }
    
    console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –¥–ª—è: ${email}`);
    
    let isPasswordValid = false;
    
    if (user.password.length < 50) {
      console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (–Ω–µ—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å)`);
      isPasswordValid = user.password === password;
    } else {
      console.log(`üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º bcrypt —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å)`);
      isPasswordValid = await bcrypt.compare(password, user.password);
    }
    
    if (isPasswordValid) {
      console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${user.email} (${user.role})`);
      
      // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
      await client.mutation("users:updateLastLogin", {
        userId: user._id, // ‚úÖ –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ userId
        timestamp: Date.now()
      });
      
      return user;
    }
    
    console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è: ${email}`);
    return null;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è:', error);
    return null;
  }
}

export async function findUserByEmail(email: string): Promise<User | null> {
  try {
    const user: User | null = await client.query("users:getByEmail", { email });
    return user;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email:', error);
    return null;
  }
}

export function canCreateRole(creatorRole: string, targetRole: string): boolean {
    if (!isValidRole(creatorRole) || !isValidRole(targetRole)) {
    return false;
  }

  const hierarchy: Record<UserRole, UserRole[]> = {
    'super-admin': ['admin', 'manager', 'trainer', 'member'],
    'admin': ['manager', 'trainer', 'member'],
    'manager': ['trainer', 'member'],
    'trainer': ['member'],
    'member': []
  };

  return hierarchy[creatorRole]?.includes(targetRole) || false;
}

export function canManageUser(managerRole: string, targetUserRole: string): boolean {
  if (!isValidRole(managerRole) || !isValidRole(targetUserRole)) {
    return false;
  }

  if (managerRole === 'super-admin') {
    return targetUserRole !== 'super-admin';
  }
  
  if (managerRole === 'admin') {
    return (['manager', 'trainer', 'member'] as UserRole[]).includes(targetUserRole);
  }
  
  if (managerRole === 'manager') {
    return (['trainer', 'member'] as UserRole[]).includes(targetUserRole);
  }
  
  return false;
}

export function getRoleDisplayName(role: string): string {
  if (!isValidRole(role)) {
    return role;
  }

  const roleNames: Record<UserRole, string> = {
    'super-admin': '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    'trainer': '–¢—Ä–µ–Ω–µ—Ä',
    'member': '–£—á–∞—Å—Ç–Ω–∏–∫'
  };
  
  return roleNames[role] || role;
}

export async function hasSuperAdmin(): Promise<boolean> {
  try {
    const superAdmin: User | null = await client.query("users:getByEmail", { 
      email: "romangulanyan@gmail.com" 
    });
    return !!superAdmin;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:', error);
    return false;
  }
}

export function getAvailableRolesForCreation(creatorRole: string): { value: UserRole; label: string }[] {
  if (!isValidRole(creatorRole)) {
    return [];
  }

  const hierarchy: Record<UserRole, UserRole[]> = {
    'super-admin': ['admin', 'manager', 'trainer', 'member'],
    'admin': ['manager', 'trainer', 'member'],
    'manager': ['trainer', 'member'],
    'trainer': ['member'],
    'member': []
  };

  const availableRoles = hierarchy[creatorRole] || [];
  
  return availableRoles.map(role => ({
    value: role,
    label: getRoleDisplayName(role)
  }));
}

