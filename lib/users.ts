// lib/users.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫ TypeScript)
export interface User {
  id: string;
  email: string;
  password: string;
  role: 'super-admin' | 'admin' | 'manager' | 'trainer' | 'member';
  name: string;
  createdAt: number;
  createdBy?: string; // –∫—Ç–æ —Å–æ–∑–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  isActive: boolean;
}

// –¢–∏–ø—ã –¥–ª—è —Ä–æ–ª–µ–π
type UserRole = 'super-admin' | 'admin' | 'manager' | 'trainer' | 'member';

const SUPER_ADMIN: User = {
  id: 'super-admin-roman-001',
  email: 'romangulanyan@gmail.com',
  password: 'Hovik-1970',
  role: 'super-admin',
  name: 'Roman Gulanyan',
  createdAt: Date.now(),
  isActive: true
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏
const users = new Map<string, User>();

function initializeSuperAdmin() {
  if (!users.has(SUPER_ADMIN.email)) {
    users.set(SUPER_ADMIN.email, SUPER_ADMIN);
    console.log('‚úÖ –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', SUPER_ADMIN.email);
  } else {
    console.log('‚ÑπÔ∏è –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', SUPER_ADMIN.email);
  }
}

// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
initializeSuperAdmin();

export function createUser(userData: Omit<User, 'id' | 'createdAt'>, createdBy: string): User {
  const existingUser = users.get(userData.email);
  if (existingUser) {
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }

  const user: User = {
    ...userData,
    id: generateUserId(),
    createdAt: Date.now(),
    createdBy
  };

  users.set(user.email, user);
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.email} (${user.role}) —Å–æ–∑–¥–∞–ª: ${createdBy}`);
  
  return user;
}

export function findUserByEmail(email: string): User | undefined {
  return users.get(email);
}

export function findUserById(id: string): User | undefined {
  for (const user of users.values()) {
    if (user.id === id) {
      return user;
    }
  }
  return undefined;
}

export function validatePassword(email: string, password: string): User | null {
  const user = users.get(email);
  if (!user || !user.isActive) {
    return null;
  }
  
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
  if (user.password === password) {
    console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ${user.email} (${user.role})`);
    return user;
  }
  
  console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è: ${email}`);
  return null;
}

export function getAllUsers(): User[] {
  return Array.from(users.values());
}

export function updateUser(id: string, updates: Partial<User>, updatedBy: string): User | null {
  const user = findUserById(id);
  if (!user) {
    return null;
  }

  // –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
  if (user.role === 'super-admin' && user.email === SUPER_ADMIN.email) {
    throw new Error('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }

  const updatedUser = { ...user, ...updates };
  
  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è email, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –≤ Map
  if (updates.email && updates.email !== user.email) {
    users.delete(user.email);
    users.set(updates.email, updatedUser);
  } else {
    users.set(user.email, updatedUser);
  }
  
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${user.email} –æ–±–Ω–æ–≤–∏–ª: ${updatedBy}`);
  return updatedUser;
}

export function deleteUser(id: string, deletedBy: string): boolean {
  const user = findUserById(id);
  if (!user) {
    return false;
  }

  // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
  if (user.role === 'super-admin' && user.email === SUPER_ADMIN.email) {
    throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
  }

  const deleted = users.delete(user.email);
  if (deleted) {
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: ${user.email} —É–¥–∞–ª–∏–ª: ${deletedBy}`);
  }
  
  return deleted;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π
export function canCreateRole(creatorRole: UserRole, targetRole: UserRole): boolean {
  const hierarchy: Record<UserRole, UserRole[]> = {
    'super-admin': ['admin', 'manager', 'trainer', 'member'],
    'admin': ['manager', 'trainer', 'member'],
    'manager': ['trainer', 'member'],
    'trainer': ['member'],
    'member': []
  };

  return hierarchy[creatorRole]?.includes(targetRole) || false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export function canManageUser(managerRole: UserRole, targetUserRole: UserRole): boolean {
  if (managerRole === 'super-admin') {
    return targetUserRole !== 'super-admin'; // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ–º–∏ –∫—Ä–æ–º–µ –¥—Ä—É–≥–∏—Ö —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
  }
  
  if (managerRole === 'admin') {
    return (['manager', 'trainer', 'member'] as UserRole[]).includes(targetUserRole);
  }
  
  if (managerRole === 'manager') {
    return (['trainer', 'member'] as UserRole[]).includes(targetUserRole);
  }
  
  return false;
}

function generateUserId(): string {
  return 'user_' + Math.random().toString(36).substring(2) + Date.now().toString(36);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function debugUsers(): void {
  console.log('\n=== DEBUG USERS ===');
  console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.size}`);
  
  users.forEach((user) => {
    console.log(`üë§ ${user.email} (${user.role}) - ${user.name} - ${user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    if (user.createdBy) {
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user.createdBy} –≤ ${new Date(user.createdAt).toLocaleString()}`);
    }
  });
  console.log('=== END DEBUG USERS ===\n');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ–ª—è–º–∏
export function getRoleDisplayName(role: UserRole): string {
  const roleNames: Record<UserRole, string> = {
    'super-admin': '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
    'trainer': '–¢—Ä–µ–Ω–µ—Ä',
    'member': '–£—á–∞—Å—Ç–Ω–∏–∫'
  };
  
  return roleNames[role] || role;
}

export function getRoleHierarchyLevel(role: UserRole): number {
  const levels: Record<UserRole, number> = {
    'super-admin': 5,
    'admin': 4,
    'manager': 3,
    'trainer': 2,
    'member': 1
  };
  
  return levels[role] || 0;
}

export function canAccessRole(userRole: UserRole, targetRole: UserRole): boolean {
  return getRoleHierarchyLevel(userRole) >= getRoleHierarchyLevel(targetRole);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export function getUserStats(): Record<UserRole, number> {
  const stats: Record<UserRole, number> = {
    'super-admin': 0,
    'admin': 0,
    'manager': 0,
    'trainer': 0,
    'member': 0
  };
  
  users.forEach((user) => {
    stats[user.role]++;
  });
  
  return stats;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
export function getUsersByRole(role: UserRole): User[] {
  return Array.from(users.values()).filter(user => user.role === role);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
export function hasSuperAdmin(): boolean {
  return users.has(SUPER_ADMIN.email);
}
