// lib/simple-auth.ts
import { UserRole } from '@/lib/permissions';

export interface User {
  id: string;
  email: string;
  role: UserRole;
  name: string;
}

export interface Session {
  id: string;
  user: User;
  createdAt: Date;
  expiresAt: Date;
  lastAccessed: Date;
}

// –ú–æ–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
const mockUsers: User[] = [
  {
    id: 'super_admin_1',
    email: 'romangulanyan@gmail.com',
    role: 'super-admin',
    name: '–†–æ–º–∞–Ω –ì—É–ª–∞–Ω—è–Ω'
  },
  {
    id: 'admin_1',
    email: 'admin@fitnessstudio.ru',
    role: 'admin',
    name: '–ï–ª–µ–Ω–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
  },
  {
    id: 'trainer_1',
    email: 'alex.petrov@fitnessstudio.ru',
    role: 'trainer',
    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤'
  },
  {
    id: 'trainer_2',
    email: 'maria.ivanova@fitnessstudio.ru',
    role: 'trainer',
    name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞'
  },
  {
    id: 'trainer_3',
    email: 'dmitry.sidorov@fitnessstudio.ru',
    role: 'trainer',
    name: '–î–º–∏—Ç—Ä–∏–π –°–∏–¥–æ—Ä–æ–≤'
  },
  {
    id: 'manager_1',
    email: 'manager@fitnessstudio.ru',
    role: 'manager',
    name: '–ê–Ω–Ω–∞ –ú–µ–Ω–µ–¥–∂–µ—Ä'
  },
  {
    id: 'member_1',
    email: 'anna.smirnova@email.com',
    role: 'member',
    name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞'
  },
  {
    id: 'client_1',
    email: 'igor.volkov@email.com',
    role: 'client',
    name: '–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤'
  },
  {
    id: 'client_2',
    email: 'olga.kuznetsova@email.com',
    role: 'client',
    name: '–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞'
  },
  {
    id: 'client_3',
    email: 'maxim.fedorov@email.com',
    role: 'client',
    name: '–ú–∞–∫—Å–∏–º –§–µ–¥–æ—Ä–æ–≤'
  },
  {
    id: 'client_4',
    email: 'svetlana.novikova@email.com',
    role: 'client',
    name: '–°–≤–µ—Ç–ª–∞–Ω–∞ –ù–æ–≤–∏–∫–æ–≤–∞'
  }
];

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
const sessions = new Map<string, Session>();

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
export const createSession = (user: User): string => {
  const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  const now = new Date();
  const session: Session = {
    id: sessionId,
    user,
    createdAt: now,
    expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 –¥–Ω–µ–π
    lastAccessed: now
  };

  sessions.set(sessionId, session);
  console.log(`‚úÖ Session: —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è ${user.email} (${user.role})`);
  
  return sessionId;
};

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const authenticate = (email: string, password: string): Session | null => {
  console.log(`üîê Auth: –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è ${email}`);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
  if (email === 'romangulanyan@gmail.com' && password === 'Hovik-1970') {
    const user = mockUsers.find(u => u.email === email);
    if (user) {
      const sessionId = createSession(user);
      const session = sessions.get(sessionId);
      console.log(`‚úÖ Auth: —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
      return session || null;
    }
  }
  
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
  if (password !== 'password123') {
    console.log('‚ùå Auth: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
    return null;
  }

  const user = mockUsers.find(u => u.email === email);
  if (!user) {
    console.log('‚ùå Auth: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
  }

  // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
  const sessionId = createSession(user);
  const session = sessions.get(sessionId);
  
  return session || null;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
export const getSession = (sessionId: string): Session | null => {
  const session = sessions.get(sessionId);
  
  if (!session) {
    return null;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
  if (session.expiresAt < new Date()) {
    sessions.delete(sessionId);
    console.log('‚è∞ Auth: —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞');
    return null;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  session.lastAccessed = new Date();
  sessions.set(sessionId, session);

  return session;
};

// –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
export const logout = (sessionId: string): boolean => {
  const deleted = sessions.delete(sessionId);
  if (deleted) {
    console.log('üëã Auth: —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
  return deleted;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
export const getUserById = (userId: string): User | null => {
  return mockUsers.find(u => u.id === userId) || null;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
export const getUserByEmail = (email: string): User | null => {
  return mockUsers.find(u => u.email === email) || null;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export const getAllUsers = (): User[] => {
  return [...mockUsers]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª–∏
export const getUsersByRole = (role: UserRole): User[] => {
  return mockUsers.filter(u => u.role === role);
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const createUser = (userData: Omit<User, 'id'>): User => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email —É–Ω–∏–∫–∞–ª–µ–Ω
  if (emailExists(userData.email)) {
    throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  }

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–æ–ª—å
  if (!isValidRole(userData.role)) {
    throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  const newUser: User = {
    ...userData,
    id: `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  };
  
  mockUsers.push(newUser);
  console.log(`‚ûï Auth: —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUser.email} (${newUser.role})`);
  
  return newUser;
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUser = (userId: string, updates: Partial<Omit<User, 'id'>>): User | null => {
  const userIndex = mockUsers.findIndex(u => u.id === userId);
  
  if (userIndex === -1) {
    console.log(`‚ùå Auth: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    return null;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  if (updates.email && updates.email !== mockUsers[userIndex].email) {
    if (emailExists(updates.email)) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  }

  // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–æ–ª—å –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
  if (updates.role && !isValidRole(updates.role)) {
    throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  mockUsers[userIndex] = { ...mockUsers[userIndex], ...updates };
  console.log(`üìù Auth: –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`);
  
  return mockUsers[userIndex];
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const deleteUser = (userId: string): boolean => {
  const userIndex = mockUsers.findIndex(u => u.id === userId);
  
  if (userIndex === -1) {
    console.log(`‚ùå Auth: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
    return false;
  }

  const deletedUser = mockUsers.splice(userIndex, 1)[0];
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  for (const [sessionId, session] of sessions.entries()) {
    if (session.user.id === userId) {
      sessions.delete(sessionId);
    }
  }
  
  console.log(`üóëÔ∏è Auth: —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${deletedUser.email}`);
  return true;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email
export const emailExists = (email: string): boolean => {
  return mockUsers.some(u => u.email === email);
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
export const isValidRole = (role: string): role is UserRole => {
  return ['super-admin', 'admin', 'manager', 'trainer', 'member', 'client'].includes(role);
};

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
export const changePassword = (userId: string, oldPassword: string, newPassword: string): boolean => {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
  console.log(`üîë Auth: —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  
  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  if (newPassword.length < 6) {
    throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  // –í –º–æ–∫–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
  return true;
};

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
export const resetPassword = (email: string): string | null => {
  const user = getUserByEmail(email);
  if (!user) {
    console.log(`‚ùå Auth: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è`);
    return null;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
  const tempPassword = Math.random().toString(36).substr(2, 10);
  
  console.log(`üîÑ Auth: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${email}: ${tempPassword}`);
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ email
  return tempPassword;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
export const isSessionActive = (sessionId: string): boolean => {
  const session = getSession(sessionId);
  return session !== null;
};

// –ü—Ä–æ–¥–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
export const extendSession = (sessionId: string, hours: number = 24): boolean => {
  const session = sessions.get(sessionId);
  if (!session) {
    return false;
  }

  session.expiresAt = new Date(Date.now() + hours * 60 * 60 * 1000);
  sessions.set(sessionId, session);
  
  console.log(`‚è∞ Auth: —Å–µ—Å—Å–∏—è ${sessionId} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ ${hours} —á–∞—Å–æ–≤`);
  return true;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserSessions = (userId: string): Session[] => {
  const userSessions: Session[] = [];
  
  for (const session of sessions.values()) {
    if (session.user.id === userId && session.expiresAt > new Date()) {
      userSessions.push(session);
    }
  }
  
  return userSessions;
};

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const logoutAllUserSessions = (userId: string): number => {
  let deletedCount = 0;
  
  for (const [sessionId, session] of sessions.entries()) {
    if (session.user.id === userId) {
      sessions.delete(sessionId);
      deletedCount++;
    }
  }
  
  console.log(`üëã Auth: –∑–∞–≤–µ—Ä—à–µ–Ω–æ ${deletedCount} —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  return deletedCount;
};

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π
export const cleanupExpiredSessions = (): number => {
  let deletedCount = 0;
  const now = new Date();
  
  for (const [sessionId, session] of sessions.entries()) {
    if (session.expiresAt < now) {
      sessions.delete(sessionId);
      deletedCount++;
    }
  }
  
  if (deletedCount > 0) {
    console.log(`üßπ Auth: –æ—á–∏—â–µ–Ω–æ ${deletedCount} –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π`);
  }
  
  return deletedCount;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const getAuthStats = () => {
  const now = new Date();
  const activeSessions = Array.from(sessions.values()).filter(s => s.expiresAt > now);
  
  return {
    totalUsers: mockUsers.length,
    usersByRole: {
      'super-admin': mockUsers.filter(u => u.role === 'super-admin').length,
      admin: mockUsers.filter(u => u.role === 'admin').length,
      manager: mockUsers.filter(u => u.role === 'manager').length,
      trainer: mockUsers.filter(u => u.role === 'trainer').length,
      member: mockUsers.filter(u => u.role === 'member').length,
      client: mockUsers.filter(u => u.role === 'client').length
    },
    activeSessions: activeSessions.length,
    totalSessions: sessions.size
  };
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
if (typeof window === 'undefined') { // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  setInterval(() => {
    cleanupExpiredSessions();
  }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ development)
export const debugAuth = process.env.NODE_ENV === 'development' ? {
  getAllSessions: () => Array.from(sessions.entries()),
  clearAllSessions: () => {
    sessions.clear();
    console.log('üßπ Debug: –≤—Å–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã');
  },
  addMockUser: (user: Omit<User, 'id'>) => createUser(user),
  getMockUsers: () => [...mockUsers],
  getSessionsCount: () => sessions.size,
  getActiveSessionsCount: () => {
    const now = new Date();
    return Array.from(sessions.values()).filter(s => s.expiresAt > now).length;
  }
} : undefined;
