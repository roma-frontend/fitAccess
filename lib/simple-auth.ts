// lib/simple-auth.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏)
interface User {
  id: string;
  email: string;
  role: string;
  name: string;
}

interface Session {
  user: User;
  createdAt: number;
  lastAccessed: number;
}

interface SessionStats {
  totalSessions: number;
  activeSessions: number;
  expiredSessions: number;
  averageSessionDuration: number;
  sessionsByRole: Record<string, number>;
  recentActivity: Array<{
    sessionId: string;
    user: User;
    lastAccessed: number;
  }>;
}

interface UserSessionInfo {
  sessionId: string;
  session: Session;
}

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
const sessions = new Map<string, Session>();

export function createSession(user: User): string {
  const sessionId = generateSessionId();
  const session: Session = {
    user,
    createdAt: Date.now(),
    lastAccessed: Date.now()
  };
  
  sessions.set(sessionId, session);
  console.log(`‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${sessionId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}`);
  console.log(`üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessions.size}`);
  console.log(`üìã –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π:`, Array.from(sessions.keys()).map(id => id.substring(0, 20) + '...'));
  
  return sessionId;
}

export function getSession(sessionId: string): Session | null {
  console.log(`üîç –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–∏: ${sessionId.substring(0, 20)}...`);
  console.log(`üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${sessions.size}`);
  console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Å—Å–∏–∏:`, Array.from(sessions.keys()).map(id => id.substring(0, 20) + '...'));
  
  const session = sessions.get(sessionId);
  
  if (!session) {
    console.log(`‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${sessionId.substring(0, 20)}...`);
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ (7 –¥–Ω–µ–π)
  const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const now = Date.now();
  
  if (now - session.createdAt > maxAge) {
    console.log(`‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞: ${sessionId.substring(0, 20)}...`);
    sessions.delete(sessionId);
    return null;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  session.lastAccessed = now;
  sessions.set(sessionId, session);
  
  console.log(`‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${sessionId.substring(0, 20)}... –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${session.user.email}`);
  return session;
}

export function deleteSession(sessionId: string): boolean {
  const deleted = sessions.delete(sessionId);
  console.log(`üóëÔ∏è –°–µ—Å—Å–∏—è ${deleted ? '—É–¥–∞–ª–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'}: ${sessionId.substring(0, 20)}...`);
  console.log(`üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessions.size}`);
  return deleted;
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Map –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞
export function getAllSessions(): Map<string, Session> {
  return new Map(sessions);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∫–∞–∫ –º–∞—Å—Å–∏–≤–∞
export function getAllSessionsArray(): Session[] {
  return Array.from(sessions.values());
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π
export function getSessionStats(): SessionStats {
  const now = Date.now();
  const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
  
  let activeSessions = 0;
  let expiredSessions = 0;
  let totalDuration = 0;
  const sessionsByRole: Record<string, number> = {};
  const recentActivity: Array<{
    sessionId: string;
    user: User;
    lastAccessed: number;
  }> = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
  for (const [sessionId, session] of sessions.entries()) {
    const isExpired = now - session.createdAt > maxAge;
    
    if (isExpired) {
      expiredSessions++;
    } else {
      activeSessions++;
      totalDuration += now - session.createdAt;
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–æ–ª—è–º
      const role = session.user.role;
      sessionsByRole[role] = (sessionsByRole[role] || 0) + 1;
      
      // –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
      if (now - session.lastAccessed < 24 * 60 * 60 * 1000) {
        recentActivity.push({
          sessionId: sessionId.substring(0, 20) + '...',
          user: session.user,
          lastAccessed: session.lastAccessed
        });
      }
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  recentActivity.sort((a, b) => b.lastAccessed - a.lastAccessed);

  return {
    totalSessions: sessions.size,
    activeSessions,
    expiredSessions,
    averageSessionDuration: activeSessions > 0 ? totalDuration / activeSessions : 0,
    sessionsByRole,
    recentActivity: recentActivity.slice(0, 10) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  };
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function getUserSessions(userId: string): UserSessionInfo[] {
  const userSessions: UserSessionInfo[] = [];
  
  for (const [sessionId, session] of sessions.entries()) {
    if (session.user.id === userId) {
      userSessions.push({
        sessionId,
        session
      });
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
  userSessions.sort((a, b) => b.session.createdAt - a.session.createdAt);
  
  return userSessions;
}

export function clearAllSessions(): void {
  const count = sessions.size;
  sessions.clear();
  console.log(`üßπ –û—á–∏—â–µ–Ω—ã –≤—Å–µ —Å–µ—Å—Å–∏–∏: ${count} —Å–µ—Å—Å–∏–π —É–¥–∞–ª–µ–Ω–æ`);
}

function generateSessionId(): string {
  return Math.random().toString(36).substring(2) + 
         Date.now().toString(36) + 
         Math.random().toString(36).substring(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
export function cleanupExpiredSessions(): number {
  const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
  const now = Date.now();
  let cleaned = 0;
  
  for (const [sessionId, session] of sessions.entries()) {
    if (now - session.createdAt > maxAge) {
      sessions.delete(sessionId);
      cleaned++;
    }
  }
  
  if (cleaned > 0) {
    console.log(`üßπ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: ${cleaned}`);
  }
  
  return cleaned;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏
export function debugSessions(): void {
  console.log(`\n=== DEBUG SESSIONS ===`);
  console.log(`üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: ${sessions.size}`);
  
  if (sessions.size === 0) {
    console.log(`‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π`);
  } else {
    sessions.forEach((session, sessionId) => {
      console.log(`üîë ${sessionId.substring(0, 20)}... -> ${session.user.email} (${session.user.role})`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${new Date(session.createdAt).toLocaleString()}`);
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø: ${new Date(session.lastAccessed).toLocaleString()}`);
    });
  }
  console.log(`=== END DEBUG SESSIONS ===\n`);
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏

// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–Ω–µ –∏—Å—Ç–µ–∫—à–∏–µ)
export function getActiveSessions(): Map<string, Session> {
  const activeSessions = new Map<string, Session>();
  const maxAge = 7 * 24 * 60 * 60 * 1000;
  const now = Date.now();
  
  for (const [sessionId, session] of sessions.entries()) {
    if (now - session.createdAt <= maxAge) {
      activeSessions.set(sessionId, session);
    }
  }
  
  return activeSessions;
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ —Ä–æ–ª–∏
export function getSessionsByRole(role: string): Map<string, Session> {
  const roleSessions = new Map<string, Session>();
  
  for (const [sessionId, session] of sessions.entries()) {
    if (session.user.role === role) {
      roleSessions.set(sessionId, session);
    }
  }
  
  return roleSessions;
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function hasActiveSession(userId: string): boolean {
  for (const session of sessions.values()) {
    if (session.user.id === userId) {
      return true;
    }
  }
  return false;
}

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function terminateUserSessions(userId: string): number {
  let terminated = 0;
  
  for (const [sessionId, session] of sessions.entries()) {
    if (session.user.id === userId) {
      sessions.delete(sessionId);
      terminated++;
    }
  }
  
  console.log(`üö™ –ó–∞–≤–µ—Ä—à–µ–Ω–æ ${terminated} —Å–µ—Å—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  return terminated;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export type { User, Session, SessionStats, UserSessionInfo };
