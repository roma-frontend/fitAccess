// middleware.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–µ—Ä–µ–∑ API)
import { NextRequest, NextResponse } from 'next/server';

const publicRoutes = [
  '/',
  '/member-login',
  '/staff-login',
  '/register',
  '/face-login',
  '/demo',
  '/setup',
  '/setup-demo-data',
  '/setup-users',
  '/create-admin',
  '/init-super-admin',
  '/test-page',
  '/test-login',
  '/test-users',
  '/debug-auth',
  '/test-cookies',
  '/create-test-user',
  '/admin-login',
  '/clear-cookies',
  '/make-admin',
  '/create-real-admin',
  '/debug-dashboard',
  '/unauthorized',
  '/debug-password',
  '/test-auth-flow',
  '/fix-password',
  '/demo-smart-login',
  '/test-qr-codes',
  '/trainers',
  '/programs',
  '/consultation',
  '/trial-class',
  '/final-debug',
  '/debug-auth',
  'quick-test',
  'test-shop'
];

const memberRoutes = [
  '/member-dashboard',
  '/member-profile',
  '/member-visits',
  '/group-classes',
  '/shop',
  '/qr-code',
  '/setup-face-recognition',
  '/my-bookings',
  '/my-trainings',
  '/test-middleware',
];

const staffRoutes = [
  '/admin',
  '/staff-dashboard',
  '/trainer-dashboard',
  '/manager-dashboard'
];

const loginPages = ['/member-login', '/staff-login', '/login'];

const isPublicRoute = (pathname: string): boolean => {
  return publicRoutes.includes(pathname) ||
         Boolean(pathname.match(/^\/trainer\/[^\/]+$/)) ||
         Boolean(pathname.match(/^\/programs\/[^\/]+$/));
};

const isMemberRoute = (pathname: string): boolean => {
  return memberRoutes.some(route => 
    pathname === route || pathname.startsWith(route + '/')
  ) || 
  Boolean(pathname.match(/^\/book-trainer\/[^\/]+$/)) ||
  Boolean(pathname.match(/^\/book-program\/[^\/]+$/)) ||
  Boolean(pathname.match(/^\/book-class\/[^\/]+\/[^\/]+$/));
};

const isStaffRoute = (pathname: string): boolean => {
  return staffRoutes.some(route => 
    pathname === route || pathname.startsWith(route + '/')
  );
};

const getDashboardForRole = (role: string): string => {
  switch (role) {
    case 'member': return '/member-dashboard';
    case 'admin':
    case 'super-admin': return '/admin';
    case 'manager': return '/manager-dashboard';
    case 'trainer': return '/trainer-dashboard';
    default: return '/staff-dashboard';
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API –≤—ã–∑–æ–≤
const checkAuthentication = async (request: NextRequest): Promise<{ user: any; authType: string } | null> => {
  try {
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ API –≤—ã–∑–æ–≤–∞
    const baseUrl = request.nextUrl.origin;
    const checkUrl = new URL('/api/auth/check', baseUrl);
    
    // –ö–æ–ø–∏—Ä—É–µ–º cookies –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const cookieHeader = request.headers.get('cookie');
    
    console.log(`üîç Middleware: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ API`);
    console.log(`üç™ Middleware: cookies = ${cookieHeader ? '–ï–°–¢–¨' : '–ù–ï–¢'}`);
    
    // –î–µ–ª–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ API
    const response = await fetch(checkUrl.toString(), {
      method: 'GET',
      headers: {
        'Cookie': cookieHeader || '',
        'User-Agent': 'Middleware-Internal-Check',
      },
    });
    
    if (!response.ok) {
      console.log(`‚ùå Middleware: API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π ${response.status}`);
      return null;
    }
    
    const data = await response.json();
    console.log(`üìä Middleware: —Ä–µ–∑—É–ª—å—Ç–∞—Ç API = ${data.authenticated ? '–ê–í–¢–û–†–ò–ó–û–í–ê–ù' : '–ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù'}`);
    
    if (data.authenticated && data.user) {
      console.log(`‚úÖ Middleware: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${data.user.email} (${data.user.role})`);
      return { user: data.user, authType: data.system || 'api-check' };
    }
    
    return null;
  } catch (error) {
    console.error(`üí• Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`, error);
    return null;
  }
};

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
  if (pathname.startsWith('/_next/') || 
      pathname.startsWith('/favicon.ico') || 
      pathname.startsWith('/static/') ||
      pathname.includes('.') ||
      pathname.startsWith('/api/')) {
    return NextResponse.next();
  }

  console.log(`\nüöÄ === MIDDLEWARE START –¥–ª—è ${pathname} ===`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const auth = await checkAuthentication(request);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Ö–æ–¥–∞
  if (loginPages.includes(pathname) && auth) {
    const dashboardUrl = getDashboardForRole(auth.user.role);
    console.log(`‚ÜóÔ∏è Middleware: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${auth.user.role} —Å ${pathname} –Ω–∞ ${dashboardUrl}`);
    return NextResponse.redirect(new URL(dashboardUrl, request.url));
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (isPublicRoute(pathname)) {
    console.log(`‚úÖ Middleware: –ø—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ${pathname}`);
    console.log(`üèÅ === MIDDLEWARE END - –ü–£–ë–õ–ò–ß–ù–´–ô ===\n`);
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  if (isMemberRoute(pathname)) {
    console.log(`üë§ Middleware: –º–∞—Ä—à—Ä—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${pathname}`);
    
    if (!auth) {
      console.log(`‚ùå Middleware: –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /member-login`);
      console.log(`üèÅ === MIDDLEWARE END - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï ===\n`);
      return NextResponse.redirect(new URL('/member-login?redirect=' + encodeURIComponent(pathname), request.url));
    }
    
    if (auth.user.role !== 'member') {
      console.log(`‚ùå Middleware: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å ${auth.user.role} –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /member-login`);
      console.log(`üèÅ === MIDDLEWARE END - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–û–õ–¨ ===\n`);
      return NextResponse.redirect(new URL('/member-login?redirect=' + encodeURIComponent(pathname), request.url));
    }

    console.log(`‚úÖ Middleware: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${auth.user.email} –Ω–∞ ${pathname}`);
    console.log(`üèÅ === MIDDLEWARE END - –†–ê–ó–†–ï–®–ï–ù–û ===\n`);
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
  if (isStaffRoute(pathname)) {
    console.log(`üõ°Ô∏è Middleware: –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ${pathname}`);
    
    if (!auth) {
      console.log(`‚ùå Middleware: –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /staff-login`);
      console.log(`üèÅ === MIDDLEWARE END - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï ===\n`);
      return NextResponse.redirect(new URL('/staff-login?redirect=' + encodeURIComponent(pathname), request.url));
    }
    
    const allowedRoles = ['admin', 'super-admin', 'manager', 'trainer'];
    if (!allowedRoles.includes(auth.user.role)) {
      console.log(`‚ùå Middleware: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å ${auth.user.role} –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /staff-login`);
      console.log(`üèÅ === MIDDLEWARE END - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–û–õ–¨ ===\n`);
      return NextResponse.redirect(new URL('/staff-login?redirect=' + encodeURIComponent(pathname), request.url));
    }

    console.log(`‚úÖ Middleware: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ${auth.user.email} –Ω–∞ ${pathname}`);
    console.log(`üèÅ === MIDDLEWARE END - –†–ê–ó–†–ï–®–ï–ù–û ===\n`);
    return NextResponse.next();
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  console.log(`üîí Middleware: –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ${pathname}`);
  if (!auth) {
    console.log(`‚ùå Middleware: –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é`);
    console.log(`üèÅ === MIDDLEWARE END - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –ì–õ–ê–í–ù–£–Æ ===\n`);
    return NextResponse.redirect(new URL('/', request.url));
  }
  
  console.log(`‚úÖ Middleware: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è ${pathname}`);
  console.log(`üèÅ === MIDDLEWARE END - –†–ê–ó–†–ï–®–ï–ù–û ===\n`);
  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
