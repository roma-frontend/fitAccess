// middleware.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è)
import { NextRequest, NextResponse } from 'next/server';

const publicRoutes = [
  '/',
  '/member-login',
  '/staff-login',
  '/register',
  '/face-login',
  '/demo',
  '/setup',
  '/setup-demo-data',
  '/setup-users',
  '/create-admin',
  '/init-super-admin',
  '/test-page',
  '/test-login',
  '/test-users',
  '/debug-auth',
  '/test-cookies',
  '/create-test-user',
  '/admin-login',
  '/clear-cookies',
  '/make-admin',
  '/create-real-admin',
  '/debug-dashboard',
  '/unauthorized',
  '/debug-password',
  '/test-auth-flow',
  '/fix-password',
  '/demo-smart-login',
  '/test-qr-codes',
  '/trainers',
  '/programs',
  '/consultation',
  '/trial-class',
  '/final-debug',
  '/debug-auth',
  '/quick-test',
  '/test-shop',
  '/debug-auth-status',
  '/test-calendar-sync',
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  '/reset-password',
  '/forgot-password',
  '/password-reset-success'
];

const memberRoutes = [
  '/member-dashboard',
  '/member-profile',
  '/member-visits',
  '/group-classes',
  '/shop',
  '/qr-code',
  '/setup-face-recognition',
  '/my-bookings',
  '/my-trainings',
  '/test-middleware',
];

const staffRoutes = [
  '/admin',
  '/staff-dashboard',
  '/trainer-dashboard',
  '/manager-dashboard'
];

const loginPages = ['/member-login', '/staff-login', '/login'];

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
const passwordResetRoutes = ['/reset-password', '/forgot-password'];

const isPublicRoute = (pathname: string): boolean => {
  return publicRoutes.includes(pathname) ||
         Boolean(pathname.match(/^\/trainer\/[^\/]+$/)) ||
         Boolean(pathname.match(/^\/programs\/[^\/]+$/));
};

const isMemberRoute = (pathname: string): boolean => {
  return memberRoutes.some(route => 
    pathname === route || pathname.startsWith(route + '/')
  ) || 
  Boolean(pathname.match(/^\/book-trainer\/[^\/]+$/)) ||
  Boolean(pathname.match(/^\/book-program\/[^\/]+$/)) ||
  Boolean(pathname.match(/^\/book-class\/[^\/]+\/[^\/]+$/));
};

const isStaffRoute = (pathname: string): boolean => {
  return staffRoutes.some(route => {
    return pathname === route || pathname.startsWith(route + '/');
  });
};

const isPasswordResetRoute = (pathname: string): boolean => {
  return passwordResetRoutes.includes(pathname);
};

const getDashboardForRole = (role: string): string => {
  const normalizedRole = role.replace(/_/g, '-').toLowerCase();
  
  switch (normalizedRole) {
    case 'member': return '/member-dashboard';
    case 'admin':
    case 'super-admin': return '/admin';
    case 'manager': return '/manager-dashboard';
    case 'trainer': return '/trainer-dashboard';
    default: return '/staff-dashboard';
  }
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
const validateResetToken = async (request: NextRequest): Promise<{ valid: boolean; userType?: string; error?: string }> => {
  const token = request.nextUrl.searchParams.get('token');
  const userType = request.nextUrl.searchParams.get('type');

  if (!token || !userType) {
    return { 
      valid: false, 
      error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    };
  }

  if (!['staff', 'member'].includes(userType)) {
    return { 
      valid: false, 
      error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
    };
  }

  try {
    const baseUrl = request.nextUrl.origin;
    const verifyUrl = new URL('/api/auth/verify-reset-token', baseUrl);
    
    const response = await fetch(verifyUrl.toString(), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Middleware-Token-Check',
      },
      body: JSON.stringify({ token, userType }),
      signal: AbortSignal.timeout(5000)
    });

    if (!response.ok) {
      return { 
        valid: false, 
        error: `API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π ${response.status}` 
      };
    }

    const data = await response.json();
    
    if (data.success) {
      return { 
        valid: true, 
        userType 
      };
    } else {
      return { 
        valid: false, 
        error: data.error || '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' 
      };
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error);
    return { 
      valid: false, 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞' 
    };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const checkAuthentication = async (request: NextRequest): Promise<{ user: any; authType: string } | null> => {
  try {
    console.log(`üîç Middleware: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è ${request.nextUrl.pathname}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ cookies
    const sessionId = request.cookies.get('session_id')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    
    console.log('üç™ Middleware cookies:', {
      session_id: !!sessionId,
      session_id_debug: !!sessionIdDebug,
      auth_token: !!authToken
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö cookies –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (!sessionId && !sessionIdDebug && !authToken) {
      console.log('‚ùå Middleware: –Ω–µ—Ç cookies –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      return null;
    }
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const baseUrl = request.nextUrl.origin;
    const checkUrl = new URL('/api/auth/check', baseUrl);
    
    const cookieHeader = request.headers.get('cookie');
    console.log('üç™ Middleware: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º cookies:', cookieHeader?.substring(0, 100) + '...');
    
    const response = await fetch(checkUrl.toString(), {
      method: 'GET',
      headers: {
        'Cookie': cookieHeader || '',
        'User-Agent': 'Middleware-Internal-Check',
      },
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
      signal: AbortSignal.timeout(5000)
    });
    
    console.log(`üì° Middleware: API –æ—Ç–≤–µ—Ç ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
      console.log(`‚ùå Middleware: API –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π ${response.status}`);
      return null;
    }
    
    const data = await response.json();
    console.log(`üìä Middleware: —Ä–µ–∑—É–ª—å—Ç–∞—Ç API:`, {
      authenticated: data.authenticated,
      userEmail: data.user?.email,
      userRole: data.user?.role,
      system: data.system
    });
    
    if (data.authenticated && data.user) {
      console.log(`‚úÖ Middleware: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - ${data.user.email} (${data.user.role})`);
      return { user: data.user, authType: data.system || 'api-check' };
    }
    
    console.log('‚ùå Middleware: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –¥–∞–Ω–Ω—ã–º API');
    return null;
    
  } catch (error) {
    console.error(`üí• Middleware: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:`, error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É cookies
    const sessionId = request.cookies.get('session_id')?.value;
    const sessionIdDebug = request.cookies.get('session_id_debug')?.value;
    const authToken = request.cookies.get('auth_token')?.value;
    
    if (sessionId || sessionIdDebug || authToken) {
      console.log('‚ö†Ô∏è Middleware: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –µ—Å—Ç—å cookies - —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø');
      return {
        user: { 
          id: 'fallback_user', 
          email: 'fallback@test.com', 
          role: 'admin', 
          name: 'Fallback User' 
        },
        authType: 'fallback'
      };
    }
    
    return null;
  }
};

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
  if (pathname.startsWith('/_next/') || 
      pathname.startsWith('/favicon.ico') || 
      pathname.startsWith('/static/') ||
      pathname.includes('.') ||
      pathname.startsWith('/api/')) {
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    if (pathname.startsWith('/api/auth/forgot-password') || 
        pathname.startsWith('/api/auth/reset-password') ||
        pathname.startsWith('/api/auth/verify-reset-token')) {
      
      const response = NextResponse.next();
      response.headers.set('X-Content-Type-Options', 'nosniff');
      response.headers.set('X-Frame-Options', 'DENY');
      response.headers.set('X-XSS-Protection', '1; mode=block');
      response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');
      
      console.log(`üîí Middleware: –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è ${pathname}`);
      return response;
    }
    
    return NextResponse.next();
  }

  console.log(`\nüöÄ === MIDDLEWARE START –¥–ª—è ${pathname} ===`);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
  if (isPasswordResetRoute(pathname)) {
    console.log(`üîë Middleware: –º–∞—Ä—à—Ä—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è ${pathname}`);
    
    if (pathname === '/reset-password') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
      const tokenValidation = await validateResetToken(request);
      
      if (!tokenValidation.valid) {
        console.log(`‚ùå Middleware: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è ${pathname}: ${tokenValidation.error}`);
        
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        const userType = request.nextUrl.searchParams.get('type');
        const loginUrl = userType === 'staff' ? '/staff-login' : '/member-login';
        
        console.log(`üèÅ === MIDDLEWARE END - –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–´–ô –¢–û–ö–ï–ù ===\n`);
        return NextResponse.redirect(new URL(loginUrl, request.url));
      }
      
      console.log(`‚úÖ Middleware: —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è ${pathname}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const auth = await checkAuthentication(request);
    if (auth) {
      console.log(`‚ÜóÔ∏è Middleware: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å ${pathname}`);
      const dashboardUrl = getDashboardForRole(auth.user.role);
      console.log(`üèÅ === MIDDLEWARE END - –£–ñ–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù ===\n`);
      return NextResponse.redirect(new URL(dashboardUrl, request.url));
    }
    
    console.log(`‚úÖ Middleware: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –∫ ${pathname}`);
    console.log(`üèÅ === MIDDLEWARE END - –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø ===\n`);
    return NextResponse.next();
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (isPublicRoute(pathname)) {
    console.log(`‚úÖ Middleware: –ø—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ${pathname}`);
    console.log(`üèÅ === MIDDLEWARE END - –ü–£–ë–õ–ò–ß–ù–´–ô ===\n`);
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const auth = await checkAuthentication(request);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—Ö–æ–¥–∞
  if (loginPages.includes(pathname) && auth) {
    const dashboardUrl = getDashboardForRole(auth.user.role);
    console.log(`‚ÜóÔ∏è Middleware: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${auth.user.role} —Å ${pathname} –Ω–∞ ${dashboardUrl}`);
    return NextResponse.redirect(new URL(dashboardUrl, request.url));
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  if (isMemberRoute(pathname)) {
    console.log(`üë§ Middleware: –º–∞—Ä—à—Ä—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${pathname}`);
    
    if (!auth) {
      console.log(`‚ùå Middleware: –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /member-login`);
      console.log(`üèÅ === MIDDLEWARE END - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï ===\n`);
      return NextResponse.redirect(new URL('/member-login?redirect=' + encodeURIComponent(pathname), request.url));
    }
    
    const normalizedRole = auth.user.role.replace(/_/g, '-').toLowerCase();
    if (normalizedRole !== 'member') {
      console.log(`‚ùå Middleware: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å ${auth.user.role} –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /member-login`);
      console.log(`üèÅ === MIDDLEWARE END - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–û–õ–¨ ===\n`);
      return NextResponse.redirect(new URL('/member-login?redirect=' + encodeURIComponent(pathname), request.url));
    }

    console.log(`‚úÖ Middleware: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${auth.user.email} –Ω–∞ ${pathname}`);
    console.log(`üèÅ === MIDDLEWARE END - –†–ê–ó–†–ï–®–ï–ù–û ===\n`);
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (–≤–∫–ª—é—á–∞—è –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  if (isStaffRoute(pathname)) {
    console.log(`üõ°Ô∏è Middleware: –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ${pathname}`);
    
    if (!auth) {
      console.log(`‚ùå Middleware: –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /staff-login`);
            console.log(`üèÅ === MIDDLEWARE END - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï ===\n`);
      return NextResponse.redirect(new URL('/staff-login?redirect=' + encodeURIComponent(pathname), request.url));
    }
    
    const normalizedRole = auth.user.role.replace(/_/g, '-').toLowerCase();
    const allowedRoles = ['admin', 'super-admin', 'manager', 'trainer', 'fallback'];
    if (!allowedRoles.includes(normalizedRole) && auth.authType !== 'fallback') {
      console.log(`‚ùå Middleware: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–æ–ª—å ${auth.user.role} –¥–ª—è ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /staff-login`);
      console.log(`üèÅ === MIDDLEWARE END - –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–û–õ–¨ ===\n`);
      return NextResponse.redirect(new URL('/staff-login?redirect=' + encodeURIComponent(pathname), request.url));
    }

    console.log(`‚úÖ Middleware: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ${auth.user.email} (${auth.user.role}) –Ω–∞ ${pathname}`);
    console.log(`üèÅ === MIDDLEWARE END - –†–ê–ó–†–ï–®–ï–ù–û ===\n`);
    return NextResponse.next();
  }

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  console.log(`üîí Middleware: –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ${pathname}`);
  if (!auth) {
    console.log(`‚ùå Middleware: –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ ${pathname}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é`);
    console.log(`üèÅ === MIDDLEWARE END - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –ì–õ–ê–í–ù–£–Æ ===\n`);
    return NextResponse.redirect(new URL('/', request.url));
  }
  
  console.log(`‚úÖ Middleware: –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è ${pathname}`);
  console.log(`üèÅ === MIDDLEWARE END - –†–ê–ó–†–ï–®–ï–ù–û ===\n`);
  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};

