// contexts/UnifiedDataContext.tsx
"use client";

import { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
export interface Trainer {
  id: string;
  name: string;
  email: string;
  phone: string;
  role: string;
  avatar?: string;
  joinDate: string;
  status: 'active' | 'inactive' | 'suspended';
  specializations: string[];
  experience?: number;
  rating: number;
  totalClients: number;
  activeClients: number;
  totalWorkouts: number;
  totalSessions?: number;
  monthlyRevenue: number;
  hourlyRate?: number;
  certifications?: string[];
  workingHours: {
    start: string;
    end: string;
    days: number[];
  };
  lastActivity: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface Client {
  id: string;
  name: string;
  email: string;
  phone: string;
  status: 'active' | 'inactive' | 'trial' | 'suspended';
  joinDate: string;
  trainerId?: string;
  trainerName?: string;
  membershipType: string;
  membershipExpiry: string;
  totalSessions: number;
  lastVisit: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface ScheduleEvent {
  id?: string;
  _id: string;
  title: string;
  description?: string;
  type: 'training' | 'consultation' | 'meeting' | 'break' | 'other';
  startTime: string;
  endTime: string;
  trainerId: string;
  trainerName: string;
  clientId?: string;
  clientName?: string;
  status: 'scheduled' | 'confirmed' | 'completed' | 'cancelled' | 'no-show';
  location?: string;
  notes?: string;
  createdAt: string;
  createdBy: string;
  updatedAt?: string;
}

export interface Product {
  _id: string;
  name: string;
  description: string;
  category: 'supplements' | 'drinks' | 'snacks' | 'merchandise';
  price: number;
  inStock: number;
  minStock: number;
  isPopular: boolean;
  imageUrl?: string;
  createdAt: string;
  updatedAt?: string;
}

export interface Analytics {
  users: {
    total: number;
    active: number;
    new: number;
    growth: number;
    byRole: Record<string, number>;
    registrationTrend: Array<{ date: string; count: number }>;
  };
  revenue: {
    total: number;
    monthly: number;
    thisMonth?: number; // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –ø–æ–ª–µ
    growth: number;
    byProduct: Array<{ name: string; revenue: number }>;
    trend: Array<{ date: string; amount: number }>;
  };
  activity: {
    totalSessions: number;
    averageSessionTime: number;
    pageViews: number;
    bounceRate: number;
    topPages: Array<{ page: string; views: number }>;
  };
  products: {
    total: number;
    inStock: number;
    lowStock: number;
    outOfStock: number;
    totalValue: number;
    byCategory: Record<string, number>;
    salesTrend: Array<{ date: string; sales: number; revenue: number }>;
  };
}

export interface UnifiedData {
  trainers: Trainer[];
  clients: Client[];
  events: ScheduleEvent[];
  products: Product[];
  analytics: Analytics | null;
  lastSync: Date | null;
  loading: boolean;
  error: string | null;
}

interface UnifiedDataContextType extends UnifiedData {
  syncAllData: () => Promise<void>;
  syncTrainers: () => Promise<void>;
  syncClients: () => Promise<void>;
  syncEvents: () => Promise<void>;
  syncProducts: () => Promise<void>;
  syncAnalytics: () => Promise<void>;
  addEvent: (event: ScheduleEvent) => void;
  updateEvent: (eventId: string, updates: Partial<ScheduleEvent>) => void;
  removeEvent: (eventId: string) => void;
  addTrainer: (trainer: Trainer) => void;
  updateTrainer: (trainerId: string, updates: Partial<Trainer>) => void;
  removeTrainer: (trainerId: string) => void;
  isOnline: boolean;
  retryCount: number;
}

const UnifiedDataContext = createContext<UnifiedDataContextType | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const UnifiedDataProvider = ({ children }: { children: ReactNode }) => {
  const [data, setData] = useState<UnifiedData>({
    trainers: [],
    clients: [],
    events: [],
    products: [],
    analytics: null,
    lastSync: null,
    loading: true,
    error: null
  });

  const [isOnline, setIsOnline] = useState(true);
  const [retryCount, setRetryCount] = useState(0);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      setRetryCount(0);
      console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...');
      syncAllData();
    };

    const handleOffline = () => {
      setIsOnline(false);
      console.log('üì° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å retry –ª–æ–≥–∏–∫–æ–π
  const fetchWithRetry = async (url: string, options: RequestInit = {}, maxRetries = 3): Promise<any> => {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ $${attempt}/$${maxRetries} –¥–ª—è ${url}`);
        
        const response = await fetch(url, {
          ...options,
          headers: {
            'Content-Type': 'application/json',
            ...options.headers
          }
        });

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ ${url}`);
        return data;

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${url} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error);
        
        if (attempt === maxRetries) {
          setRetryCount(prev => prev + 1);
          throw error;
        }
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
      }
    }
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  const syncTrainers = useCallback(async () => {
    try {
      const trainersData = await fetchWithRetry('/api/admin/trainers');
      
      setData(prev => ({
        ...prev,
        trainers: Array.isArray(trainersData) ? trainersData : [],
        error: null
      }));

      console.log('üë• –¢—Ä–µ–Ω–µ—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', trainersData?.length || 0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
      setData(prev => ({
        ...prev,
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }));
    }
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const syncClients = useCallback(async () => {
    try {
      const clientsData = await fetchWithRetry('/api/admin/clients');
      
      setData(prev => ({
        ...prev,
        clients: Array.isArray(clientsData) ? clientsData : [],
        error: null
      }));

      console.log('üë§ –ö–ª–∏–µ–Ω—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', clientsData?.length || 0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
      setData(prev => ({
        ...prev,
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }));
    }
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
  const syncEvents = useCallback(async () => {
    try {
      const eventsResponse = await fetchWithRetry('/api/admin/schedule');
      const eventsData = eventsResponse?.data?.events || eventsResponse?.events || [];
      
      setData(prev => ({
        ...prev,
        events: Array.isArray(eventsData) ? eventsData : [],
        error: null
      }));

      console.log('üìÖ –°–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', eventsData?.length || 0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error);
      setData(prev => ({
        ...prev,
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }));
    }
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const syncProducts = useCallback(async () => {
    try {
      const productsResponse = await fetchWithRetry('/api/products');
      const productsData = productsResponse?.products || productsResponse?.data || [];
      
      setData(prev => ({
        ...prev,
        products: Array.isArray(productsData) ? productsData : [],
        error: null
      }));

      console.log('üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', productsData?.length || 0);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
      setData(prev => ({
        ...prev,
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }));
    }
  }, []);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
  const syncAnalytics = useCallback(async () => {
    try {
      const analyticsResponse = await fetchWithRetry('/api/admin/analytics');
      const analyticsData = analyticsResponse?.data || analyticsResponse;
      
      setData(prev => ({
        ...prev,
        analytics: analyticsData || null,
        error: null
      }));

      console.log('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      setData(prev => ({
        ...prev,
        error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }));
    }
  }, []);

  // –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const syncAllData = useCallback(async () => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    setData(prev => ({ ...prev, loading: true, error: null }));

    try {
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
      await Promise.allSettled([
        syncTrainers(),
        syncClients(),
        syncEvents(),
        syncProducts(),
        syncAnalytics()
      ]);

      setData(prev => ({
        ...prev,
        lastSync: new Date(),
        loading: false
      }));

      console.log('‚úÖ –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      setRetryCount(0);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      setData(prev => ({
        ...prev,
        loading: false,
        error: `–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }));
    }
  }, [syncTrainers, syncClients, syncEvents, syncProducts, syncAnalytics]);

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ (–¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI)
  const addEvent = useCallback((event: ScheduleEvent) => {
    setData(prev => ({
      ...prev,
      events: [...prev.events, event]
    }));
    console.log('‚ûï –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', event.title);
  }, []);

  const updateEvent = useCallback((eventId: string, updates: Partial<ScheduleEvent>) => {
    setData(prev => ({
      ...prev,
      events: prev.events.map(event => 
        event._id === eventId 
          ? { ...event, ...updates, updatedAt: new Date().toISOString() }
          : event
      )
    }));
    console.log('‚úèÔ∏è –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', eventId);
  }, []);

  const removeEvent = useCallback((eventId: string) => {
    setData(prev => ({
      ...prev,
      events: prev.events.filter(event => event._id !== eventId)
    }));
    console.log('üóëÔ∏è –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', eventId);
  }, []);

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏
  const addTrainer = useCallback((trainer: Trainer) => {
    setData(prev => ({
      ...prev,
      trainers: [...prev.trainers, trainer]
    }));
    console.log('‚ûï –¢—Ä–µ–Ω–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', trainer.name);
  }, []);

  const updateTrainer = useCallback((trainerId: string, updates: Partial<Trainer>) => {
    setData(prev => ({
      ...prev,
      trainers: prev.trainers.map(trainer => 
        trainer.id === trainerId 
          ? { ...trainer, ...updates }
          : trainer
      )
    }));
    console.log('‚úèÔ∏è –¢—Ä–µ–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', trainerId);
  }, []);

  const removeTrainer = useCallback((trainerId: string) => {
    setData(prev => ({
      ...prev,
      trainers: prev.trainers.filter(trainer => trainer.id !== trainerId)
    }));
    console.log('üóëÔ∏è –¢—Ä–µ–Ω–µ—Ä —É–¥–∞–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ:', trainerId);
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    syncAllData();
  }, [syncAllData]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  useEffect(() => {
    if (!isOnline) return;

    const interval = setInterval(() => {
      console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
      syncAllData();
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval);
  }, [syncAllData, isOnline]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  useEffect(() => {
    if (retryCount > 0 && retryCount < 5 && isOnline) {
      const timeout = setTimeout(() => {
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry ${retryCount}/5...`);
        syncAllData();
      }, Math.pow(2, retryCount) * 5000); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

      return () => clearTimeout(timeout);
    }
  }, [retryCount, isOnline, syncAllData]);

  const contextValue: UnifiedDataContextType = {
    ...data,
    syncAllData,
    syncTrainers,
    syncClients,
    syncEvents,
    syncProducts,
    syncAnalytics,
    addEvent,
    updateEvent,
    removeEvent,
    addTrainer,
    updateTrainer,
    removeTrainer,
    isOnline,
    retryCount
  };

  return (
    <UnifiedDataContext.Provider value={contextValue}>
      {children}
    </UnifiedDataContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useUnifiedData = () => {
  const context = useContext(UnifiedDataContext);
  if (context === undefined) {
    throw new Error('useUnifiedData must be used within a UnifiedDataProvider');
  }
  return context;
};

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
export const useTrainers = () => {
  const { trainers, syncTrainers, addTrainer, updateTrainer, removeTrainer, loading, error } = useUnifiedData();
  return { trainers, syncTrainers, addTrainer, updateTrainer, removeTrainer, loading, error };
};

export const useClients = () => {
  const { clients, syncClients, loading, error } = useUnifiedData();
  return { clients, syncClients, loading, error };
};

export const useSchedule = () => {
  const { events, syncEvents, addEvent, updateEvent, removeEvent, loading, error } = useUnifiedData();
  return { events, syncEvents, addEvent, updateEvent, removeEvent, loading, error };
};

export const useProducts = () => {
  const { products, syncProducts, loading, error } = useUnifiedData();
  return { products, syncProducts, loading, error };
};

export const useAnalytics = () => {
  const { analytics, syncAnalytics, loading, error } = useUnifiedData();
  return { analytics, syncAnalytics, loading, error };
};

