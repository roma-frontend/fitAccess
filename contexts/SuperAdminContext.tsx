// contexts/SuperAdminContext.tsx (–∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
"use client";

import React, { createContext, useContext, useEffect, useState } from "react";
import { ensureDebugSystem } from '@/utils/cleanTypes';

interface SuperAdminContextType {
  trainers: any[];
  clients: any[];
  loading: boolean;
  error: string | null;
  refreshData: () => Promise<void>;
  addTrainer?: (trainer: any) => void;
  updateTrainer?: (id: string, data: any) => void;
  deleteTrainer?: (id: string) => void;
  addClient?: (client: any) => void;
  updateClient?: (id: string, data: any) => void;
  deleteClient?: (id: string) => void;
}

const SuperAdminContext = createContext<SuperAdminContextType | undefined>(undefined);

export function SuperAdminProvider({ children }: { children: React.ReactNode }) {
  const [trainers, setTrainers] = useState<any[]>([
    { _id: "trainer1", name: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", role: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä", status: "active" },
    { _id: "trainer2", name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤", role: "–§–∏—Ç–Ω–µ—Å —Ç—Ä–µ–Ω–µ—Ä", status: "active" },
    { _id: "trainer3", name: "–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞", role: "–ô–æ–≥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", status: "active" },
  ]);

  const [clients, setClients] = useState<any[]>([
    { _id: "client1", name: "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞", role: "client", status: "active" },
    { _id: "client2", name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤", role: "client", status: "active" },
    { _id: "client3", name: "–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞", role: "client", status: "active" },
    { _id: "client4", name: "–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤", role: "client", status: "active" },
  ]);

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const refreshData = async () => {
    console.log("üîÑ SuperAdmin: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...");
    setLoading(true);
    await new Promise((resolve) => setTimeout(resolve, 500));
    setLoading(false);
    console.log("‚úÖ SuperAdmin: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
  };

  const addTrainer = (trainer: any) => {
    console.log('‚ûï SuperAdmin: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞', trainer);
    setTrainers(prev => [...prev, { ...trainer, _id: `trainer_${Date.now()}` }]);
  };

  const updateTrainer = (id: string, data: any) => {
    console.log('üìù SuperAdmin: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞', id, data);
    setTrainers(prev => prev.map(t => t._id === id ? { ...t, ...data } : t));
  };

  const deleteTrainer = (id: string) => {
    console.log('üóëÔ∏è SuperAdmin: —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞', id);
    setTrainers(prev => prev.filter(t => t._id !== id));
  };

  const addClient = (client: any) => {
    console.log('‚ûï SuperAdmin: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', client);
    setClients(prev => [...prev, { ...client, _id: `client_${Date.now()}` }]);
  };

  const updateClient = (id: string, data: any) => {
    console.log('üìù SuperAdmin: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', id, data);
    setClients(prev => prev.map(c => c._id === id ? { ...c, ...data } : c));
  };

  const deleteClient = (id: string) => {
    console.log('üóëÔ∏è SuperAdmin: —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞', id);
    setClients(prev => prev.filter(c => c._id !== id));
  };

  // ‚úÖ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –í DEBUG –°–ò–°–¢–ï–ú–ï –° –ï–î–ò–ù–û–ô –§–£–ù–ö–¶–ò–ï–ô
  useEffect(() => {
    if (typeof window !== "undefined") {
      // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ï–î–ò–ù–£–Æ –§–£–ù–ö–¶–ò–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
      ensureDebugSystem();

      const superAdminContext = {
        trainers,
        clients,
        loading,
        error,
        refreshData,
        getStats: () => ({
          totalTrainers: trainers.length,
          totalClients: clients.length,
          loading,
          lastUpdate: new Date().toISOString(),
        }),
        addTrainer,
        updateTrainer,
        deleteTrainer,
        addClient,
        updateClient,
        deleteClient,
      };

      window.fitAccessDebug.superAdmin = superAdminContext;
      console.log("‚úÖ SuperAdmin –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ debug —Å–∏—Å—Ç–µ–º–µ");
    }
  }, []);

  // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –î–ê–ù–ù–´–ï –í DEBUG –°–ò–°–¢–ï–ú–ï –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•
  useEffect(() => {
    if (typeof window !== "undefined" && window.fitAccessDebug?.superAdmin) {
      window.fitAccessDebug.superAdmin.trainers = trainers;
      window.fitAccessDebug.superAdmin.clients = clients;
      window.fitAccessDebug.superAdmin.loading = loading;
      window.fitAccessDebug.superAdmin.error = error;
    }
  }, [trainers, clients, loading, error]);

  const value: SuperAdminContextType = {
    trainers,
    clients,
    loading,
    error,
    refreshData,
    addTrainer,
    updateTrainer,
    deleteTrainer,
    addClient,
    updateClient,
    deleteClient,
  };

  return (
    <SuperAdminContext.Provider value={value}>
      {children}
    </SuperAdminContext.Provider>
  );
}

export function useSuperAdmin() {
  const context = useContext(SuperAdminContext);
  if (context === undefined) {
    throw new Error("useSuperAdmin must be used within a SuperAdminProvider");
  }
  return context;
}
