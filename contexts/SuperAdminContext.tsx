// contexts/SuperAdminContext.tsx (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"use client";

import React, { createContext, useContext, useState, useEffect } from "react";
import { useSchedule } from "./ScheduleContext";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
export interface TrainerData {
  id: string;
  name: string;
  email: string;
  phone: string;
  role: string;
  avatar?: string;
  joinDate: string;
  status: "active" | "inactive" | "suspended";
  specializations: string[];
  rating: number;
  totalClients: number;
  activeClients: number;
  totalWorkouts: number;
  monthlyRevenue: number;
  workingHours: {
    start: string;
    end: string;
    days: number[];
  };
  lastActivity: string;
}

export interface ClientData {
  id: string;
  name: string;
  email: string;
  phone: string;
  trainerId?: string;
  trainerName?: string;
  status: "active" | "trial" | "inactive";
  joinDate: string;
  currentProgram?: string;
  totalWorkouts: number;
  progress: number;
  lastWorkout?: string;
  goals?: string[];
  notes?: string;
}

export interface SuperAdminStats {
  trainers: {
    total: number;
    active: number;
    inactive: number;
    newThisMonth: number;
  };
  clients: {
    total: number;
    active: number;
    trial: number;
    newThisMonth: number;
  };
  workouts: {
    total: number;
    today: number;
    thisWeek: number;
    thisMonth: number;
    completed: number;
    cancelled: number;
  };
  revenue: {
    total: number;
    thisMonth: number;
    growth: number;
    byTrainer: Record<string, number>;
  };
  activity: {
    activeTrainers: number;
    busySlots: number;
    utilizationRate: number;
    avgSessionsPerTrainer: number;
  };
}

export interface SuperAdminContextType {
  trainers: TrainerData[];
  clients: ClientData[];
  stats: SuperAdminStats;
  error: string | null;
  loading: boolean;
  refreshData: () => Promise<void>;
  getTrainerClients: (trainerId: string) => ClientData[];
  getTrainerStats: (trainerId: string) => {
    totalEvents: number;
    thisWeekEvents: number;
    thisMonthEvents: number;
    completedEvents: number;
    cancelledEvents: number;
    totalClients: number;
    activeClients: number;
    avgProgress: number;
  };
  searchTerm: string;
  setSearchTerm: (term: string) => void;
  selectedTrainer: string | null;
  setSelectedTrainer: (trainerId: string | null) => void;
  dateRange: {
    start: Date;
    end: Date;
  };
  setDateRange: (range: { start: Date; end: Date }) => void;
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
  getFilteredTrainers: () => TrainerData[];
  getFilteredClients: () => ClientData[];
  getRecentActivity: () => {
    events: any[];
    clients: ClientData[];
  };
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const SuperAdminContext = createContext<SuperAdminContextType | undefined>(
  undefined
);

export function SuperAdminProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const { events } = useSchedule();

  const [trainers, setTrainers] = useState<TrainerData[]>([]);
  const [clients, setClients] = useState<ClientData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null); 
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedTrainer, setSelectedTrainer] = useState<string | null>(null);
  const [dateRange, setDateRange] = useState({
    start: new Date(new Date().getFullYear(), new Date().getMonth(), 1),
    end: new Date(),
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const loadData = async () => {
    setLoading(true);
    setError(null); // ‚Üê –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ

    try {
      console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞...");

      const [trainersResponse, clientsResponse] = await Promise.allSettled([
        fetch("/api/admin/trainers"),
        fetch("/api/admin/clients"),
      ]);

      let trainersData: TrainerData[] = [];
      let clientsData: ClientData[] = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      if (
        trainersResponse.status === "fulfilled" &&
        trainersResponse.value.ok
      ) {
        trainersData = await trainersResponse.value.json();
        console.log("‚úÖ –¢—Ä–µ–Ω–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å API:", trainersData.length);
      } else {
        console.log("‚ö†Ô∏è API —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ");
        trainersData = getMockTrainers();
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (clientsResponse.status === "fulfilled" && clientsResponse.value.ok) {
        clientsData = await clientsResponse.value.json();
        console.log("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å API:", clientsData.length);
      } else {
        console.log("‚ö†Ô∏è API –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ");
        clientsData = getMockClients();
      }

      setTrainers(trainersData);
      setClients(clientsData);

      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    } catch (err) {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:", err);
      
      // ‚Üê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
      setError(errorMessage);

      // Fallback –∫ mock –¥–∞–Ω–Ω—ã–º
      setTrainers(getMockTrainers());
      setClients(getMockClients());
    } finally {
      setLoading(false);
    }
  };

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  const getMockTrainers = (): TrainerData[] => {
    return [
      {
        id: "trainer1",
        name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
        email: "alex@fitaccess.ru",
        phone: "+7 (999) 123-45-67",
        role: "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä",
        avatar: "/avatars/alex.jpg",
        joinDate: "2024-01-15",
        status: "active",
        specializations: [
          "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
          "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–∏–Ω–≥",
          "–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è",
        ],
        rating: 4.8,
        totalClients: 25,
        activeClients: 18,
        totalWorkouts: 342,
        monthlyRevenue: 180000,
        workingHours: {
          start: "09:00",
          end: "18:00",
          days: [1, 2, 3, 4, 5],
        },
        lastActivity: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
      },
      {
        id: "trainer2",
        name: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
        email: "maria@fitaccess.ru",
        phone: "+7 (999) 234-56-78",
        role: "–§–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
        avatar: "/avatars/maria.jpg",
        joinDate: "2024-02-01",
        status: "active",
        specializations: ["–ô–æ–≥–∞", "–ü–∏–ª–∞—Ç–µ—Å", "–°—Ç—Ä–µ—Ç—á–∏–Ω–≥"],
        rating: 4.9,
        totalClients: 30,
        activeClients: 22,
        totalWorkouts: 298,
        monthlyRevenue: 165000,
        workingHours: {
          start: "08:00",
          end: "17:00",
          days: [1, 2, 3, 4, 5, 6],
        },
        lastActivity: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
      },
      {
        id: "trainer3",
        name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
        email: "dmitry@fitaccess.ru",
        phone: "+7 (999) 345-67-89",
        role: "–ô–æ–≥–∞-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
        avatar: "/avatars/dmitry.jpg",
        joinDate: "2024-03-10",
        status: "active",
        specializations: ["–•–∞—Ç—Ö–∞-–π–æ–≥–∞", "–í–∏–Ω—å—è—Å–∞", "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"],
        rating: 4.7,
        totalClients: 20,
        activeClients: 15,
        totalWorkouts: 156,
        monthlyRevenue: 120000,
        workingHours: {
          start: "10:00",
          end: "19:00",
          days: [1, 2, 3, 4, 5, 6, 0],
        },
        lastActivity: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),
      },
      {
        id: "trainer4",
        name: "–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
        email: "elena@fitaccess.ru",
        phone: "+7 (999) 456-78-90",
        role: "–ì—Ä—É–ø–ø–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä",
        avatar: "/avatars/elena.jpg",
        joinDate: "2024-04-05",
        status: "active",
        specializations: ["–ê—ç—Ä–æ–±–∏–∫–∞", "–ó—É–º–±–∞", "–°—Ç–µ–ø"],
        rating: 4.6,
        totalClients: 35,
        activeClients: 28,
        totalWorkouts: 220,
        monthlyRevenue: 140000,
        workingHours: {
          start: "07:00",
          end: "16:00",
          days: [1, 2, 3, 4, 5, 6],
        },
        lastActivity: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
      },
      {
        id: "trainer5",
        name: "–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤",
        email: "igor@fitaccess.ru",
        phone: "+7 (999) 567-89-01",
        role: "–¢—Ä–µ–Ω–µ—Ä –ø–æ –±–æ–∫—Å—É",
        avatar: "/avatars/igor.jpg",
        joinDate: "2024-02-20",
        status: "active",
        specializations: ["–ë–æ–∫—Å", "–ö–∏–∫–±–æ–∫—Å–∏–Ω–≥", "–°–∞–º–æ–æ–±–æ—Ä–æ–Ω–∞"],
        rating: 4.9,
        totalClients: 18,
        activeClients: 15,
        totalWorkouts: 180,
        monthlyRevenue: 200000,
        workingHours: {
          start: "14:00",
          end: "22:00",
          days: [1, 2, 3, 4, 5, 6],
        },
        lastActivity: new Date(Date.now() - 3 * 60 * 60 * 1000).toISOString(),
      },
    ];
  };

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
  const getMockClients = (): ClientData[] => {
    return [
      {
        id: "client1",
        name: "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
        email: "anna@example.com",
        phone: "+7 (999) 345-67-89",
        trainerId: "trainer1",
        trainerName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
        status: "active",
        joinDate: "2024-03-01",
        currentProgram: "–°–∏–ª–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
        totalWorkouts: 24,
        progress: 75,
        lastWorkout: "2024-05-23",
        goals: ["–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã", "–£–ª—É—á—à–µ–Ω–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏"],
        notes: "–û—Ç–ª–∏—á–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä—É–µ—Ç",
      },
      {
        id: "client2",
        name: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
        email: "dmitry@example.com",
        phone: "+7 (999) 456-78-90",
        trainerId: "trainer2",
        trainerName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
        status: "active",
        joinDate: "2024-04-15",
        currentProgram: "–ô–æ–≥–∞ –∏ —Ä–∞—Å—Ç—è–∂–∫–∞",
        totalWorkouts: 16,
        progress: 60,
        lastWorkout: "2024-05-24",
        goals: ["–ì–∏–±–∫–æ—Å—Ç—å", "–°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞", "–£–ª—É—á—à–µ–Ω–∏–µ –æ—Å–∞–Ω–∫–∏"],
      },
      {
        id: "client3",
        name: "–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞",
        email: "elena@example.com",
        phone: "+7 (999) 567-89-01",
        trainerId: "trainer1",
        trainerName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
        status: "trial",
        joinDate: "2024-05-20",
        currentProgram: "–ü—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        totalWorkouts: 3,
        progress: 30,
        lastWorkout: "2024-05-25",
        goals: ["–û–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞"],
      },
      {
        id: "client4",
        name: "–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤",
        email: "mikhail@example.com",
        phone: "+7 (999) 678-90-12",
        trainerId: "trainer3",
        trainerName: "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
        status: "active",
        joinDate: "2024-04-01",
        currentProgram: "–ô–æ–≥–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        totalWorkouts: 20,
        progress: 80,
        lastWorkout: "2024-05-24",
        goals: ["–ì–∏–±–∫–æ—Å—Ç—å", "–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ", "–£–ª—É—á—à–µ–Ω–∏–µ —Å–Ω–∞"],
      },
      {
        id: "client5",
        name: "–û–ª—å–≥–∞ –ü–µ—Ç—Ä–æ–≤–∞",
        email: "olga@example.com",
        phone: "+7 (999) 789-01-23",
        trainerId: "trainer4",
        trainerName: "–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
        status: "active",
        joinDate: "2024-03-15",
        currentProgram: "–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        totalWorkouts: 32,
        progress: 85,
        lastWorkout: "2024-05-25",
        goals: ["–ö–∞—Ä–¥–∏–æ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è", "–°–æ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"],
      },
      {
        id: "client6",
        name: "–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤",
        email: "sergey@example.com",
        phone: "+7 (999) 890-12-34",
        trainerId: "trainer5",
        trainerName: "–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤",
        status: "active",
        joinDate: "2024-04-10",
        currentProgram: "–ë–æ–∫—Å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        totalWorkouts: 18,
        progress: 70,
                lastWorkout: "2024-05-24",
        goals: ["–°–∞–º–æ–æ–±–æ—Ä–æ–Ω–∞", "–§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞", "–°–Ω—è—Ç–∏–µ —Å—Ç—Ä–µ—Å—Å–∞"],
      },
    ];
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const calculateStats = (): SuperAdminStats => {
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay() + 1);
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const startOfToday = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate()
    );

    const todayEvents = events.filter((e) => {
      const eventDate = new Date(e.startTime);
      return (
        eventDate >= startOfToday &&
        eventDate < new Date(startOfToday.getTime() + 24 * 60 * 60 * 1000)
      );
    });

    const weekEvents = events.filter(
      (e) => new Date(e.startTime) >= startOfWeek
    );
    const monthEvents = events.filter(
      (e) => new Date(e.startTime) >= startOfMonth
    );

    const completedEvents = events.filter((e) => e.status === "completed");
    const cancelledEvents = events.filter((e) => e.status === "cancelled");

    const activeTrainerIds = new Set(weekEvents.map((e) => e.trainerId));
    const activeTrainersCount = activeTrainerIds.size;

    const revenueByTrainer = trainers.reduce(
      (acc, trainer) => {
        acc[trainer.id] = trainer.monthlyRevenue;
        return acc;
      },
      {} as Record<string, number>
    );

    const totalRevenue = trainers.reduce(
      (sum, trainer) => sum + trainer.monthlyRevenue,
      0
    );

    return {
      trainers: {
        total: trainers.length,
        active: trainers.filter((t) => t.status === "active").length,
        inactive: trainers.filter((t) => t.status === "inactive").length,
        newThisMonth: trainers.filter(
          (t) => new Date(t.joinDate) >= startOfMonth
        ).length,
      },
      clients: {
        total: clients.length,
        active: clients.filter((c) => c.status === "active").length,
        trial: clients.filter((c) => c.status === "trial").length,
        newThisMonth: clients.filter(
          (c) => new Date(c.joinDate) >= startOfMonth
        ).length,
      },
      workouts: {
        total: events.length,
        today: todayEvents.length,
        thisWeek: weekEvents.length,
        thisMonth: monthEvents.length,
        completed: completedEvents.length,
        cancelled: cancelledEvents.length,
      },
      revenue: {
        total: totalRevenue,
        thisMonth: totalRevenue,
        growth: 12.5, // –ú–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        byTrainer: revenueByTrainer,
      },
      activity: {
        activeTrainers: activeTrainersCount,
        busySlots: weekEvents.length,
        utilizationRate: Math.min(
          (weekEvents.length / (trainers.length * 40)) * 100,
          100
        ),
        avgSessionsPerTrainer:
          trainers.length > 0 ? weekEvents.length / trainers.length : 0,
      },
    };
  };

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const stats = React.useMemo(
    () => calculateStats(),
    [events, trainers, clients]
  );

  const refreshData = async () => {
    await loadData();
  };

  const getTrainerClients = (trainerId: string): ClientData[] => {
    return clients.filter((client) => client.trainerId === trainerId);
  };

  const getTrainerStats = (trainerId: string) => {
    const trainerEvents = events.filter(
      (event) => event.trainerId === trainerId
    );
    const trainerClients = getTrainerClients(trainerId);
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay() + 1);
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    const thisWeekEvents = trainerEvents.filter(
      (e) => new Date(e.startTime) >= startOfWeek
    );
    const thisMonthEvents = trainerEvents.filter(
      (e) => new Date(e.startTime) >= startOfMonth
    );

    return {
      totalEvents: trainerEvents.length,
      thisWeekEvents: thisWeekEvents.length,
      thisMonthEvents: thisMonthEvents.length,
      completedEvents: trainerEvents.filter((e) => e.status === "completed")
        .length,
      cancelledEvents: trainerEvents.filter((e) => e.status === "cancelled")
        .length,
      totalClients: trainerClients.length,
      activeClients: trainerClients.filter((c) => c.status === "active").length,
      avgProgress:
        trainerClients.length > 0
          ? trainerClients.reduce((sum, c) => sum + c.progress, 0) /
            trainerClients.length
          : 0,
    };
  };

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
  const getFilteredTrainers = (): TrainerData[] => {
    let filtered = trainers;

    if (searchTerm) {
      filtered = filtered.filter(
        (trainer) =>
          trainer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          trainer.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
          trainer.specializations.some((spec) =>
            spec.toLowerCase().includes(searchTerm.toLowerCase())
          )
      );
    }

    return filtered;
  };

  const getFilteredClients = (): ClientData[] => {
    let filtered = clients;

    if (searchTerm) {
      filtered = filtered.filter(
        (client) =>
          client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          client.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (client.trainerName &&
            client.trainerName.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    if (selectedTrainer) {
      filtered = filtered.filter(
        (client) => client.trainerId === selectedTrainer
      );
    }

    return filtered;
  };

  const getRecentActivity = () => {
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const recentEvents = events
      .sort(
        (a, b) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      )
      .slice(0, 10);

    const recentClients = clients
      .filter((c) => c.lastWorkout)
      .sort(
        (a, b) =>
          new Date(b.lastWorkout!).getTime() -
          new Date(a.lastWorkout!).getTime()
      )
      .slice(0, 5);

    return {
      events: recentEvents,
      clients: recentClients,
    };
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadData();
  }, []);

  const value: SuperAdminContextType = {
    trainers,
    clients,
    stats,
    loading,
    error,
    refreshData,
    getTrainerClients,
    getTrainerStats,
    searchTerm,
    setSearchTerm,
    selectedTrainer,
    setSelectedTrainer,
    dateRange,
    setDateRange,
    getFilteredTrainers,
    getFilteredClients,
    getRecentActivity,
  };

  return (
    <SuperAdminContext.Provider value={value}>
      {children}
    </SuperAdminContext.Provider>
  );
}

export function useSuperAdmin() {
  const context = useContext(SuperAdminContext);
  if (context === undefined) {
    throw new Error("useSuperAdmin must be used within a SuperAdminProvider");
  }
  return context;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export function useTrainerData(trainerId: string) {
  const { trainers, getTrainerStats, getTrainerClients } = useSuperAdmin();

  const trainer = trainers.find((t) => t.id === trainerId);
  const stats = trainer ? getTrainerStats(trainerId) : null;
  const clients = trainer ? getTrainerClients(trainerId) : [];

  return {
    trainer,
    stats,
    clients,
    isLoading: !trainer,
  };
}

export function useClientData(clientId: string) {
  const { clients, trainers } = useSuperAdmin();

  const client = clients.find((c) => c.id === clientId);
  const trainer = client
    ? trainers.find((t) => t.id === client.trainerId)
    : null;

  return {
    client,
    trainer,
    isLoading: !client,
  };
}

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
export function useSuperAdminAnalytics() {
  const { stats, trainers, clients } = useSuperAdmin(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º useSuperAdmin –≤–º–µ—Å—Ç–æ useSchedule

  const getTopPerformers = () => {
    return {
      byRevenue: [...trainers]
        .sort((a, b) => b.monthlyRevenue - a.monthlyRevenue)
        .slice(0, 5),
      byRating: [...trainers].sort((a, b) => b.rating - a.rating).slice(0, 5),
      byClients: [...trainers]
        .sort((a, b) => b.activeClients - a.activeClients)
        .slice(0, 5),
    };
  };

  const getGrowthMetrics = () => {
    const now = new Date();
    const lastMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);
    const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    const lastMonthClients = clients.filter((c: ClientData) => {
      const joinDate = new Date(c.joinDate);
      return joinDate >= lastMonth && joinDate < thisMonth;
    }).length;

    const thisMonthClients = clients.filter((c: ClientData) => {
      const joinDate = new Date(c.joinDate);
      return joinDate >= thisMonth;
    }).length;

    const clientGrowth =
      lastMonthClients > 0
        ? ((thisMonthClients - lastMonthClients) / lastMonthClients) * 100
        : 0;

    return {
      clientGrowth,
      newClientsThisMonth: thisMonthClients,
      newClientsLastMonth: lastMonthClients,
    };
  };

  const getRevenueAnalytics = () => {
    const totalRevenue = trainers.reduce((sum, trainer) => sum + trainer.monthlyRevenue, 0);
    const avgRevenuePerTrainer = trainers.length > 0 ? totalRevenue / trainers.length : 0;
    
    const revenueBySpecialization = trainers.reduce((acc, trainer) => {
      trainer.specializations.forEach(spec => {
        acc[spec] = (acc[spec] || 0) + trainer.monthlyRevenue;
      });
      return acc;
    }, {} as Record<string, number>);

    return {
      totalRevenue,
      avgRevenuePerTrainer,
      revenueBySpecialization,
      topEarners: trainers
        .sort((a, b) => b.monthlyRevenue - a.monthlyRevenue)
        .slice(0, 3)
    };
  };

  const getClientAnalytics = () => {
    const totalClients = clients.length;
    const activeClients = clients.filter(c => c.status === 'active').length;
    const trialClients = clients.filter(c => c.status === 'trial').length;
    
    const avgProgress = clients.length > 0 
      ? clients.reduce((sum, c) => sum + c.progress, 0) / clients.length 
      : 0;

    const clientsByTrainer = trainers.map(trainer => ({
      trainerId: trainer.id,
      trainerName: trainer.name,
      clientCount: clients.filter(c => c.trainerId === trainer.id).length,
      avgProgress: (() => {
        const trainerClients = clients.filter(c => c.trainerId === trainer.id);
        return trainerClients.length > 0
          ? trainerClients.reduce((sum, c) => sum + c.progress, 0) / trainerClients.length
          : 0;
      })()
    }));

    return {
      totalClients,
      activeClients,
      trialClients,
      avgProgress,
      clientsByTrainer,
      retentionRate: totalClients > 0 ? (activeClients / totalClients) * 100 : 0
    };
  };

  return {
    getTopPerformers,
    getGrowthMetrics,
    getRevenueAnalytics,
    getClientAnalytics,
    stats,
  };
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export function useSuperAdminFilters() {
  const { 
    searchTerm, 
    setSearchTerm, 
    selectedTrainer, 
    setSelectedTrainer,
    getFilteredTrainers,
    getFilteredClients 
  } = useSuperAdmin();

  const filteredTrainers = getFilteredTrainers();
  const filteredClients = getFilteredClients();

  const clearFilters = () => {
    setSearchTerm('');
    setSelectedTrainer(null);
  };

  const searchTrainers = (query: string) => {
    setSearchTerm(query);
  };

  const filterByTrainer = (trainerId: string | null) => {
    setSelectedTrainer(trainerId);
  };

  return {
    searchTerm,
    selectedTrainer,
    filteredTrainers,
    filteredClients,
    searchTrainers,
    filterByTrainer,
    clearFilters,
    hasActiveFilters: searchTerm !== '' || selectedTrainer !== null
  };
}

// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–∞—à–±–æ—Ä–¥–∞
export function useSuperAdminDashboard() {
  const { stats, loading, refreshData } = useSuperAdmin();
  const { events } = useSchedule();
  
  const [lastRefresh, setLastRefresh] = useState<Date>(new Date());
  const [autoRefresh, setAutoRefresh] = useState(false);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  useEffect(() => {
    if (!autoRefresh) return;

    const interval = setInterval(async () => {
      await refreshData();
      setLastRefresh(new Date());
    }, 5 * 60 * 1000);

    return () => clearInterval(interval);
  }, [autoRefresh, refreshData]);

  const handleRefresh = async () => {
    await refreshData();
    setLastRefresh(new Date());
  };

  const getDashboardAlerts = () => {
    const alerts = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    if (stats.trainers.inactive > 0) {
      alerts.push({
                type: 'warning' as const,
        message: `${stats.trainers.inactive} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è`,
        action: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∏–∑–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if (stats.activity.utilizationRate < 50) {
      alerts.push({
        type: 'info' as const,
        message: `–ù–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã: ${stats.activity.utilizationRate.toFixed(1)}%`,
        action: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const cancellationRate = stats.workouts.total > 0 
      ? (stats.workouts.cancelled / stats.workouts.total) * 100 
      : 0;
    
    if (cancellationRate > 10) {
      alerts.push({
        type: 'error' as const,
        message: `–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω: ${cancellationRate.toFixed(1)}%`,
        action: '–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const unconfirmedEvents = events.filter(e => 
      e.status === 'scheduled' && 
      new Date(e.startTime) > new Date() &&
      new Date(e.startTime).getTime() - new Date().getTime() < 24 * 60 * 60 * 1000
    );

    if (unconfirmedEvents.length > 0) {
      alerts.push({
        type: 'warning' as const,
        message: `${unconfirmedEvents.length} —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`,
        action: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è'
      });
    }

    return alerts;
  };

  const getSystemHealth = () => {
    const health = {
      overall: 'good' as 'excellent' | 'good' | 'warning' | 'critical',
      scores: {
        trainers: 0,
        clients: 0,
        revenue: 0,
        activity: 0
      }
    };

    // –û—Ü–µ–Ω–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    const activeTrainerRate = stats.trainers.total > 0 
      ? (stats.trainers.active / stats.trainers.total) * 100 
      : 0;
    health.scores.trainers = activeTrainerRate;

    // –û—Ü–µ–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const activeClientRate = stats.clients.total > 0 
      ? (stats.clients.active / stats.clients.total) * 100 
      : 0;
    health.scores.clients = activeClientRate;

    // –û—Ü–µ–Ω–∫–∞ –≤—ã—Ä—É—á–∫–∏ (—Ä–æ—Å—Ç)
    health.scores.revenue = Math.max(0, Math.min(100, stats.revenue.growth * 10 + 50));

    // –û—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    health.scores.activity = Math.min(100, stats.activity.utilizationRate);

    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    const avgScore = Object.values(health.scores).reduce((sum, score) => sum + score, 0) / 4;
    
    if (avgScore >= 90) health.overall = 'excellent';
    else if (avgScore >= 75) health.overall = 'good';
    else if (avgScore >= 60) health.overall = 'warning';
    else health.overall = 'critical';

    return health;
  };

  return {
    stats,
    loading,
    lastRefresh,
    autoRefresh,
    setAutoRefresh,
    handleRefresh,
    getDashboardAlerts,
    getSystemHealth,
    isDataStale: new Date().getTime() - lastRefresh.getTime() > 10 * 60 * 1000 // 10 –º–∏–Ω—É—Ç
  };
}

// –•—É–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
export function useSuperAdminExport() {
  const { trainers, clients, stats } = useSuperAdmin();
  const { events } = useSchedule();

  const exportToCSV = (data: any[], filename: string) => {
    if (data.length === 0) return;

    const headers = Object.keys(data[0]);
    const csvContent = [
      headers.join(','),
      ...data.map(row => 
        headers.map(header => {
          const value = row[header];
          // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
          if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
            return `"${value.replace(/"/g, '""')}"`;
          }
          return value;
        }).join(',')
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportTrainers = () => {
    const exportData = trainers.map(trainer => ({
      'ID': trainer.id,
      '–ò–º—è': trainer.name,
      'Email': trainer.email,
      '–¢–µ–ª–µ—Ñ–æ–Ω': trainer.phone,
      '–†–æ–ª—å': trainer.role,
      '–°—Ç–∞—Ç—É—Å': trainer.status,
      '–†–µ–π—Ç–∏–Ω–≥': trainer.rating,
      '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤': trainer.activeClients,
      '–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤': trainer.totalClients,
      '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫': trainer.totalWorkouts,
      '–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü': trainer.monthlyRevenue,
      '–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è': trainer.joinDate,
      '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏': trainer.specializations.join('; ')
    }));
    
    exportToCSV(exportData, 'trainers');
  };

  const exportClients = () => {
    const exportData = clients.map(client => ({
      'ID': client.id,
      '–ò–º—è': client.name,
      'Email': client.email,
      '–¢–µ–ª–µ—Ñ–æ–Ω': client.phone,
      '–¢—Ä–µ–Ω–µ—Ä': client.trainerName || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
      '–°—Ç–∞—Ç—É—Å': client.status,
      '–ü—Ä–æ–≥—Ä–∞–º–º–∞': client.currentProgram || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
      '–ü—Ä–æ–≥—Ä–µ—Å—Å': `${client.progress}%`,
      '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫': client.totalWorkouts,
      '–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞': client.lastWorkout || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      '–î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è': client.joinDate,
      '–¶–µ–ª–∏': client.goals?.join('; ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
    }));
    
    exportToCSV(exportData, 'clients');
  };

  const exportEvents = () => {
    const exportData = events.map(event => ({
      'ID': event._id,
      '–ù–∞–∑–≤–∞–Ω–∏–µ': event.title,
      '–¢–∏–ø': event.type,
      '–¢—Ä–µ–Ω–µ—Ä': event.trainerName,
      '–ö–ª–∏–µ–Ω—Ç': event.clientName || '–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ',
      '–°—Ç–∞—Ç—É—Å': event.status,
      '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': new Date(event.startTime).toLocaleString('ru'),
      '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è': new Date(event.endTime).toLocaleString('ru'),
      '–ú–µ—Å—Ç–æ': event.location || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      '–û–ø–∏—Å–∞–Ω–∏–µ': event.description || '',
      '–°–æ–∑–¥–∞–Ω–æ': new Date(event.createdAt).toLocaleString('ru')
    }));
    
    exportToCSV(exportData, 'events');
  };

  const exportStats = () => {
    const exportData = [
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.trainers.total,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–¢—Ä–µ–Ω–µ—Ä—ã'
      },
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.trainers.active,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–¢—Ä–µ–Ω–µ—Ä—ã'
      },
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.clients.total,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ö–ª–∏–µ–Ω—Ç—ã'
      },
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.clients.active,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ö–ª–∏–µ–Ω—Ç—ã'
      },
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.workouts.today,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
      },
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.workouts.thisWeek,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
      },
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.revenue.thisMonth,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–§–∏–Ω–∞–Ω—Å—ã'
      },
      {
        '–ú–µ—Ç—Ä–∏–∫–∞': '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã (%)',
        '–ó–Ω–∞—á–µ–Ω–∏–µ': stats.activity.utilizationRate.toFixed(1),
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–°–∏—Å—Ç–µ–º–∞'
      }
    ];
    
    exportToCSV(exportData, 'statistics');
  };

  const exportAll = () => {
    exportTrainers();
    setTimeout(() => exportClients(), 500);
    setTimeout(() => exportEvents(), 1000);
    setTimeout(() => exportStats(), 1500);
  };

  return {
    exportTrainers,
    exportClients,
    exportEvents,
    exportStats,
    exportAll
  };
}

// –•—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
export function useSuperAdminNotifications() {
  const { stats } = useSuperAdmin();
  const { events } = useSchedule();


  type NotificationType = {
    id: string;
    type: 'info' | 'warning' | 'error' | 'success';
    title: string;
    message: string;
    timestamp: Date;
    read: boolean;
  };

  const [notifications, setNotifications] = useState<Array<{
    id: string;
    type: 'info' | 'warning' | 'error' | 'success';
    title: string;
    message: string;
    timestamp: Date;
    read: boolean;
  }>>([]);

  useEffect(() => {
    const checkAndCreateNotifications = () => {
      const newNotifications: NotificationType[] = [];
      const now = new Date();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É
      if (stats.activity.utilizationRate < 30) {
        newNotifications.push({
          id: `low_utilization_${now.getTime()}`,
          type: 'warning' as const,
          title: '–ù–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã',
          message: `–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤—Å–µ–≥–æ ${stats.activity.utilizationRate.toFixed(1)}%. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.`,
          timestamp: now,
          read: false
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
      if (stats.clients.newThisMonth > 5) {
        newNotifications.push({
          id: `new_clients_${now.getTime()}`,
          type: 'success' as const,
          title: '–†–æ—Å—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã',
          message: `–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–æ—Å—å ${stats.clients.newThisMonth} –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!`,
          timestamp: now,
          read: false
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
      const urgentEvents = events.filter(e => {
        const eventTime = new Date(e.startTime);
        const timeDiff = eventTime.getTime() - now.getTime();
        return e.status === 'scheduled' && timeDiff > 0 && timeDiff < 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞
      });

      if (urgentEvents.length > 0) {
        newNotifications.push({
          id: `urgent_events_${now.getTime()}`,
          type: 'info' as const,
          title: '–°–æ–±—ã—Ç–∏—è —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
          message: `${urgentEvents.length} —Å–æ–±—ã—Ç–∏–π –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
          timestamp: now,
          read: false
        });
      }

      if (newNotifications.length > 0) {
        setNotifications(prev => [...newNotifications, ...prev].slice(0, 50)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 50 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const interval = setInterval(checkAndCreateNotifications, 5 * 60 * 1000);
    
    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    checkAndCreateNotifications();

    return () => clearInterval(interval);
  }, [stats, events]);

  const markAsRead = (notificationId: string) => {
    setNotifications(prev => 
      prev.map(n => n.id === notificationId ? { ...n, read: true } : n)
    );
  };

  const markAllAsRead = () => {
    setNotifications(prev => prev.map(n => ({ ...n, read: true })));
  };

  const removeNotification = (notificationId: string) => {
    setNotifications(prev => prev.filter(n => n.id !== notificationId));
  };

  const clearAll = () => {
    setNotifications([]);
  };

  const unreadCount = notifications.filter(n => !n.read).length;

  return {
    notifications,
    unreadCount,
    markAsRead,
    markAllAsRead,
    removeNotification,
    clearAll
  };
}


