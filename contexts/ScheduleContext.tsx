// contexts/ScheduleContext.tsx (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
"use client";

import React, { createContext, useContext, useState, useEffect } from 'react';
import { ScheduleEvent, TrainerSchedule, CreateEventData } from '@/components/admin/schedule/types';
import { ensureDebugSystem } from '@/utils/cleanTypes';

// ‚úÖ –£–ë–ò–†–ê–ï–ú –î–£–ë–õ–ò–†–£–Æ–©–ò–ï –û–ë–™–Ø–í–õ–ï–ù–ò–Ø –¢–ò–ü–û–í

interface ScheduleContextType {
  // –î–∞–Ω–Ω—ã–µ
  events: ScheduleEvent[];
  trainers: TrainerSchedule[];
  loading: boolean;
  error: string | null;
  
  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
  createEvent: (data: CreateEventData) => Promise<void>;
  updateEvent: (eventId: string, data: Partial<ScheduleEvent>) => Promise<void>;
  deleteEvent: (eventId: string) => Promise<void>;
  updateEventStatus: (eventId: string, status: ScheduleEvent['status']) => Promise<void>;
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
  getEventsByTrainer: (trainerId: string) => ScheduleEvent[];
  getEventsInDateRange: (start: Date, end: Date) => ScheduleEvent[];
  searchEvents: (query: string) => ScheduleEvent[];
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  refreshData: () => Promise<void>;
  
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  subscribeToUpdates: (callback: (events: ScheduleEvent[]) => void) => () => void;
}

const ScheduleContext = createContext<ScheduleContextType | undefined>(undefined);

export function ScheduleProvider({ children }: { children: React.ReactNode }) {
  const [events, setEvents] = useState<ScheduleEvent[]>([]);
  const [trainers, setTrainers] = useState<TrainerSchedule[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [subscribers, setSubscribers] = useState<((events: ScheduleEvent[]) => void)[]>([]);

  // ‚úÖ –û–ë–™–Ø–í–õ–Ø–ï–ú –í–°–ï –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–î –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï–ú
  const getMockEvents = (): ScheduleEvent[] => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    return [
      {
        _id: 'event1',
        title: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Ä—Ö —Ç–µ–ª–∞',
        type: 'training',
        startTime: new Date(today.getTime() + 10 * 60 * 60 * 1000).toISOString(),
        endTime: new Date(today.getTime() + 11 * 60 * 60 * 1000).toISOString(),
        trainerId: 'trainer1',
        trainerName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
        clientId: 'client1',
        clientName: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
        status: 'confirmed',
        location: '–ó–∞–ª ‚Ññ1',
        createdAt: new Date().toISOString(),
        createdBy: 'trainer1'
      },
      {
        _id: 'event2',
        title: '–ì—Ä—É–ø–ø–æ–≤–∞—è –π–æ–≥–∞',
        description: '–£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –π–æ–≥–∏',
        type: 'training',
        startTime: new Date(today.getTime() + 24 * 60 * 60 * 1000 + 9 * 60 * 60 * 1000).toISOString(),
        endTime: new Date(today.getTime() + 24 * 60 * 60 * 1000 + 10 * 60 * 60        * 1000).toISOString(),
        trainerId: 'trainer2',
        trainerName: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        status: 'scheduled',
        location: '–ô–æ–≥–∞-—Å—Ç—É–¥–∏—è',
        createdAt: new Date().toISOString(),
        createdBy: 'trainer2'
      },
      {
        _id: 'event3',
        title: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º',
        type: 'training',
        startTime: new Date(today.getTime() + 14 * 60 * 60 * 1000).toISOString(),
        endTime: new Date(today.getTime() + 15 * 60 * 60 * 1000).toISOString(),
        trainerId: 'trainer1',
        trainerName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
        clientId: 'client3',
        clientName: '–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞',
        status: 'confirmed',
        location: '–ó–∞–ª ‚Ññ2',
        createdAt: new Date().toISOString(),
        createdBy: 'trainer1'
      },
      {
        _id: 'event4',
        title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏ —Ä–∞—Å—Ç—è–∂–∫–∞',
        description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞',
        type: 'training',
        startTime: new Date(today.getTime() + 48 * 60 * 60 * 1000 + 18 * 60 * 60 * 1000).toISOString(),
        endTime: new Date(today.getTime() + 48 * 60 * 60 * 1000 + 19 * 60 * 60 * 1000).toISOString(),
        trainerId: 'trainer3',
        trainerName: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        clientId: 'client4',
        clientName: '–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤',
        status: 'completed',
        location: '–ô–æ–≥–∞-—Å—Ç—É–¥–∏—è',
        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
        createdBy: 'trainer3'
      },
      {
        _id: 'event5',
        title: '–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∫–∞—Ä–¥–∏–æ —Å–µ—Å—Å–∏—è',
        type: 'training',
        startTime: new Date(today.getTime() + 72 * 60 * 60 * 1000 + 16 * 60 * 60 * 1000).toISOString(),
        endTime: new Date(today.getTime() + 72 * 60 * 60 * 1000 + 17 * 60 * 60 * 1000).toISOString(),
        trainerId: 'trainer2',
        trainerName: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        clientId: 'client2',
        clientName: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        status: 'scheduled',
        location: '–ö–∞—Ä–¥–∏–æ –∑–æ–Ω–∞',
        createdAt: new Date().toISOString(),
        createdBy: 'trainer2'
      }
    ];
  };

  const getMockTrainers = (): TrainerSchedule[] => {
    return [
      {
        trainerId: 'trainer1',
        trainerName: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
        trainerRole: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
        events: [],
        workingHours: {
          start: '09:00',
          end: '18:00',
          days: [1, 2, 3, 4, 5]
        }
      },
      {
        trainerId: 'trainer2',
        trainerName: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
        trainerRole: '–§–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
        events: [],
        workingHours: {
          start: '08:00',
          end: '17:00',
          days: [1, 2, 3, 4, 5, 6]
        }
      },
      {
        trainerId: 'trainer3',
        trainerName: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
        trainerRole: '–ô–æ–≥–∞-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
        events: [],
        workingHours: {
          start: '10:00',
          end: '19:00',
          days: [1, 2, 3, 4, 5, 6, 0]
        }
      }
    ];
  };

  const getMockClients = () => {
    return [
      { id: 'client1', name: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞' },
      { id: 'client2', name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤' },
      { id: 'client3', name: '–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞' },
      { id: 'client4', name: '–ú–∏—Ö–∞–∏–ª –ü–µ—Ç—Ä–æ–≤' },
      { id: 'client5', name: '–û–ª—å–≥–∞ –ü–µ—Ç—Ä–æ–≤–∞' },
      { id: 'client6', name: '–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤' }
    ];
  };

  // ‚úÖ –§–£–ù–ö–¶–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –î–†–£–ì–ò–• –ö–û–ù–¢–ï–ö–°–¢–û–í –ß–ï–†–ï–ó WINDOW EVENTS
  const notifyOtherContexts = (updatedEvents: ScheduleEvent[]) => {
    try {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ window events (–∏–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
      if (typeof window !== 'undefined') {
        const event = new CustomEvent('schedule-updated', {
          detail: {
            events: updatedEvents,
            timestamp: new Date().toISOString()
          }
        });
        window.dispatchEvent(event);
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Schedule');
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º Dashboard —á–µ—Ä–µ–∑ debug —Å–∏—Å—Ç–µ–º—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
      if (typeof window !== 'undefined' && window.fitAccessDebug?.dashboard) {
        console.log('üîÑ –£–≤–µ–¥–æ–º–ª—è–µ–º Dashboard –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–æ–±—ã—Ç–∏–π:', updatedEvents.length);
        
        if (window.fitAccessDebug.dashboard.syncAllData) {
          window.fitAccessDebug.dashboard.syncAllData();
        }
        
        if (window.fitAccessDebug.dashboard.refreshStats) {
          window.fitAccessDebug.dashboard.refreshStats();
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã:', error);
    }
  };

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  const notifySubscribers = (updatedEvents: ScheduleEvent[]) => {
    subscribers.forEach(callback => callback(updatedEvents));
    
    // ‚úÖ –£–í–ï–î–û–ú–õ–Ø–ï–ú –î–†–£–ì–ò–ï –ö–û–ù–¢–ï–ö–°–¢–´ –û –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•
    notifyOtherContexts(updatedEvents);
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω
  const getTrainerNameById = (trainerId: string): string => {
    const trainer = trainers.find(t => t.trainerId === trainerId);
    return trainer?.trainerName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä';
  };

  const getClientNameById = (clientId: string): string => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ API –∫–ª–∏–µ–Ω—Ç–æ–≤
    const mockClients = getMockClients();
    const client = mockClients.find(c => c.id === clientId);
    return client?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç';
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  const updateTrainerEvents = (updatedEvents: ScheduleEvent[]) => {
    const updatedTrainers = trainers.map(trainer => ({
      ...trainer,
      events: updatedEvents.filter(event => event.trainerId === trainer.trainerId)
    }));
    setTrainers(updatedTrainers);
  };

  // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const createEvent = async (data: CreateEventData): Promise<void> => {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', data.title);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API —Å –∏–º–µ–Ω–∞–º–∏
      const eventDataWithNames = {
        ...data,
        trainerName: getTrainerNameById(data.trainerId),
        clientName: data.clientId ? getClientNameById(data.clientId) : undefined
      };
      
      const response = await fetch('/api/schedule/events', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(eventDataWithNames)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const newEvent = await response.json();
      const updatedEvents = [...events, newEvent];
      setEvents(updatedEvents);
      
      updateTrainerEvents(updatedEvents);
      notifySubscribers(updatedEvents);
      
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', newEvent._id);
      
    } catch (err) {
      console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ');
      
      // Mock —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      const newEvent: ScheduleEvent = {
        _id: `event_${Date.now()}`,
        title: data.title,
        description: data.description,
        type: data.type,
        startTime: data.startTime,
        endTime: data.endTime,
        trainerId: data.trainerId,
        trainerName: getTrainerNameById(data.trainerId),
        clientId: data.clientId,
        clientName: data.clientId ? getClientNameById(data.clientId) : undefined,
        status: 'scheduled',
        location: data.location,
        notes: data.notes,
        recurring: data.recurring,
        createdAt: new Date().toISOString(),
        createdBy: 'current_user'
      };
      
      const updatedEvents = [...events, newEvent];
      setEvents(updatedEvents);
      updateTrainerEvents(updatedEvents);
      notifySubscribers(updatedEvents);
      
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', newEvent._id);
    }
  };

  const updateEvent = async (eventId: string, data: Partial<ScheduleEvent>): Promise<void> => {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId);
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData = { ...data };
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è trainerId, –¥–æ–±–∞–≤–ª—è–µ–º trainerName
      if (data.trainerId && !data.trainerName) {
        updateData.trainerName = getTrainerNameById(data.trainerId);
      }
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è clientId, –¥–æ–±–∞–≤–ª—è–µ–º clientName
      if (data.clientId && !data.clientName) {
        updateData.clientName = getClientNameById(data.clientId);
      }
      
      const response = await fetch(`/api/schedule/events/${eventId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const updatedEvent = await response.json();
      const updatedEvents = events.map(event => 
        event._id === eventId ? { ...event, ...updatedEvent } : event
      );
      
      setEvents(updatedEvents);
      updateTrainerEvents(updatedEvents);
      notifySubscribers(updatedEvents);
      
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', eventId);
      
    } catch (err) {
      console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ');
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const updateData = { ...data };
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è trainerId, –¥–æ–±–∞–≤–ª—è–µ–º trainerName
      if (data.trainerId && !data.trainerName) {
        updateData.trainerName = getTrainerNameById(data.trainerId);
      }
      
      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è clientId, –¥–æ–±–∞–≤–ª—è–µ–º clientName
      if (data.clientId && !data.clientName) {
        updateData.clientName = getClientNameById(data.clientId);
      }
      
      // Mock –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const updatedEvents = events.map(event => 
        event._id === eventId ? { 
          ...event, 
          ...updateData, 
          updatedAt: new Date().toISOString() 
        } : event
      );
      
      setEvents(updatedEvents);
      updateTrainerEvents(updatedEvents);
      notifySubscribers(updatedEvents);
      
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', eventId);
    }
  };

  const deleteEvent = async (eventId: string): Promise<void> => {
    try {
      console.log('üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventId);
      
      const response = await fetch(`/api/schedule/events/${eventId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const updatedEvents = events.filter(event => event._id !== eventId);
      setEvents(updatedEvents);
      updateTrainerEvents(updatedEvents);
      notifySubscribers(updatedEvents);
      
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ:', eventId);
      
    } catch (err) {
      console.log('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ');
      
      // Mock —É–¥–∞–ª–µ–Ω–∏–µ
      const updatedEvents = events.filter(event => event._id !== eventId);
      setEvents(updatedEvents);
      updateTrainerEvents(updatedEvents);
      notifySubscribers(updatedEvents);
      
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', eventId);
    }
  };

  const updateEventStatus = async (eventId: string, status: ScheduleEvent['status']): Promise<void> => {
    await updateEvent(eventId, { status });
  };

  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const getEventsByTrainer = (trainerId: string): ScheduleEvent[] => {
    return events.filter(event => event.trainerId === trainerId);
  };

  const getEventsInDateRange = (start: Date, end: Date): ScheduleEvent[] => {
    return events.filter(event => {
      const eventStart = new Date(event.startTime);
      return eventStart >= start && eventStart <= end;
    });
  };

  const searchEvents = (query: string): ScheduleEvent[] => {
    const lowercaseQuery = query.toLowerCase();
    return events.filter(event =>
      event.title.toLowerCase().includes(lowercaseQuery) ||
      event.trainerName.toLowerCase().includes(lowercaseQuery) ||
      (event.clientName && event.clientName.toLowerCase().includes(lowercaseQuery)) ||
      (event.description && event.description.toLowerCase().includes(lowercaseQuery))
    );
  };

  const refreshData = async (): Promise<void> => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    await loadData();
  };

   // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const subscribeToUpdates = (callback: (events: ScheduleEvent[]) => void): (() => void) => {
    setSubscribers(prev => [...prev, callback]);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      setSubscribers(prev => prev.filter(sub => sub !== callback));
    };
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  const loadData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å API
      const [eventsResponse, trainersResponse] = await Promise.allSettled([
        fetch('/api/schedule/events'),
        fetch('/api/schedule/trainers')
      ]);
      
      let eventsData: ScheduleEvent[] = [];
      let trainersData: TrainerSchedule[] = [];
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ–±—ã—Ç–∏–π
      if (eventsResponse.status === 'fulfilled' && eventsResponse.value.ok) {
        eventsData = await eventsResponse.value.json();
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å API:', eventsData.length);
      } else {
        console.log('‚ö†Ô∏è API —Å–æ–±—ã—Ç–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
        eventsData = getMockEvents();
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      if (trainersResponse.status === 'fulfilled' && trainersResponse.value.ok) {
        trainersData = await trainersResponse.value.json();
        console.log('‚úÖ –¢—Ä–µ–Ω–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å API:', trainersData.length);
      } else {
        console.log('‚ö†Ô∏è API —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ');
        trainersData = getMockTrainers();
      }
      
      // –°–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏
      const updatedTrainers = trainersData.map(trainer => ({
        ...trainer,
        events: eventsData.filter(event => event.trainerId === trainer.trainerId)
      }));
      
      setEvents(eventsData);
      setTrainers(updatedTrainers);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      notifySubscribers(eventsData);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      
    } catch (err) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      
      // Fallback –∫ mock –¥–∞–Ω–Ω—ã–º
      const mockEvents = getMockEvents();
      const mockTrainers = getMockTrainers();
      
      setEvents(mockEvents);
      setTrainers(mockTrainers);
      notifySubscribers(mockEvents);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í DEBUG –°–ò–°–¢–ï–ú–ï –°–†–ê–ó–£ –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ö–û–ù–¢–ï–ö–°–¢–ê
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ï–î–ò–ù–£–Æ –§–£–ù–ö–¶–ò–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
      ensureDebugSystem();
      
      const scheduleContext = {
        events,
        trainers,
        loading,
        error,
        createEvent,
        updateEvent,
        deleteEvent,
        updateEventStatus,
        getEventsByTrainer,
        getEventsInDateRange,
        searchEvents,
        refreshData,
        subscribeToUpdates,
        getStats: () => ({
          totalEvents: events.length,
          activeEvents: events.filter(e => e.status !== 'cancelled').length,
          trainersCount: trainers.length,
          todayEvents: events.filter(e => {
            const today = new Date();
            const eventDate = new Date(e.startTime);
            return eventDate.toDateString() === today.toDateString();
          }).length,
          upcomingEvents: events.filter(e => 
            new Date(e.startTime) > new Date() && e.status !== 'cancelled'
          ).length
        }),
        clearAllEvents: () => {
          setEvents([]);
          setTrainers(prev => prev.map(t => ({ ...t, events: [] })));
          notifySubscribers([]);
        }
      };
      
      // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í –¢–ò–ü–û–í
      window.fitAccessDebug.schedule = scheduleContext;
      console.log('‚úÖ Schedule –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ debug —Å–∏—Å—Ç–µ–º–µ');
    }
  }, [events, trainers, loading, error]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    loadData();
  }, []);

  const value: ScheduleContextType = {
    events,
    trainers,
    loading,
    error,
    createEvent,
    updateEvent,
    deleteEvent,
    updateEventStatus,
    getEventsByTrainer,
    getEventsInDateRange,
    searchEvents,
    refreshData,
    subscribeToUpdates
  };

  return (
    <ScheduleContext.Provider value={value}>
      {children}
    </ScheduleContext.Provider>
  );
}

export function useSchedule() {
  const context = useContext(ScheduleContext);
  if (context === undefined) {
    throw new Error('useSchedule must be used within a ScheduleProvider');
  }
  return context;
}

// ‚úÖ –û–°–¢–ê–õ–¨–ù–´–ï –•–£–ö–ò –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
export function useScheduleStats() {
  const { events } = useSchedule();
  
  return React.useMemo(() => {
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay() + 1);
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const startOfToday = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    const todayEvents = events.filter(e => {
      const eventDate = new Date(e.startTime);
      return eventDate >= startOfToday && eventDate < new Date(startOfToday.getTime() + 24 * 60 * 60 * 1000);
    });
    
    return {
      total: events.length,
      today: todayEvents.length,
      thisWeek: events.filter(e => new Date(e.startTime) >= startOfWeek).length,
      thisMonth: events.filter(e => new Date(e.startTime) >= startOfMonth).length,
      upcoming: events.filter(e => new Date(e.startTime) > now && e.status !== 'cancelled').length,
      completed: events.filter(e => e.status === 'completed').length,
      cancelled: events.filter(e => e.status === 'cancelled').length,
      confirmed: events.filter(e => e.status === 'confirmed').length,
      scheduled: events.filter(e => e.status === 'scheduled').length
    };
  }, [events]);
}

export function useTrainerSchedule(trainerId: string) {
  const { events, trainers, getEventsByTrainer } = useSchedule();
  
  const trainer = trainers.find(t => t.trainerId === trainerId);
  const trainerEvents = getEventsByTrainer(trainerId);
  
  const upcomingEvents = trainerEvents
    .filter(event => new Date(event.startTime) > new Date() && event.status !== 'cancelled')
    .sort((a, b) => new Date(a.startTime).getTime() - new Date(b.startTime).getTime());
  
  const todayEvents = trainerEvents.filter(event => {
    const today = new Date();
    const eventDate = new Date(event.startTime);
    return eventDate.toDateString() === today.toDateString();
  });
  
  return {
    trainer,
    events: trainerEvents,
    upcomingEvents,
    todayEvents,
    isLoading: !trainer
  };
}

export function useEventConflicts() {
  const { events } = useSchedule();
  
  const checkConflicts = React.useCallback((newEvent: {
    trainerId: string;
    startTime: string;
    endTime: string;
    excludeEventId?: string;
  }) => {
    const newStart = new Date(newEvent.startTime);
    const newEnd = new Date(newEvent.endTime);
    
    return events.filter(event => {
      if (newEvent.excludeEventId && event._id === newEvent.excludeEventId) {
        return false;
      }
      
      if (event.trainerId !== newEvent.trainerId) {
        return false;
      }
      
      if (event.status === 'cancelled') {
        return false;
      }
      
      const eventStart = new Date(event.startTime);
      const eventEnd = new Date(event.endTime);
      
      return (newStart < eventEnd && newEnd > eventStart);
    });
  }, [events]);
  
  const isAvailable = React.useCallback((trainerId: string, startTime: string, endTime: string, excludeEventId?: string) => {
    const conflicts = checkConflicts({ trainerId, startTime, endTime, excludeEventId });
    return conflicts.length === 0;
  }, [checkConflicts]);
  
  return {
    checkConflicts,
    isAvailable
  };
}

export function useTrainerAvailability() {
  const { trainers, events } = useSchedule();
  
  const getAvailableTrainers = React.useCallback((startTime: string, endTime: string, excludeEventId?: string) => {
    return trainers.filter(trainer => {
      const conflicts = events.filter(event => {
        if (excludeEventId && event._id === excludeEventId) {
          return false;
        }
        
        if (event.trainerId !== trainer.trainerId) {
          return false;
        }
        
        if (event.status === 'cancelled') {
          return false;
        }
        
        const eventStart = new Date(event.startTime);
        const eventEnd = new Date(event.endTime);
        const newStart = new Date(startTime);
        const newEnd = new Date(endTime);
        
        return (newStart < eventEnd && newEnd > eventStart);
      });
      
      return conflicts.length === 0;
    });
  }, [trainers, events]);
  
  const getNextAvailableSlot = React.useCallback((trainerId: string, duration: number = 60) => {
    const trainer = trainers.find(t => t.trainerId === trainerId);
    if (!trainer) return null;
    
    const now = new Date();
    const searchStart = new Date(now);
    searchStart.setMinutes(0, 0, 0);
    searchStart.setHours(searchStart.getHours() + 1);
    
    // –ò—â–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π
    for (let day = 0; day < 7; day++) {
      const currentDay = new Date(searchStart);
      currentDay.setDate(searchStart.getDate() + day);
      
      const dayOfWeek = currentDay.getDay();
      if (!trainer.workingHours.days.includes(dayOfWeek)) {
        continue;
      }
      
      const [startHour, startMinute] = trainer.workingHours.start.split(':').map(Number);
      const [endHour, endMinute] = trainer.workingHours.end.split(':').map(Number);
      
      const workStart = new Date(currentDay);
      workStart.setHours(startHour, startMinute, 0, 0);
      
      const workEnd = new Date(currentDay);
      workEnd.setHours(endHour, endMinute, 0, 0);
      
      for (let hour = workStart.getHours(); hour < workEnd.getHours(); hour++) {
        const slotStart = new Date(currentDay);
        slotStart.setHours(hour, 0, 0, 0);
        
        const slotEnd = new Date(slotStart);
        slotEnd.setMinutes(slotEnd.getMinutes() + duration);
        
        if (slotEnd > workEnd) break;
        
        const conflicts = events.filter(event => {
          if (event.trainerId !== trainerId || event.status === 'cancelled') {
            return false;
          }
          
          const eventStart = new Date(event.startTime);
          const eventEnd = new Date(event.endTime);
          
          return (slotStart < eventEnd && slotEnd > eventStart);
        });
        
        if (conflicts.length === 0) {
          return {
            startTime: slotStart.toISOString(),
            endTime: slotEnd.toISOString()
          };
        }
      }
    }
    
    return null;
  }, [trainers, events]);
  
  return {
    getAvailableTrainers,
    getNextAvailableSlot
  };
}

export function useScheduleAnalytics() {
  const { events, trainers } = useSchedule();
  
  return React.useMemo(() => {
    const now = new Date();
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay() + 1);
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º
    const trainerStats = trainers.map(trainer => {
      const trainerEvents = events.filter(e => e.trainerId === trainer.trainerId);
      const thisWeekEvents = trainerEvents.filter(e => new Date(e.startTime) >= startOfWeek);
      const thisMonthEvents = trainerEvents.filter(e => new Date(e.startTime) >= startOfMonth);
      const completedEvents = trainerEvents.filter(e => e.status === 'completed');
      const cancelledEvents = trainerEvents.filter(e => e.status === 'cancelled');
      
      return {
        trainerId: trainer.trainerId,
        trainerName: trainer.trainerName,
        totalEvents: trainerEvents.length,
        thisWeekEvents: thisWeekEvents.length,
        thisMonthEvents: thisMonthEvents.length,
        completedEvents: completedEvents.length,
        cancelledEvents: cancelledEvents.length,
        cancellationRate: trainerEvents.length > 0 ? (cancelledEvents.length / trainerEvents.length) * 100 : 0,
        utilizationRate: thisWeekEvents.length / 40 * 100 // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 40 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é
      };
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const timeStats = {
      busyHours: {} as Record<number, number>,
      busyDays: {} as Record<number, number>
    };
    
    events.forEach(event => {
      if (event.status !== 'cancelled') {
        const eventDate = new Date(event.startTime);
        const hour = eventDate.getHours();
        const day = eventDate.getDay();
        
        timeStats.busyHours[hour] = (timeStats.busyHours[hour] || 0) + 1;
        timeStats.busyDays[day] = (timeStats.busyDays[day] || 0) + 1;
      }
    });
    
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
    const eventTypeStats = events.reduce((acc, event) => {
      if (event.status !== 'cancelled') {
        acc[event.type] = (acc[event.type] || 0) + 1;
      }
      return acc;
    }, {} as Record<string, number>);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    const weeklyUtilization = Array.from({ length: 7 }, (_, day) => {
      const dayEvents = events.filter(event => {
        const eventDate = new Date(event.startTime);
        return eventDate.getDay() === day && event.status !== 'cancelled';
      });
      
      return {
        day,
        dayName: ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][day],
        events: dayEvents.length,
        hours: dayEvents.reduce((total, event) => {
          const start = new Date(event.startTime);
          const end = new Date(event.endTime);
          return total + (end.getTime() - start.getTime()) / (1000 * 60 * 60);
        }, 0)
      };
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthlyStats = Array.from({ length: 12 }, (_, month) => {
      const monthEvents = events.filter(event => {
        const eventDate = new Date(event.startTime);
        return eventDate.getMonth() === month && event.status !== 'cancelled';
      });
      
      return {
        month,
        monthName: [
          '–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
          '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'
        ][month],
        events: monthEvents.length,
        revenue: monthEvents.length * 1500 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      };
    });
    
    return {
      trainerStats,
      timeStats,
      eventTypeStats,
      weeklyUtilization,
      monthlyStats,
      summary: {
        totalEvents: events.length,
        activeEvents: events.filter(e => e.status !== 'cancelled').length,
        completionRate: events.length > 0 ? 
          (events.filter(e => e.status === 'completed').length / events.length) * 100 : 0,
        averageEventsPerTrainer: trainers.length > 0 ? 
          events.length / trainers.length : 0,
        peakHour: Object.entries(timeStats.busyHours)
          .sort(([,a], [,b]) => b - a)[0]?.[0] || '10',
        peakDay: Object.entries(timeStats.busyDays)
          .sort(([,a], [,b]) => b - a)[0]?.[0] || '1'
      }
    };
  }, [events, trainers]);
}



