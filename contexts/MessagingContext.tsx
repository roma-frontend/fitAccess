// contexts/MessagingContext.tsx
"use client";

import React, { createContext, useContext, useState, useEffect } from 'react';

interface Message {
  _id: string;
  subject: string;
  content: string;
  senderId: string;
  senderName: string;
  senderRole: string;
  recipientIds: string[];
  recipientNames: string[];
  createdAt: string;
  isRead: boolean;
  status: 'sent' | 'delivered' | 'read';
  priority: 'low' | 'normal' | 'high';
  relatedTo?: {
    type: 'event' | 'booking' | 'payment' | 'general';
    id: string;
    title: string;
    startTime?: string;
    endTime?: string;
    trainerName?: string;
    clientName?: string;
    location?: string;
    price?: number;
  };
}

interface EventLog {
  _id: string;
  action: 'created' | 'updated' | 'deleted';
  createdBy: string;
  timestamp: string;
  event: {
    _id: string;
    title: string;
    type: string;
    startTime: string;
    endTime: string;
    trainerName: string;
    trainerId: string;
    clientName?: string;
    clientId?: string;
    location?: string;
    price: number;
    status: string;
  };
}

interface MessagingContextType {
  messages: Message[];
  eventLogs: EventLog[];
  sendMessage: (message: Omit<Message, '_id' | 'createdAt' | 'status'>) => Promise<void>;
  markAsRead: (messageId: string) => Promise<void>;
  logEvent: (eventLog: Omit<EventLog, '_id' | 'timestamp'>) => Promise<void>;
  getDebugData: () => {
    events: EventLog[];
    notifications: Message[];
    syncStatus: Record<string, boolean>;
  };
}

const MessagingContext = createContext<MessagingContextType | undefined>(undefined);

export function MessagingProvider({ children }: { children: React.ReactNode }) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [eventLogs, setEventLogs] = useState<EventLog[]>([]);

  // –ò–º–∏—Ç–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    const interval = setInterval(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      eventLogs.forEach(async (eventLog) => {
        const existingNotification = messages.find(msg => 
          msg.relatedTo?.id === eventLog.event._id
        );

        if (!existingNotification && eventLog.action === 'created') {
          await sendAutoNotification(eventLog);
        }
      });
    }, 2000);

    return () => clearInterval(interval);
  }, [eventLogs, messages]);

  const sendMessage = async (messageData: Omit<Message, '_id' | 'createdAt' | 'status'>) => {
    const newMessage: Message = {
      ...messageData,
      _id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date().toISOString(),
      status: 'sent'
    };

    setMessages(prev => [...prev, newMessage]);

    // –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
    setTimeout(() => {
      setMessages(prev => prev.map(msg => 
        msg._id === newMessage._id 
          ? { ...msg, status: 'delivered' }
          : msg
      ));
    }, 1000);

    console.log('üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
      –æ—Ç: newMessage.senderName,
      –∫–æ–º—É: newMessage.recipientNames,
      —Ç–µ–º–∞: newMessage.subject,
      —Å–≤—è–∑–∞–Ω–æ_—Å: newMessage.relatedTo?.type
    });
  };

  const sendAutoNotification = async (eventLog: EventLog) => {
    const event = eventLog.event;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let recipientIds: string[] = [];
    let recipientNames: string[] = [];

    if (event.type === 'personal') {
      // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
      recipientIds = [`trainer_${event.trainerId}`, `client_${event.clientId}`];
      recipientNames = [event.trainerName, event.clientName || '–ö–ª–∏–µ–Ω—Ç'];
    } else {
      // –ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      recipientIds = ['trainer_1', 'trainer_2', 'trainer_3'];
      recipientNames = ['–¢—Ä–µ–Ω–µ—Ä 1', '–¢—Ä–µ–Ω–µ—Ä 2', '–¢—Ä–µ–Ω–µ—Ä 3'];
    }

    // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
    recipientIds.push('manager_1', 'admin_1');
    recipientNames.push('–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');

    const notificationContent = event.type === 'personal' 
      ? `–ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(event.startTime).toLocaleDateString('ru')}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date(event.startTime).toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' })}\n` +
        `üë§ –¢—Ä–µ–Ω–µ—Ä: ${event.trainerName}\n` +
        `üë• –ö–ª–∏–µ–Ω—Ç: ${event.clientName}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.price} ‚ÇΩ\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ.`
      : `–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(event.startTime).toLocaleDateString('ru')}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date(event.startTime).toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' })}\n` +
        `üèãÔ∏è –¢–∏–ø: ${event.title}\n` +
        `üë§ –¢—Ä–µ–Ω–µ—Ä: ${event.trainerName}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.price} ‚ÇΩ\n\n` +
        `–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`;

    await sendMessage({
      subject: `üèãÔ∏è ${event.type === 'personal' ? '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è' : '–ì—Ä—É–ø–ø–æ–≤–∞—è'} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${event.title}`,
      content: notificationContent,
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      senderRole: 'system',
      recipientIds,
      recipientNames,
      isRead: false,
      priority: 'normal',
      relatedTo: {
        type: 'event',
        id: event._id,
        title: event.title,
        startTime: event.startTime,
        endTime: event.endTime,
        trainerName: event.trainerName,
        clientName: event.clientName,
        location: event.location,
        price: event.price
      }
    });
  };

  const markAsRead = async (messageId: string) => {
    setMessages(prev => prev.map(msg => 
      msg._id === messageId 
        ? { ...msg, isRead: true, status: 'read' }
        : msg
    ));

    console.log('üëÅÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ:', messageId);
  };

  const logEvent = async (eventLogData: Omit<EventLog, '_id' | 'timestamp'>) => {
    const newEventLog: EventLog = {
      ...eventLogData,
      _id: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date().toISOString()
    };

    setEventLogs(prev => [...prev, newEventLog]);

    console.log('üìù –°–æ–±—ã—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:', {
      –¥–µ–π—Å—Ç–≤–∏–µ: newEventLog.action,
      —Å–æ–∑–¥–∞–Ω–æ: newEventLog.createdBy,
      —Å–æ–±—ã—Ç–∏–µ: newEventLog.event.title,
      —Ç–∏–ø: newEventLog.event.type
    });
  };

  const getDebugData = () => {
    return {
      events: eventLogs,
      notifications: messages,
      syncStatus: {
        super_admin: true,
        admin: true,
        manager: true,
        trainer: true,
        client: true
      }
    };
  };

  return (
    <MessagingContext.Provider value={{
      messages,
      eventLogs,
      sendMessage,
      markAsRead,
      logEvent,
      getDebugData
    }}>
      {children}
    </MessagingContext.Provider>
  );
}

export function useMessaging() {
  const context = useContext(MessagingContext);
  if (context === undefined) {
    throw new Error('useMessaging must be used within a MessagingProvider');
  }
  return context;
}
