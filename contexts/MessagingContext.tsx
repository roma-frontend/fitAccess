// contexts/MessagingContext.tsx
"use client";

import React, { createContext, useContext, useState, useEffect, useCallback, useRef } from 'react';

interface Message {
  _id: string;
  subject: string;
  content: string;
  senderId: string;
  senderName: string;
  senderRole: string;
  recipientIds: string[];
  recipientNames: string[];
  createdAt: string;
  isRead: boolean;
  status: 'sent' | 'delivered' | 'read';
  priority: 'low' | 'normal' | 'high';
  relatedTo?: {
    type: 'event' | 'booking' | 'payment' | 'general';
    id: string;
    title: string;
    startTime?: string;
    endTime?: string;
    trainerName?: string;
    clientName?: string;
    location?: string;
    price?: number;
  };
}

interface EventLog {
  _id: string;
  action: 'created' | 'updated' | 'deleted';
  createdBy: string;
  timestamp: string;
  event: {
    _id: string;
    title: string;
    type: string;
    startTime: string;
    endTime: string;
    trainerName: string;
    trainerId: string;
    clientName?: string;
    clientId?: string;
    location?: string;
    price: number;
    status: string;
  };
}

interface MessagingContextType {
  messages: Message[];
  eventLogs: EventLog[];
  messageQueue: Message[];
  isProcessingMessages: boolean;
  sendMessage: (message: Omit<Message, '_id' | 'createdAt' | 'status'>) => Promise<void>;
  markAsRead: (messageId: string) => Promise<void>;
  logEvent: (eventLog: Omit<EventLog, '_id' | 'timestamp'>) => Promise<void>;
  getDebugData: () => {
    events: EventLog[];
    notifications: Message[];
    syncStatus: Record<string, boolean>;
  };
}

const MessagingContext = createContext<MessagingContextType | undefined>(undefined);

export function MessagingProvider({ children }: { children: React.ReactNode }) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [eventLogs, setEventLogs] = useState<EventLog[]>([]);
  const [messageQueue, setMessageQueue] = useState<Message[]>([]);
  const [isProcessingMessages, setIsProcessingMessages] = useState(false);
  const processedEventIds = useRef(new Set<string>());

  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const processMessageQueue = useCallback(async () => {
    if (messageQueue.length === 0 || isProcessingMessages) {
      return;
    }

    setIsProcessingMessages(true);
    console.log(`üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageQueue.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

    try {
      const messagesToProcess = [...messageQueue];
      setMessageQueue([]); // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å

      for (const message of messagesToProcess) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.subject}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
        setMessages(prev => [...prev, message]);

        // –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        await new Promise(resolve => setTimeout(resolve, 500));
        
        setMessages(prev => prev.map(msg => 
          msg._id === message._id 
            ? { ...msg, status: 'delivered' }
            : msg
        ));

        console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${message.subject}`);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 200));
      }

      console.log('‚úÖ –í—Å—è –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    } finally {
      setIsProcessingMessages(false);
    }
  }, [messageQueue, isProcessingMessages]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
  let timeoutId: NodeJS.Timeout;
  
  const processQueue = async () => {
    if (messageQueue.length > 0 && !isProcessingMessages) {
      setIsProcessingMessages(true);
      
      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑
        const message = messageQueue[0];
        await sendMessage(message);
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setMessageQueue(prev => prev.slice(1));
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        if (messageQueue.length > 1) {
          timeoutId = setTimeout(() => {
            setIsProcessingMessages(false);
          }, 100);
        } else {
          setIsProcessingMessages(false);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
        setIsProcessingMessages(false);
      }
    }
  };
  
  processQueue();
  
  return () => {
    if (timeoutId) clearTimeout(timeoutId);
  };
}, [messageQueue.length, isProcessingMessages]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
  const processNewEvents = useCallback(async () => {
    const newEvents = eventLogs.filter(eventLog => 
      !processedEventIds.current.has(eventLog.event._id) && 
      eventLog.action === 'created'
    );

    if (newEvents.length === 0) {
      return;
    }

    console.log(`üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${newEvents.length} –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

    for (const eventLog of newEvents) {
      try {
        await sendAutoNotification(eventLog);
        processedEventIds.current.add(eventLog.event._id);
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${eventLog.event.title}`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–±—ã—Ç–∏–π
        await new Promise(resolve => setTimeout(resolve, 300));
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventLog.event.title}:`, error);
      }
    }
  }, [eventLogs]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    const timeoutId = setTimeout(() => {
      processNewEvents();
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π

    return () => clearTimeout(timeoutId);
  }, [eventLogs, processNewEvents]);

  const sendMessage = useCallback(async (messageData: Omit<Message, '_id' | 'createdAt' | 'status'>) => {
    const newMessage: Message = {
      ...messageData,
      _id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date().toISOString(),
      status: 'sent'
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    setMessageQueue(prev => [...prev, newMessage]);

    console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:', {
      –æ—Ç: newMessage.senderName,
      –∫–æ–º—É: newMessage.recipientNames,
      —Ç–µ–º–∞: newMessage.subject,
      —Å–≤—è–∑–∞–Ω–æ_—Å: newMessage.relatedTo?.type
    });
  }, []);

  const sendAutoNotification = useCallback(async (eventLog: EventLog) => {
    const event = eventLog.event;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    let recipientIds: string[] = [];
    let recipientNames: string[] = [];

    if (event.type === 'personal') {
      // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
      recipientIds = [`trainer_${event.trainerId}`, `client_${event.clientId}`];
            recipientNames = [event.trainerName, event.clientName || '–ö–ª–∏–µ–Ω—Ç'];
    } else {
      // –ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤
      recipientIds = ['trainer_1', 'trainer_2', 'trainer_3'];
      recipientNames = ['–¢—Ä–µ–Ω–µ—Ä 1', '–¢—Ä–µ–Ω–µ—Ä 2', '–¢—Ä–µ–Ω–µ—Ä 3'];
    }

    // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
    recipientIds.push('manager_1', 'admin_1');
    recipientNames.push('–ú–µ–Ω–µ–¥–∂–µ—Ä', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');

    const notificationContent = event.type === 'personal' 
      ? `–ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(event.startTime).toLocaleDateString('ru')}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date(event.startTime).toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' })}\n` +
        `üë§ –¢—Ä–µ–Ω–µ—Ä: ${event.trainerName}\n` +
        `üë• –ö–ª–∏–µ–Ω—Ç: ${event.clientName}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.price} ‚ÇΩ\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ.`
      : `–ù–æ–≤–∞—è –≥—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!\n\n` +
        `üìÖ –î–∞—Ç–∞: ${new Date(event.startTime).toLocaleDateString('ru')}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date(event.startTime).toLocaleTimeString('ru', { hour: '2-digit', minute: '2-digit' })}\n` +
        `üèãÔ∏è –¢–∏–ø: ${event.title}\n` +
        `üë§ –¢—Ä–µ–Ω–µ—Ä: ${event.trainerName}\n` +
        `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.price} ‚ÇΩ\n\n` +
        `–ó–∞–ø–∏—Å—å –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`;

    await sendMessage({
      subject: `üèãÔ∏è ${event.type === 'personal' ? '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è' : '–ì—Ä—É–ø–ø–æ–≤–∞—è'} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${event.title}`,
      content: notificationContent,
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      senderRole: 'system',
      recipientIds,
      recipientNames,
      isRead: false,
      priority: 'normal',
      relatedTo: {
        type: 'event',
        id: event._id,
        title: event.title,
        startTime: event.startTime,
        endTime: event.endTime,
        trainerName: event.trainerName,
        clientName: event.clientName,
        location: event.location,
        price: event.price
      }
    });
  }, [sendMessage]);

  const markAsRead = useCallback(async (messageId: string) => {
    setMessages(prev => prev.map(msg => 
      msg._id === messageId 
        ? { ...msg, isRead: true, status: 'read' }
        : msg
    ));

    console.log('üëÅÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ:', messageId);
  }, []);

  const logEvent = useCallback(async (eventLogData: Omit<EventLog, '_id' | 'timestamp'>) => {
    const newEventLog: EventLog = {
      ...eventLogData,
      _id: `event_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date().toISOString()
    };

    setEventLogs(prev => [...prev, newEventLog]);

    console.log('üìù –°–æ–±—ã—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:', {
      –¥–µ–π—Å—Ç–≤–∏–µ: newEventLog.action,
      —Å–æ–∑–¥–∞–Ω–æ: newEventLog.createdBy,
      —Å–æ–±—ã—Ç–∏–µ: newEventLog.event.title,
      —Ç–∏–ø: newEventLog.event.type
    });
  }, []);

  const getDebugData = useCallback(() => {
    return {
      events: eventLogs,
      notifications: messages,
      syncStatus: {
        'super-admin': true,
        admin: true,
        manager: true,
        trainer: true,
        client: true
      }
    };
  }, [eventLogs, messages]);

  return (
    <MessagingContext.Provider value={{
      messages,
      eventLogs,
      messageQueue,
      isProcessingMessages,
      sendMessage,
      markAsRead,
      logEvent,
      getDebugData
    }}>
      {children}
    </MessagingContext.Provider>
  );
}

export function useMessaging() {
  const context = useContext(MessagingContext);
  if (context === undefined) {
    throw new Error('useMessaging must be used within a MessagingProvider');
  }
  return context;
}

