// convex/products.ts (—Å –ª–æ–≥–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
export const getAll = query({
  handler: async (ctx) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

    const products = await ctx.db.query("products")
      .filter((q) => q.eq(q.field("isActive"), true))
      .order("desc")
      .collect();

    console.log("‚úÖ Convex Query: –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", products.length);
    return products;
  },
});

export const getAllIncludingDeleted = query({
  handler: async (ctx) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

    const products = await ctx.db.query("products")
      .order("desc")
      .collect();

    console.log("‚úÖ Convex Query: –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", products.length);
    console.log("üìä Convex Query: –ê–∫—Ç–∏–≤–Ω—ã—Ö:", products.filter(p => p.isActive).length);
    console.log("üìä Convex Query: –£–¥–∞–ª–µ–Ω–Ω—ã—Ö:", products.filter(p => !p.isActive).length);

    return products;
  },
});


export const getById = query({
  args: { id: v.id("products") },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Query: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID:", args.id);

    const product = await ctx.db.get(args.id);

    if (!product) {
      console.log("‚ùå Convex Query: –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:", args.id);
      return null;
    }

    console.log("‚úÖ Convex Query: –ü—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω:", product.name, "isActive:", product.isActive);
    return product;
  },
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
export const getByCategory = query({
  args: { category: v.string() },
  handler: async (ctx, args) => {
    return await ctx.db.query("products")
      .filter((q) => q.and(
        q.eq(q.field("category"), args.category),
        q.eq(q.field("isActive"), true)
      ))
      .collect();
  },
});

export const restore = mutation({
  args: {
    id: v.id("products"),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", args.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    const existingProduct = await ctx.db.get(args.id);
    if (!existingProduct) {
      throw new Error("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    console.log("üì¶ Convex: –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç:", existingProduct.name);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    const result = await ctx.db.patch(args.id, {
      isActive: true,
      updatedAt: Date.now()
    });

    console.log("‚úÖ Convex: –ü—Ä–æ–¥—É–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    return result;
  },
});

export const list = query({
  args: {},
  handler: async (ctx) => {
    console.log("üîÑ Convex: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

    const products = await ctx.db
      .query("products")
      .filter((q) => q.neq(q.field("isActive"), false)) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
      .order("desc")
      .collect();

    console.log("‚úÖ Convex: –ü–æ–ª—É—á–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", products.length);
    return products;
  },
});

export const softDelete = mutation({
  args: {
    id: v.id("products"),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex: –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", args.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    const existingProduct = await ctx.db.get(args.id);
    if (!existingProduct) {
      throw new Error("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    console.log("üì¶ Convex: –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç:", existingProduct.name);

    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
    const result = await ctx.db.patch(args.id, {
      isActive: false,
      updatedAt: Date.now()
    });

    console.log("‚úÖ Convex: –ü—Ä–æ–¥—É–∫—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
    return result;
  },
});

// –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
export const hardDelete = mutation({
  args: {
    id: v.id("products"),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex: –ñ–µ—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", args.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    const existingProduct = await ctx.db.get(args.id);
    if (!existingProduct) {
      throw new Error("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    console.log("üì¶ Convex: –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç:", existingProduct.name);

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã
    await ctx.db.delete(args.id);

    console.log("‚úÖ Convex: –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞");
    return { deleted: true };
  },
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
export const getPopular = query({
  handler: async (ctx) => {
    return await ctx.db.query("products")
      .filter((q) => q.and(
        q.eq(q.field("isPopular"), true),
        q.eq(q.field("isActive"), true)
      ))
      .collect();
  },
});

// –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
export const create = mutation({
  args: {
    name: v.string(),
    description: v.string(),
    category: v.union(
      v.literal("supplements"),
      v.literal("drinks"),
      v.literal("snacks"),
      v.literal("merchandise")
    ),
    price: v.number(),
    imageUrl: v.optional(v.string()), // ‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –µ—Å—Ç—å
    inStock: v.number(),
    minStock: v.optional(v.number()),
    isPopular: v.optional(v.boolean()),
    nutrition: v.optional(v.object({
      calories: v.optional(v.number()),
      protein: v.optional(v.number()),
      carbs: v.optional(v.number()),
      fat: v.optional(v.number()),
      sugar: v.optional(v.number()),
    })),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", args.name);
    console.log("üñºÔ∏è Convex Mutation: imageUrl:", args.imageUrl); // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥

    const productId = await ctx.db.insert("products", {
      ...args, // ‚úÖ –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å imageUrl
      isActive: true,
      isPopular: args.isPopular || false,
      minStock: args.minStock || 10,
      createdAt: Date.now(),
    });

    console.log("‚úÖ Convex Mutation: –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID:", productId);
    return productId;
  },
});

export const getCount = query({
  handler: async (ctx) => {
    console.log("üîÑ Convex Query: –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

    try {
      const allProducts = await ctx.db.query("products").collect();
      
      const activeCount = allProducts.filter(p => p.isActive !== false).length;
      const inactiveCount = allProducts.filter(p => p.isActive === false).length;
      const totalCount = allProducts.length;

      const result = {
        total: totalCount,
        active: activeCount,
        inactive: inactiveCount,
        deleted: inactiveCount // alias for inactive
      };

      console.log("‚úÖ Convex Query: –ü–æ–¥—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:", result);
      return result;
    } catch (error) {
      console.error("‚ùå Convex Query: –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞:", error);
      throw error;
    }
  },
});


export const update = mutation({
  args: {
    id: v.id("products"),
    name: v.optional(v.string()),
    description: v.optional(v.string()),
    category: v.optional(v.union(
      v.literal("supplements"),
      v.literal("drinks"),
      v.literal("snacks"),
      v.literal("merchandise")
    )),
    price: v.optional(v.number()),
    imageUrl: v.optional(v.string()),
    inStock: v.optional(v.number()),
    minStock: v.optional(v.number()),
    isPopular: v.optional(v.boolean()),
    nutrition: v.optional(v.object({
      calories: v.optional(v.number()),
      protein: v.optional(v.number()),
      carbs: v.optional(v.number()),
      fat: v.optional(v.number()),
      sugar: v.optional(v.number()),
    })),
    updatedAt: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", args.id);
    console.log("üñºÔ∏è Convex: –ù–æ–≤—ã–π imageUrl:", args.imageUrl);

    const { id, ...updateData } = args;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    const existingProduct = await ctx.db.get(id);
    if (!existingProduct) {
      throw new Error("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    await ctx.db.patch(id, {
      ...updateData,
      updatedAt: Date.now()
    });

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    const updatedProduct = await ctx.db.get(id);
    console.log("‚úÖ Convex: –ü—Ä–æ–¥—É–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:", updatedProduct);
    
    return updatedProduct;
  },
});

// –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
export const remove = mutation({
  args: { id: v.id("products") },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", args.id);

    const result = await ctx.db.patch(args.id, {
      isActive: false,
      updatedAt: Date.now(),
    });

    console.log("‚úÖ Convex Mutation: –ü—Ä–æ–¥—É–∫—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)");
    return result;
  },
});

// –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const deleteForever = mutation({
  args: { id: v.id("products") },
  handler: async (ctx, args) => {
    console.log("üîÑ Convex Mutation: –§–∏–∑–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", args.id);

    const result = await ctx.db.delete(args.id);

    console.log("‚úÖ Convex Mutation: –ü—Ä–æ–¥—É–∫—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î");
    return result;
  },
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
export const getDeleted = query({
  args: {},
  handler: async (ctx) => {
    console.log("üîÑ Convex: –ü–æ–ª—É—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

    const deletedProducts = await ctx.db
      .query("products")
      .filter((q) => q.eq(q.field("isActive"), false)) // –¢–æ–ª—å–∫–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
      .order("desc")
      .collect();

    console.log("‚úÖ Convex: –ù–∞–π–¥–µ–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", deletedProducts.length);
    return deletedProducts;
  },
});

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
export const getAllForDebug = query({
  handler: async (ctx) => {
    console.log("üîÑ Convex Debug: –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏");

    const allProducts = await ctx.db.query("products").collect();

    console.log("üìä Convex Debug: –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –ë–î:", allProducts.length);
    console.log("üì¶ Convex Debug: –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã:", allProducts);

    return allProducts;
  },
});

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫
export const updateStock = mutation({
  args: {
    id: v.id("products"),
    newStock: v.number()
  },
  handler: async (ctx, args) => {
    return await ctx.db.patch(args.id, {
      inStock: args.newStock,
      updatedAt: Date.now(),
    });
  },
});
