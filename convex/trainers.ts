// convex/trainers.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–∏–ø–∞–º–∏)
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";

// ‚úÖ –¢–ò–ü–´ –î–õ–Ø –†–ê–ë–û–ß–ò–• –ß–ê–°–û–í
interface SimpleWorkingHours {
  start: string;
  end: string;
  days: number[];
}

interface WeeklyWorkingHours {
  sunday?: { start: string; end: string };
  monday?: { start: string; end: string };
  tuesday?: { start: string; end: string };
  wednesday?: { start: string; end: string };
  thursday?: { start: string; end: string };
  friday?: { start: string; end: string };
  saturday?: { start: string; end: string };
}

type WorkingHours = SimpleWorkingHours | WeeklyWorkingHours | null | undefined;

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò –†–ê–ë–û–ß–ò–• –ß–ê–°–û–í –° –¢–ò–ü–ê–ú–ò
function normalizeWorkingHours(workingHours: WorkingHours): SimpleWorkingHours {
  if (!workingHours) {
    return {
      start: '09:00',
      end: '18:00',
      days: [1, 2, 3, 4, 5]
    };
  }
  
  // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–û–°–¢–û–ô –§–û–†–ú–ê–¢
  if ('start' in workingHours && 'end' in workingHours && 'days' in workingHours) {
    return {
      start: workingHours.start,
      end: workingHours.end,
      days: workingHours.days
    };
  }
  
  // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –§–û–†–ú–ê–¢ –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò
  const weeklyHours = workingHours as WeeklyWorkingHours;
  if (weeklyHours.monday || weeklyHours.tuesday || weeklyHours.wednesday || 
      weeklyHours.thursday || weeklyHours.friday || weeklyHours.saturday || 
      weeklyHours.sunday) {
    
    const days: number[] = [];
    const dayNames: (keyof WeeklyWorkingHours)[] = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
    
    for (let i = 0; i < dayNames.length; i++) {
      if (weeklyHours[dayNames[i]]) {
        days.push(i);
      }
    }
    
    let startTime = '09:00';
    let endTime = '18:00';
    
    for (const dayName of dayNames) {
      if (weeklyHours[dayName]) {
        startTime = weeklyHours[dayName]!.start;
        endTime = weeklyHours[dayName]!.end;
        break;
      }
    }
    
    return {
      start: startTime,
      end: endTime,
      days: days.length > 0 ? days : [1, 2, 3, 4, 5]
    };
  }
  
  return {
    start: '09:00',
    end: '18:00',
    days: [1, 2, 3, 4, 5]
  };
}

// ‚úÖ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø API
export const getActiveTrainers = query({
  handler: async (ctx) => {
    console.log('üîç Convex trainers: –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤...');
    
    try {
      const allTrainers = await ctx.db.query("trainers").collect();
      console.log(`üìã Convex trainers: –≤—Å–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –≤ –±–∞–∑–µ: ${allTrainers.length}`);
      
      const activeTrainers = allTrainers.filter(trainer => {
        return trainer.status === 'active' || 
               trainer.isActive === true || 
               (!trainer.status && trainer.isActive !== false);
      });
      
      console.log(`‚úÖ Convex trainers: –Ω–∞–π–¥–µ–Ω–æ ${activeTrainers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤`);
      
      const normalizedTrainers = activeTrainers.map(trainer => {
        try {
          return {
            _id: trainer._id,
            name: trainer.name,
            email: trainer.email,
            role: trainer.role || trainer.specializations?.[0] || '–¢—Ä–µ–Ω–µ—Ä',
            status: trainer.status || (trainer.isActive ? 'active' : 'inactive'),
            workingHours: normalizeWorkingHours(trainer.workingHours),
            specializations: trainer.specializations || [],
            experience: trainer.experience || 0,
            rating: trainer.rating || 0,
            hourlyRate: trainer.hourlyRate || 0,
            createdAt: trainer.createdAt,
            phone: trainer.phone || '',
            bio: trainer.bio || '',
            photoUrl: trainer.photoUrl || trainer.avatar || null
          };
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ ${trainer.name}:`, error);
          return {
            _id: trainer._id,
            name: trainer.name,
            email: trainer.email,
            role: '–¢—Ä–µ–Ω–µ—Ä',
            status: 'active',
            workingHours: {
              start: '09:00',
              end: '18:00',
              days: [1, 2, 3, 4, 5]
            },
            specializations: [],
            experience: 0,
            rating: 0,
            hourlyRate: 0,
            createdAt: trainer.createdAt || Date.now(),
            phone: '',
            bio: '',
            photoUrl: null
          };
        }
      });
      
      return normalizedTrainers;
    } catch (error) {
      console.error('‚ùå Convex trainers: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      return [];
    }
  },
});

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø HEALTH CHECK
export const getAllTrainers = query({
  handler: async (ctx) => {
    console.log('üîç Convex trainers: getAllTrainers –¥–ª—è health check');
    
    try {
      const trainers = await ctx.db.query("trainers").collect();
      console.log('‚úÖ Convex trainers: –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', trainers.length);
      return trainers;
    } catch (error) {
      console.error('‚ùå Convex trainers: –æ—à–∏–±–∫–∞ getAllTrainers:', error);
      return [];
    }
  },
});

// ‚úÖ –ê–õ–ò–ê–° –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
export const getAll = query({
  handler: async (ctx) => {
    console.log('üîç Convex trainers: getAll (–∞–ª–∏–∞—Å –¥–ª—è getAllTrainers)');
    
    // ‚úÖ –ü–†–Ø–ú–û–ô –í–´–ó–û–í –í–ú–ï–°–¢–û ctx.runQuery
    try {
      const trainers = await ctx.db.query("trainers").collect();
      console.log('‚úÖ Convex trainers: –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', trainers.length);
      return trainers;
    } catch (error) {
      console.error('‚ùå Convex trainers: –æ—à–∏–±–∫–∞ getAll:', error);
      return [];
    }
  },
});
// ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ï–ù–ï–†–ê –ü–û ID
export const getById = query({
  args: { id: v.string() },
  handler: async (ctx, args) => {
    console.log('üîç Convex trainers: –∏—â–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ ID:', args.id);
    
    try {
      const trainer = await ctx.db.get(args.id as any);
      if (trainer) {
        console.log('‚úÖ Convex trainers: —Ç—Ä–µ–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω –ø–æ _id');
        return trainer;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Convex trainers: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ _id, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è');
    }
    
    const trainer = await ctx.db.query("trainers")
      .filter((q) => q.or(
        q.eq(q.field("email"), args.id),
        q.eq(q.field("name"), args.id)
      ))
      .first();
    
    console.log('‚úÖ Convex trainers: —Ç—Ä–µ–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', trainer ? '–¥–∞' : '–Ω–µ—Ç');
    return trainer ?? null;
  },
});

// ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –¢–†–ï–ù–ï–†–ê –ü–û SLUG
export const getBySlug = query({
  args: { slug: v.string() },
  handler: async (ctx, args) => {
    console.log('üîç Convex trainers: –∏—â–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ slug:', args.slug);
    
    const allTrainers = await ctx.db.query("trainers").collect();
    
    const slugToNameMap: { [key: string]: string } = {};
    allTrainers.forEach(trainer => {
      const slug = trainer.name
        .toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[–∞-—è]/g, (char) => {
          const map: { [key: string]: string } = {
            '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'e',
            '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
            '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
            '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
            '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
          };
          return map[char] || char;
        });
      slugToNameMap[slug] = trainer.name;
    });
    
    const russianName = slugToNameMap[args.slug];
    
    if (!russianName) {
      console.log('‚ùå Convex trainers: slug –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞–ø–ø–∏–Ω–≥–µ');
      return null;
    }
    
    const trainer = await ctx.db.query("trainers")
      .filter((q) => q.eq(q.field("name"), russianName))
      .first();
    
    if (trainer) {
      console.log('‚úÖ Convex trainers: –Ω–∞–π–¥–µ–Ω —Ç—Ä–µ–Ω–µ—Ä:', trainer.name);
    } else {
      console.log('‚ùå Convex trainers: —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏:', russianName);
    }
    
    return trainer ?? null;
  },
});

// ‚úÖ –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ï–†–ê
export const createTrainer = mutation({
  args: {
    name: v.string(),
    email: v.string(),
    phone: v.string(),
    specializations: v.array(v.string()),
    experience: v.optional(v.number()),
    hourlyRate: v.optional(v.number()),
    bio: v.optional(v.string()),
    workingHours: v.optional(v.object({
      start: v.string(),
      end: v.string(),
      days: v.array(v.number())
    }))
  },
  handler: async (ctx, args) => {
    console.log('‚ûï Convex trainers: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞:', args.name);
    
    try {
            const trainerId = await ctx.db.insert("trainers", {
        name: args.name,
        email: args.email,
        phone: args.phone,
        specializations: args.specializations,
        experience: args.experience || 0,
        hourlyRate: args.hourlyRate || 0,
        bio: args.bio || '',
        workingHours: args.workingHours || {
          start: '09:00',
          end: '18:00',
          days: [1, 2, 3, 4, 5]
        },
        rating: 0,
        totalReviews: 0,
        isActive: true,
        status: 'active',
        createdAt: Date.now()
      });
      
      console.log('‚úÖ Convex trainers: —Ç—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —Å ID:', trainerId);
      return trainerId;
    } catch (error) {
      console.error('‚ùå Convex trainers: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', error);
      throw error;
    }
  },
});

// ‚úÖ –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –î–ê–ù–ù–´–•
export const migrateWorkingHours = mutation({
  handler: async (ctx) => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–æ–≤...');
    
    try {
      const allTrainers = await ctx.db.query("trainers").collect();
      let migratedCount = 0;
      
      for (const trainer of allTrainers) {
        // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –° –¢–ò–ü–ê–ú–ò
        const workingHours = trainer.workingHours as WorkingHours;
        
        if (workingHours && 
            !('days' in workingHours) && 
            (('monday' in workingHours && workingHours.monday) || 
             ('tuesday' in workingHours && workingHours.tuesday))) {
          
          console.log(`üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞: ${trainer.name}`);
          
          const normalizedHours = normalizeWorkingHours(workingHours);
          
          await ctx.db.patch(trainer._id, {
            workingHours: normalizedHours,
            updatedAt: Date.now()
          });
          
          migratedCount++;
          console.log(`‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–Ω–µ—Ä: ${trainer.name}`);
        }
      }
      
      console.log(`üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä–æ–≤: ${migratedCount}`);
      return { migratedCount, total: allTrainers.length };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  },
});

// ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
export const getStats = query({
  handler: async (ctx) => {
    console.log('üìä Convex trainers: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
      const allTrainers = await ctx.db.query("trainers").collect();
      const activeTrainers = allTrainers.filter(t => 
        t.status === 'active' || t.isActive === true
      );
      
      const stats = {
        total: allTrainers.length,
        active: activeTrainers.length,
        inactive: allTrainers.length - activeTrainers.length,
        averageRating: activeTrainers.reduce((sum, t) => sum + (t.rating || 0), 0) / activeTrainers.length || 0,
        specializations: [...new Set(allTrainers.flatMap(t => t.specializations || []))]
      };
      
      console.log('‚úÖ Convex trainers: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå Convex trainers: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        total: 0,
        active: 0,
        inactive: 0,
        averageRating: 0,
        specializations: []
      };
    }
  },
});

