// scripts/seedTrainers.ts (—Å–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É scripts –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
import { ConvexHttpClient } from "convex/browser";

const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL!);

async function seedTrainers() {
  console.log('üå± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –≤ Convex...');
  
  const testTrainers = [
    {
      name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤',
      email: 'alexander.petrov@fitaccess.com',
      role: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä',
      status: 'active',
      workingHours: {
        start: '09:00',
        end: '18:00',
        days: [1, 2, 3, 4, 5]
      }
    },
    {
      name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
      email: 'maria.ivanova@fitaccess.com',
      role: '–§–∏—Ç–Ω–µ—Å-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      status: 'active',
      workingHours: {
        start: '08:00',
        end: '17:00',
                days: [1, 2, 3, 4, 5, 6]
      }
    },
    {
      name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
      email: 'dmitry.kozlov@fitaccess.com',
      role: '–ô–æ–≥–∞-–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      status: 'active',
      workingHours: {
        start: '10:00',
        end: '19:00',
        days: [1, 2, 3, 4, 5, 6, 0]
      }
    },
    {
      name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
      email: 'elena.sidorova@fitaccess.com',
      role: '–ì—Ä—É–ø–ø–æ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä',
      status: 'active',
      workingHours: {
        start: '07:00',
        end: '16:00',
        days: [1, 2, 3, 4, 5, 6]
      }
    },
    {
      name: '–ò–≥–æ—Ä—å –í–æ–ª–∫–æ–≤',
      email: 'igor.volkov@fitaccess.com',
      role: '–¢—Ä–µ–Ω–µ—Ä –ø–æ –±–æ–∫—Å—É',
      status: 'active',
      workingHours: {
        start: '14:00',
        end: '22:00',
        days: [1, 2, 3, 4, 5, 6]
      }
    }
  ];

  try {
    for (const trainer of testTrainers) {
      console.log(`‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞: ${trainer.name}`);
      
      const trainerId = await convex.mutation("trainers:createTrainer", trainer);
      console.log(`‚úÖ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —Å ID: ${trainerId}`);
    }
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–Ω–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–æ–≤:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedTrainers();
}

export default seedTrainers;

