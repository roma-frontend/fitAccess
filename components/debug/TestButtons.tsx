// components/debug/TestButtons.tsx (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useSchedule } from '@/contexts/ScheduleContext';
import { useDashboard } from '@/contexts/DashboardContext';
import { useSuperAdmin } from '@/contexts/SuperAdminContext';
import { useState } from 'react';
import { Plus, Trash2, RefreshCw, Zap, Database } from 'lucide-react';

export default function TestButtons() {
  const schedule = useSchedule();
  const dashboard = useDashboard();
  const superAdmin = useSuperAdmin();
  const [loading, setLoading] = useState<string | null>(null);

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º createEvent –≤–º–µ—Å—Ç–æ addEvent
  const addTestEvent = async () => {
    setLoading('event');
    try {
      await schedule.createEvent({
        title: `–¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–µ ${new Date().toLocaleTimeString()}`,
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',
        type: 'training',
        startTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
        endTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(),
        trainerId: 'trainer1',
        clientId: 'client1',
        location: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ª'
      });
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    } finally {
      setLoading(null);
    }
  };

  const updateEventStatus = async () => {
    setLoading('update');
    try {
      const lastEvent = schedule.events[schedule.events.length - 1];
      if (lastEvent) {
        await schedule.updateEvent(lastEvent._id, { 
          status: 'completed',
          title: `${lastEvent.title} (–û–±–Ω–æ–≤–ª–µ–Ω–æ)`
        });
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    } finally {
      setLoading(null);
    }
  };

  const deleteLastEvent = async () => {
    setLoading('delete');
    try {
      const lastEvent = schedule.events[schedule.events.length - 1];
      if (lastEvent) {
        await schedule.deleteEvent(lastEvent._id);
        console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    } finally {
      setLoading(null);
    }
  };

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º refreshData –≤–º–µ—Å—Ç–æ refreshEvents
  const refreshAllData = async () => {
    setLoading('refresh');
    try {
      await Promise.all([
        schedule.refreshData(),
        dashboard.syncAllData(),
        superAdmin.refreshData?.()
      ]);
      console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
      setLoading(null);
    }
  };

  const simulateDataCorruption = async () => {
    setLoading('corrupt');
    try {
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      await schedule.createEvent({
        title: '–¢–æ–ª—å–∫–æ –≤ Schedule',
        description: '–°–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        type: 'training',
        startTime: new Date().toISOString(),
        endTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
        trainerId: 'trainer1',
        clientId: 'client1',
        location: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ª'
      });
      
      // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ dashboard - —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      console.log('‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏:', error);
    } finally {
      setLoading(null);
    }
  };

  const stressTest = async () => {
    setLoading('stress');
    try {
      console.log('üî• –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞...');
      
      // –î–æ–±–∞–≤–ª—è–µ–º 10 —Å–æ–±—ã—Ç–∏–π –±—ã—Å—Ç—Ä–æ
      const promises = Array.from({ length: 10 }, (_, i) =>
        schedule.createEvent({
          title: `–°—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç ${i + 1}`,
          description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ #${i + 1}`,
          type: 'training',
          startTime: new Date(Date.now() + (i * 60 * 60 * 1000)).toISOString(),
          endTime: new Date(Date.now() + ((i + 1) * 60 * 60 * 1000)).toISOString(),
          trainerId: `trainer${(i % 3) + 1}`,
          clientId: `client${(i % 5) + 1}`,
          location: `–ó–∞–ª ${(i % 3) + 1}`
        })
      );
      
      await Promise.all(promises);
      console.log('‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:', error);
    } finally {
      setLoading(null);
    }
  };

  return (
    <Card className="fixed bottom-20 right-4 w-64 z-30">
      <CardHeader className="pb-3">
        <CardTitle className="text-sm flex items-center gap-2">
          <Database className="h-4 w-4" />
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-2">
        <Button
          onClick={addTestEvent}
          disabled={loading === 'event'}
          size="sm"
          className="w-full flex items-center gap-2"
        >
          {loading === 'event' ? (
            <RefreshCw className="h-3 w-3 animate-spin" />
          ) : (
            <Plus className="h-3 w-3" />
          )}
          –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
        </Button>

        <Button
          onClick={updateEventStatus}
          disabled={loading === 'update' || schedule.events.length === 0}
          size="sm"
          variant="outline"
          className="w-full flex items-center gap-2"
        >
          {loading === 'update' ? (
            <RefreshCw className="h-3 w-3 animate-spin" />
          ) : (
            <RefreshCw className="h-3 w-3" />
          )}
          –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        </Button>

        <Button
          onClick={deleteLastEvent}
          disabled={loading === 'delete' || schedule.events.length === 0}
          size="sm"
          variant="destructive"
          className="w-full flex items-center gap-2"
        >
          {loading === 'delete' ? (
            <RefreshCw className="h-3 w-3 animate-spin" />
          ) : (
            <Trash2 className="h-3 w-3" />
          )}
          –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ
        </Button>

        <div className="border-t pt-2 space-y-2">
          <Button
            onClick={refreshAllData}
            disabled={loading === 'refresh'}
            size="sm"
            variant="secondary"
            className="w-full flex items-center gap-2"
          >
            {loading === 'refresh' ? (
              <RefreshCw className="h-3 w-3 animate-spin" />
            ) : (
              <RefreshCw className="h-3 w-3" />
            )}
            –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ
          </Button>

          <Button
            onClick={simulateDataCorruption}
            disabled={loading === 'corrupt'}
            size="sm"
            variant="outline"
            className="w-full flex items-center gap-2 text-orange-600 border-orange-300"
          >
            {loading === 'corrupt' ? (
              <RefreshCw className="h-3 w-3 animate-spin" />
            ) : (
              <Zap className="h-3 w-3" />
            )}
            –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä.
          </Button>

          <Button
            onClick={stressTest}
            disabled={loading === 'stress'}
            size="sm"
            variant="outline"
            className="w-full flex items-center gap-2 text-red-600 border-red-300"
          >
            {loading === 'stress' ? (
              <RefreshCw className="h-3 w-3 animate-spin" />
            ) : (
              <Zap className="h-3 w-3" />
            )}
            –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
          </Button>
        </div>

        <div className="text-xs text-gray-500 pt-2 border-t">
          –°–æ–±—ã—Ç–∏—è: {schedule.events?.length || 0} | 
          –ó–∞–≥—Ä—É–∑–∫–∞: {schedule.loading ? '–î–∞' : '–ù–µ—Ç'}
        </div>
      </CardContent>
    </Card>
  );
}
