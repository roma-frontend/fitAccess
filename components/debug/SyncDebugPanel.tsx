// components/debug/SyncDebugPanel.tsx
"use client";

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { RefreshCw, Calendar, MessageSquare, Users, Activity } from "lucide-react";

// ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø
interface DebugEvent {
  _id?: string;
  id?: string;
  title?: string;
  status?: string;
  type?: string;
  trainerName?: string;
  clientName?: string;
  startTime?: string;
  createdAt?: string;
  price?: number;
}

interface DebugNotification {
  id?: string;
  subject?: string;
  content?: string;
  senderRole?: string;
  senderName?: string;
  status?: string;
  createdAt?: string;
  recipientNames?: string[];
}

interface SyncStatus {
  role: string;
  synced: boolean;
}

interface DebugData {
  events: DebugEvent[];
  notifications: DebugNotification[];
  syncStatus: SyncStatus[];
}

export function SyncDebugPanel() {
  const [debugData, setDebugData] = useState<DebugData>({
    events: [],
    notifications: [],
    syncStatus: []
  });

  const refreshDebugData = () => {
    if (typeof window !== 'undefined' && window.fitAccessDebug) {
      // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –° –¢–ò–ü–ò–ó–ê–¶–ò–ï–ô
      const schedule = window.fitAccessDebug.schedule;
      const dashboard = window.fitAccessDebug.dashboard;
      
      setDebugData({
        events: (schedule?.events || []) as DebugEvent[],
        notifications: (dashboard?.notifications || []) as DebugNotification[],
        syncStatus: Object.entries({
          schedule: !!schedule,
          dashboard: !!dashboard,
          superAdmin: !!window.fitAccessDebug.superAdmin
        }).map(([key, value]) => ({ role: key, synced: value }))
      });
    }
  };

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º debug –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (typeof window !== 'undefined') {
      if (!window.fitAccessDebug) {
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        window.fitAccessDebug = {
          help: () => console.log('Debug —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'),
          checkSync: () => console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...'),
          sync: async () => console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...'),
          clear: async () => console.log('–û—á–∏—Å—Ç–∫–∞...'),
          test: async () => console.log('–¢–µ—Å—Ç...'),
          stats: () => ({}),
          check: () => console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞...'),
          addEvents: async () => console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π...'),
          updateLastEvent: async () => console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è...'),
          deleteLastEvent: async () => console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è...'),
          clearEvents: async () => console.log('–û—á–∏—Å—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π...'),
          refreshAll: async () => console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...'),
          stressTest: async () => console.log('–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç...'),
          simulateDesync: () => console.log('–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...'),
          getStats: () => ({}),
          forceSyncContexts: async () => console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...'),
          diagnoseSync: () => ({}),
          clearAllEvents: async () => console.log('–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π...')
        };
      }
    }

    refreshDebugData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(refreshDebugData, 2000);
    return () => clearInterval(interval);
  }, []);

  const getRoleColor = (role: string = 'system') => {
    switch (role) {
      case 'super-admin': return 'bg-purple-100 text-purple-800';
      case 'admin': return 'bg-blue-100 text-blue-800';
      case 'manager': return 'bg-green-100 text-green-800';
      case 'trainer': return 'bg-orange-100 text-orange-800';
      case 'client': return 'bg-gray-100 text-gray-800';
      case 'system': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusColor = (status: string = 'sent') => {
    switch (status) {
      case 'sent': return 'bg-green-100 text-green-800';
      case 'delivered': return 'bg-blue-100 text-blue-800';
      case 'read': return 'bg-purple-100 text-purple-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <Activity className="h-6 w-6" />
            –ü–∞–Ω–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          </h2>
          <p className="text-gray-600">–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</p>
        </div>
        <Button onClick={refreshDebugData} variant="outline" className="flex items-center gap-2">
          <RefreshCw className="h-4 w-4" />
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      <Tabs defaultValue="events" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="events" className="flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            –°–æ–±—ã—Ç–∏—è ({debugData.events.length})
          </TabsTrigger>
          <TabsTrigger value="notifications" className="flex items-center gap-2">
            <MessageSquare className="h-4 w-4" />
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({debugData.notifications.length})
          </TabsTrigger>
          <TabsTrigger value="sync" className="flex items-center gap-2">
            <Users className="h-4 w-4" />
            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          </TabsTrigger>
        </TabsList>

        <TabsContent value="events" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π</CardTitle>
            </CardHeader>
            <CardContent>
              {debugData.events.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <Calendar className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                  <p className="text-sm">–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {debugData.events.map((event: DebugEvent, index: number) => (
                    <div key={event._id || event.id || index} className="border rounded-lg p-4 bg-gray-50">
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex items-center gap-3">
                          <Badge className="bg-blue-100 text-blue-800">
                            –°–æ–±—ã—Ç–∏–µ
                          </Badge>
                          <Badge variant="outline">
                            {event.status || 'scheduled'}
                          </Badge>
                        </div>
                        <span className="text-xs text-gray-500">
                          {event.createdAt ? new Date(event.createdAt).toLocaleString('ru') : '–ù–µ–¥–∞–≤–Ω–æ'}
                        </span>
                      </div>
                      
                      <div className="bg-white rounded p-3">
                        <h4 className="font-semibold mb-2">üèãÔ∏è {event.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h4>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="font-medium">ID:</span> {event._id || event.id || 'N/A'}
                          </div>
                          <div>
                            <span className="font-medium">–¢–∏–ø:</span> {event.type || 'training'}
                          </div>
                          <div>
                            <span className="font-medium">–¢—Ä–µ–Ω–µ—Ä:</span> {event.trainerName || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                          </div>
                          <div>
                            <span className="font-medium">–ö–ª–∏–µ–Ω—Ç:</span> {event.clientName || '–ì—Ä—É–ø–ø–æ–≤–æ–µ'}
                          </div>
                          {event.startTime && (
                            <div>
                              <span className="font-medium">–í—Ä–µ–º—è:</span> {new Date(event.startTime).toLocaleString('ru')}
                            </div>
                          )}
                          <div>
                            <span className="font-medium">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span> {event.price || 0} ‚ÇΩ
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="notifications" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</CardTitle>
            </CardHeader>
            <CardContent>
              {debugData.notifications.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <MessageSquare className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {debugData.notifications.map((notification: DebugNotification, index: number) => (
                    <div key={notification.id || index} className="border rounded-lg p-4 bg-gray-50">
                      <div className="flex justify-between items-start mb-3">
                        <div className="flex items-center gap-3">
                          <Badge className={getRoleColor(notification.senderRole)}>
                            {notification.senderName || '–°–∏—Å—Ç–µ–º–∞'}
                          </Badge>
                          <Badge className={getStatusColor(notification.status)}>
                            {notification.status === 'sent' ? 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' :
                             notification.status === 'delivered' ? 'üì• –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' :
                             notification.status === 'read' ? 'üëÅÔ∏è –ü—Ä–æ—á–∏—Ç–∞–Ω–æ' : 'üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'}
                          </Badge>
                        </div>
                        <span className="text-xs text-gray-500">
                          {notification.createdAt ? new Date(notification.createdAt).toLocaleString('ru') : '–ù–µ–¥–∞–≤–Ω–æ'}
                        </span>
                      </div>

                      <div className="bg-white rounded p-3">
                        <h4 className="font-semibold mb-2">{notification.subject || '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'}</h4>
                        <p className="text-sm text-gray-600 mb-3 whitespace-pre-line">
                          {notification.content ? (
                            notification.content.length > 200 
                              ? notification.content.substring(0, 200) + '...'
                              : notification.content
                          ) : '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
                        </p>
                        
                        {notification.recipientNames && notification.recipientNames.length > 0 && (
                          <div className="flex flex-wrap gap-2">
                            <div className="text-xs">
                              <span className="font-medium">–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</span>
                              {notification.recipientNames.map((name: string, i: number) => (
                                <Badge key={i} variant="secondary" className="ml-1 text-xs">
                                  {name}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="sync" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º */}
            {debugData.syncStatus.map((item: SyncStatus, index: number) => (
              <Card key={index}>
                <CardContent className="p-4">
                  <div className="text-center">
                    <div className="mb-2">
                      {item.role === 'schedule' && 'üìÖ'}
                      {item.role === 'dashboard' && 'üìä'}
                      {item.role === 'superAdmin' && 'üëë'}
                    </div>
                    <h3 className="font-semibold capitalize">
                      {item.role === 'schedule' ? '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' :
                       item.role === 'dashboard' ? '–î–∞—à–±–æ—Ä–¥' :
                       item.role === 'superAdmin' ? '–°—É–ø–µ—Ä –ê–¥–º–∏–Ω' : item.role}
                    </h3>
                    <div className="mt-2">
                      <Badge className={item.synced ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800"}>
                        {item.synced ? '‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' : '‚ùå –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ'}
                      </Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* –õ–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
          <Card>
            <CardHeader>
              <CardTitle>–õ–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {debugData.events.length > 0 && (
                  <div className="border-l-4 border-green-500 pl-4 py-2 bg-green-50">
                    <div className="flex items-center gap-2 text-green-800">
                      <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                      <span className="font-medium">–°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã</span>
                    </div>
                    <div className="text-sm text-green-600 mt-1">
                      –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {debugData.events.length}
                    </div>
                  </div>
                )}

                                {debugData.notifications.length > 0 && (
                  <div className="border-l-4 border-blue-500 pl-4 py-2 bg-blue-50">
                    <div className="flex items-center gap-2 text-blue-800">
                      <span className="w-2 h-2 bg-blue-500 rounded-full"></span>
                      <span className="font-medium">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã</span>
                    </div>
                    <div className="text-sm text-blue-600 mt-1">
                      –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {debugData.notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    </div>
                  </div>
                )}

                <div className="border-l-4 border-purple-500 pl-4 py-2 bg-purple-50">
                  <div className="flex items-center gap-2 text-purple-800">
                    <span className="w-2 h-2 bg-purple-500 rounded-full"></span>
                    <span className="font-medium">–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</span>
                  </div>
                  <div className="text-sm text-purple-600 mt-1">
                    –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

