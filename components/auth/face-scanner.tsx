"use client";

import { useState, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";
import { useRouter } from "next/navigation";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";

import { VideoScanner, type FaceDetectionData } from "./face-scanner/video-scanner"; // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø
import { AlternativeOptions } from "./face-scanner/alternative-options";
import { QRCodeModal } from "./face-scanner/qr-code-modal";
import { InfoCards } from "./face-scanner/info-cards";
import { UsageTips } from "./face-scanner/usage-tips";
import { DebugInfo } from "./face-scanner/debug-info";
import { SecurityInfo } from "./face-scanner/security-info";
import { LoadingIndicators } from "./face-scanner/loading-indicators";
import { useQRCode } from "./face-scanner/hooks/use-qr-code";
import type { FaceDescriptor } from "./face-scanner/types";

export function FaceScanner() {
  const { toast } = useToast();
  const router = useRouter();

  const [isClient, setIsClient] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showQR, setShowQR] = useState(false);
  const [currentUrl, setCurrentUrl] = useState("");

  // ‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Convex - –∏—Å–ø–æ–ª—å–∑—É–µ–º ?? –≤–º–µ—Å—Ç–æ ||
  const faceDescriptors = useQuery(api.users.getAllFaceDescriptors) ?? [];

  const isFaceScannerDisabled = process.env.NEXT_PUBLIC_DISABLE_FACE_SCANNER === "true";
  const { qrCodeUrl, mobileSessionId, generateQRCode, copyMobileLink } = useQRCode();

  useEffect(() => {
    setIsClient(true);
    if (typeof window !== "undefined") {
      setCurrentUrl(window.location.origin);
    }
  }, []);

  const handleTestLogin = async () => {
    setIsLoading(true);
    try {
      const testUser = {
        userId: "test-user-" + Date.now(),
        name: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        email: "test@example.com",
        role: "user",
      };

      const response = await fetch("/api/auth/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(testUser),
      });

      if (response.ok) {
        try {
          await fetch("/api/access-log", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              userId: testUser.userId,
              success: true,
              deviceInfo: isClient ? navigator.userAgent : "Server",
            }),
          });
        } catch (logError) {
          console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥:", logError);
        }

        toast({
          title: "–¢–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
          description: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${testUser.name}!`,
        });
        setTimeout(() => router.push("/dashboard"), 1000);
      } else {
        const errorData = await response.json();
        toast({
          variant: "destructive",
          title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
          description: errorData.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥",
        });
      }
    } catch (error) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateQR = async () => {
    if (!isClient) return;
    const result = await generateQRCode(currentUrl);
    if (result) setShowQR(true);
  };

  const handleMobileScanner = () => {
    if (!isClient) return;
    const sessionId = Math.random().toString(36).substr(2, 9);
    const mobileUrl = `${currentUrl}/mobile-scanner/${sessionId}`;
    const newWindow = window.open(mobileUrl, "_blank");
    if (!newWindow) router.push(`/mobile-scanner/${sessionId}`);
  };

  const handleCopyLink = () => {
    copyMobileLink(currentUrl);
  };

  // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - FaceDetectionData –Ω–µ –∏–º–µ–µ—Ç landmarks
  const handleFaceDetected = (faceData: FaceDetectionData) => {
  console.log("‚úÖ –õ–∏—Ü–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", {
    hasDetection: !!faceData.detection,
    hasLandmarks: !!faceData.landmarks,
    hasDescriptor: !!faceData.descriptor,
    descriptorLength: faceData.descriptor?.length,
    boundingBox: faceData.box
  });
  
  toast({
    title: "üéØ –õ–∏—Ü–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ",
    description: `–ü–æ–ª—É—á–µ–Ω—ã: –¥–µ—Ç–µ–∫—Ü–∏—è${faceData.landmarks ? ', landmarks' : ''}${faceData.descriptor ? ', –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä' : ''}`,
  });

    // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ faceDescriptors –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥
    
    // –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    // const matchedUser = findMatchingUser(faceData, faceDescriptors);
    // if (matchedUser) {
    //   handleUserLogin(matchedUser);
    // }
  };

  // ‚úÖ –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
  const handleDisabledFaceDetected = (faceData: FaceDetectionData) => {
    console.log("‚ö†Ô∏è Face Scanner –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:", {
      hasDetection: !!faceData.detection
    });
    
    toast({
      variant: "destructive",
      title: "–°–∫–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω",
      description: "Face Scanner –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
    });
  };

  if (!isClient) {
    return <LoadingIndicators type="initialization" />;
  }

  if (isFaceScannerDisabled) {
    return (
      <div className="space-y-6">
        {/* ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
        <VideoScanner 
          disabled={true}
          onFaceDetected={handleDisabledFaceDetected}
        />
        <AlternativeOptions
          onTestLogin={handleTestLogin}
          onGenerateQR={handleGenerateQR}
          onMobileScanner={handleMobileScanner}
          isLoading={isLoading}
        />
        {showQR && (
          <QRCodeModal
            qrCodeUrl={qrCodeUrl}
            sessionId={mobileSessionId}
            onCopyLink={handleCopyLink}
            onClose={() => setShowQR(false)}
          />
        )}
        <InfoCards faceDescriptors={faceDescriptors} />
        <UsageTips />
        <SecurityInfo />
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
      <VideoScanner 
        onFaceDetected={handleFaceDetected}
      />
      <AlternativeOptions
        onTestLogin={handleTestLogin}
        onGenerateQR={handleGenerateQR}
        onMobileScanner={handleMobileScanner}
        isLoading={isLoading}
      />
      {showQR && (
        <QRCodeModal
          qrCodeUrl={qrCodeUrl}
          sessionId={mobileSessionId}
          onCopyLink={handleCopyLink}
          onClose={() => setShowQR(false)}
        />
      )}
      <InfoCards faceDescriptors={faceDescriptors} />
      <UsageTips />
      {process.env.NODE_ENV === "development" && (
        <DebugInfo
          isClient={isClient}
          faceapi={null}
          modelsLoaded={false}
          isScanning={false}
          isFaceScannerDisabled={isFaceScannerDisabled}
          showQR={showQR}
          isLoading={isLoading}
          faceDescriptorsCount={faceDescriptors.length}
          mobileSessionId={mobileSessionId}
          currentUrl={currentUrl}
        />
      )}
      <SecurityInfo />
    </div>
  );
}
