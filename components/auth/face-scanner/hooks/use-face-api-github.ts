// components/auth/face-scanner/hooks/use-face-api-github.ts
"use client";

import { useState, useRef } from "react";

export function useFaceAPIGitHub() {
  const [faceapi, setFaceapi] = useState<any>(null);
  const [modelsLoaded, setModelsLoaded] = useState(false);
  const [isLoadingModels, setIsLoadingModels] = useState(false);
  const [modelSource, setModelSource] = useState<string>("");
  const [error, setError] = useState<string>("");
  const loadingRef = useRef(false);

  const loadFaceAPI = async () => {
    if (loadingRef.current || (faceapi && modelsLoaded)) return;
    
    try {
      loadingRef.current = true;
      setIsLoadingModels(true);
      setError("");
      
      console.log('ü§ñ –ó–∞–≥—Ä—É–∂–∞–µ–º Face API...');
      
      // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
      const faceApiModule = await import('@vladmandic/face-api');
      setFaceapi(faceApiModule);
      console.log('üì¶ Face API –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
      
      // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub Raw (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫)
      const githubUrl = 'https://raw.githubusercontent.com/justadudewhohacks/face-api.js/a86f011d72124e5fb93e59d5c4ab98f699dd5c9c/weights';
      
      console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ GitHub Raw...');
      console.log('URL:', githubUrl);
      
      // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      await faceApiModule.nets.tinyFaceDetector.loadFromUri(githubUrl);
      console.log('‚úÖ tiny_face_detector —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ GitHub Raw');
      
      setModelSource('GitHub Raw');
      setModelsLoaded(true);
      console.log('‚úÖ Face API –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Face API –∏–∑ GitHub Raw:', {
        error,
        message: (error as Error).message,
        stack: (error as Error).stack
      });
      
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${(error as Error).message}`);
      setFaceapi(null);
      setModelsLoaded(false);
      setModelSource("");
      throw error;
    } finally {
      setIsLoadingModels(false);
      loadingRef.current = false;
    }
  };

  return {
    faceapi,
    modelsLoaded,
    isLoadingModels,
    modelSource,
    error,
    loadFaceAPI
  };
}
