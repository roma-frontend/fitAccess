// components/auth/face-scanner/hooks/use-qr-code.ts
"use client";

import { useState, useCallback } from "react";
import { useToast } from "@/hooks/use-toast";
import QRCode from "qrcode";
import type { UseQRCodeReturn } from "../types";

export function useQRCode(): UseQRCodeReturn {
  const [qrCodeUrl, setQrCodeUrl] = useState("");
  const [mobileSessionId, setMobileSessionId] = useState("");
  const { toast } = useToast();

  const generateQRCode = useCallback(async (baseUrl: string) => {
    try {
      const sessionId = Math.random().toString(36).substr(2, 9);
      setMobileSessionId(sessionId);

      const mobileUrl = `${baseUrl}/mobile-scanner/${sessionId}`;
      console.log("üîó –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –¥–ª—è URL:", mobileUrl);

      const qrDataUrl = await QRCode.toDataURL(mobileUrl, {
        width: 256,
        margin: 2,
        color: {
          dark: "#000000",
          light: "#FFFFFF",
        },
      });

      setQrCodeUrl(qrDataUrl);

      toast({
        title: "QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
        description: "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
      });

      return { qrDataUrl, sessionId };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥",
      });
      return null;
    }
  }, [toast]);

  const copyMobileLink = useCallback(async (baseUrl: string) => {
    if (!mobileSessionId) return;

    try {
      const mobileUrl = `${baseUrl}/mobile-scanner/${mobileSessionId}`;
      await navigator.clipboard.writeText(mobileUrl);
      toast({
        title: "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞",
        description: "–°—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π —Å–∫–∞–Ω–µ—Ä —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É",
      });
    }
  }, [mobileSessionId, toast]);

  return {
    qrCodeUrl,
    mobileSessionId,
    generateQRCode,
    copyMobileLink
  };
}
