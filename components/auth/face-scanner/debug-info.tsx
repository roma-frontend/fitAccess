// components/auth/face-scanner/debug-info.tsx
"use client";

import { memo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface DebugInfoProps {
  isClient: boolean;
  faceapi: any;
  modelsLoaded: boolean;
  isScanning: boolean;
  isFaceScannerDisabled: boolean;
  showQR: boolean;
  isLoading: boolean;
  faceDescriptorsCount: number;
  mobileSessionId: string;
  currentUrl: string;
}

export const DebugInfo = memo(function DebugInfo({
  isClient,
  faceapi,
  modelsLoaded,
  isScanning,
  isFaceScannerDisabled,
  showQR,
  isLoading,
  faceDescriptorsCount,
  mobileSessionId,
  currentUrl
}: DebugInfoProps) {
  return (
    <Card className="bg-gray-50 border-gray-200">
      <CardHeader className="pb-3">
        <CardTitle className="text-lg text-gray-900 flex items-center space-x-2">
          <span>üîß</span>
          <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</span>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
          <SystemStatus 
            isClient={isClient}
            faceapi={faceapi}
            modelsLoaded={modelsLoaded}
            isScanning={isScanning}
          />
          <Settings 
            isFaceScannerDisabled={isFaceScannerDisabled}
            showQR={showQR}
            isLoading={isLoading}
          />
          <DataInfo 
            faceDescriptorsCount={faceDescriptorsCount}
            mobileSessionId={mobileSessionId}
            currentUrl={currentUrl}
          />
        </div>
        <TechnicalInfo />
      </CardContent>
    </Card>
  );
});

const SystemStatus = memo(function SystemStatus({ isClient, faceapi, modelsLoaded, isScanning }: any) {
  return (
    <div className="space-y-2">
      <h6 className="font-medium text-gray-700">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</h6>
      <div className="space-y-1 text-xs">
        <StatusItem label="–ö–ª–∏–µ–Ω—Ç" status={isClient} />
        <StatusItem label="Face-API" status={!!faceapi} />
        <StatusItem label="–ú–æ–¥–µ–ª–∏" status={modelsLoaded} />
        <StatusItem label="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" status={isScanning} />
      </div>
    </div>
  );
});

const Settings = memo(function Settings({ isFaceScannerDisabled, showQR, isLoading }: any) {
  return (
    <div className="space-y-2">
      <h6 className="font-medium text-gray-700">–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</h6>
      <div className="space-y-1 text-xs">
        <StatusItem label="–û—Ç–∫–ª—é—á–µ–Ω" status={isFaceScannerDisabled} />
        <StatusItem label="QR –ø–æ–∫–∞–∑–∞–Ω" status={showQR} />
        <StatusItem label="–ó–∞–≥—Ä—É–∑–∫–∞" status={isLoading} />
      </div>
    </div>
  );
});

const DataInfo = memo(function DataInfo({ faceDescriptorsCount, mobileSessionId, currentUrl }: any) {
  return (
    <div className="space-y-2">
      <h6 className="font-medium text-gray-700">–î–∞–Ω–Ω—ã–µ:</h6>
      <div className="space-y-1 text-xs">
        <div>
          <span>–õ–∏—Ü–∞: </span>
          <span className="font-mono">{faceDescriptorsCount}</span>
        </div>
        <div>
          <span>–°–µ—Å—Å–∏—è: </span>
          <span className="font-mono text-xs">
            {mobileSessionId || "–Ω–µ —Å–æ–∑–¥–∞–Ω–∞"}
          </span>
        </div>
        <div>
          <span>URL: </span>
          <span className="font-mono text-xs truncate">
            {currentUrl}
          </span>
        </div>
      </div>
    </div>
  );
});

const StatusItem = memo(function StatusItem({ label, status }: { label: string; status: boolean }) {
  return (
    <div className="flex justify-between">
      <span>{label}:</span>
      <span className={status ? "text-green-600" : "text-red-600"}>
        {status ? "‚úÖ" : "‚ùå"}
      </span>
    </div>
  );
});

const TechnicalInfo = memo(function TechnicalInfo() {
  const isClient = typeof window !== 'undefined';
  
  return (
    <div className="mt-4 pt-4 border-t border-gray-200">
      <h6 className="font-medium text-gray-700 mb-2">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h6>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-xs">
        <div>
          <p><strong>User Agent:</strong></p>
          <p className="font-mono text-xs text-gray-600 break-all">
                        {isClient ? navigator.userAgent.substring(0, 100) + "..." : "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"}
          </p>
        </div>
        <div>
          <p><strong>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–º–µ—Ä—ã:</strong></p>
          <p className="text-gray-600">
            {isClient && navigator.mediaDevices ? "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}
          </p>
          <p><strong>WebRTC:</strong></p>
          <p className="text-gray-600">
            {typeof RTCPeerConnection !== 'undefined' ? "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è" : "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}
          </p>
        </div>
      </div>
    </div>
  );
});

