// components/profile/FaceIDSetup.tsx
"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { VideoScanner } from "@/components/auth/face-scanner/video-scanner";
import { Scan, CheckCircle, AlertCircle, Shield, Trash2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useAuth, useApiRequest } from "@/hooks/useAuth";
import type { FaceDetectionData } from "@/components/auth/face-scanner/video-scanner";

interface FaceIdStatus {
  isEnabled: boolean;
  lastUsed?: string;
  dateRegistered?: string;
  deviceCount?: number;
}

export function FaceIDSetup() {
  const [faceData, setFaceData] = useState<FaceDetectionData | null>(null);
  const [isRegistering, setIsRegistering] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [faceIdStatus, setFaceIdStatus] = useState<FaceIdStatus>({
    isEnabled: false,
  });
  
  const { toast } = useToast();
  const { user } = useAuth();
  const { get, post } = useApiRequest();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Face ID –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (user) {
      checkFaceIdStatus();
    }
  }, [user]);

  const checkFaceIdStatus = async () => {
    try {
      setIsLoading(true);
      const data = await get("/api/face-id/status");
      
      if (data.success) {
        setFaceIdStatus({
          isEnabled: data.isEnabled || false,
          lastUsed: data.lastUsed,
          dateRegistered: data.dateRegistered,
          deviceCount: data.deviceCount || 0,
        });
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Face ID:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFaceDetected = (faceDetectionData: FaceDetectionData) => {
    setFaceData(faceDetectionData);
    toast({
      title: "‚úÖ –õ–∏—Ü–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
      description: "–ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID",
    });
  };

  const handleRegisterFaceID = async () => {
    if (!faceData?.descriptor) {
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–°–Ω–∞—á–∞–ª–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –ª–∏—Ü–æ",
      });
      return;
    }

    setIsRegistering(true);
    
    try {
      const data = await post("/api/face-id/register", {
        faceDescriptor: faceData.descriptor,
        deviceInfo: {
          userAgent: navigator.userAgent,
          timestamp: new Date().toISOString(),
        }
      });
      
      if (data.success) {
        setFaceIdStatus({
          isEnabled: true,
          dateRegistered: data.dateRegistered,
          deviceCount: data.deviceCount || 1,
        });
        
        toast({
          title: "‚úÖ Face ID –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
          description: "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞",
        });
        
        setFaceData(null); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      } else {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }
      
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Face ID:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
      });
    } finally {
      setIsRegistering(false);
    }
  };

  const handleRemoveFaceID = async () => {
    try {
      const data = await post("/api/face-id/disable", {});
      
      if (data.success) {
        setFaceIdStatus({
          isEnabled: false,
          lastUsed: undefined,
          dateRegistered: undefined,
          deviceCount: 0,
        });
        
        setFaceData(null);
        
        toast({
          title: "üóëÔ∏è Face ID —É–¥–∞–ª–µ–Ω",
          description: "–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
        });
      } else {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Face ID:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å Face ID",
      });
    }
  };

  if (isLoading) {
    return (
      <Card>
        <CardContent className="p-6 text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Face ID...</p>
        </CardContent>
      </Card>
    );
  }

  if (faceIdStatus.isEnabled) {
    return (
      <Card className="bg-green-50 border-green-200">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-green-800">
            <CheckCircle className="h-5 w-5" />
            <span>Face ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>
          </CardTitle>
          <CardDescription className="text-green-600">
            –í—ã –º–æ–∂–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-3 p-3 bg-green-100 rounded-lg">
            <Shield className="h-5 w-5 text-green-600" />
            <div>
              <p className="font-medium text-green-800">Face ID –∞–∫—Ç–∏–≤–µ–Ω</p>
              <p className="text-sm text-green-600">–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</p>
            </div>
          </div>
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-2 text-sm text-green-700">
            {faceIdStatus.dateRegistered && (
              <div className="flex justify-between">
                <span>–ù–∞—Å—Ç—Ä–æ–µ–Ω:</span>
                <span className="font-medium">
                  {new Date(faceIdStatus.dateRegistered).toLocaleDateString('ru-RU')}
                </span>
              </div>
            )}
            {faceIdStatus.lastUsed && (
              <div className="flex justify-between">
                <span>–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</span>
                <span className="font-medium">
                  {new Date(faceIdStatus.lastUsed).toLocaleDateString('ru-RU')}
                </span>
              </div>
            )}
            {faceIdStatus.deviceCount !== undefined && faceIdStatus.deviceCount > 0 && (
              <div className="flex justify-between">
                <span>–£—Å—Ç—Ä–æ–π—Å—Ç–≤:</span>
                <span className="font-medium">{faceIdStatus.deviceCount}</span>
              </div>
            )}
          </div>
          
          <div className="flex space-x-3">
            <Button
              onClick={() => window.open('/auth/face-auth?mode=test', '_blank')}
              className="bg-green-600 hover:bg-green-700"
            >
              –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥
            </Button>
            <Button
              onClick={handleRemoveFaceID}
              variant="outline"
              className="border-red-300 text-red-600 hover:bg-red-50"
            >
              <Trash2 className="h-4 w-4 mr-2" />
              –£–¥–∞–ª–∏—Ç—å Face ID
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center space-x-2">
          <Scan className="h-5 w-5" />
          <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Face ID</span>
        </CardTitle>
        <CardDescription>
          –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ö–æ–¥ –ø–æ –ª–∏—Ü—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        
        {/* Status */}
        <div className={`flex items-center space-x-3 p-4 rounded-lg ${
          faceData 
            ? 'bg-green-50 text-green-800' 
            : 'bg-blue-50 text-blue-800'
        }`}>
          {faceData ? (
            <CheckCircle className="h-5 w-5 text-green-600" />
          ) : (
            <AlertCircle className="h-5 w-5 text-blue-600" />
          )}
          <div>
            <p className="font-medium">
              {faceData ? '–õ–∏—Ü–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ' : '–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –ª–∏—Ü–æ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
            </p>
            {faceData && (
              <p className="text-sm opacity-75">
                –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
              </p>
            )}
          </div>
        </div>

        {/* Scanner */}
        <div>
          <VideoScanner 
            onFaceDetected={handleFaceDetected}
            className="w-full max-w-md mx-auto"
          />
        </div>

        {/* Action Button */}
        <Button 
          onClick={handleRegisterFaceID}
          disabled={!faceData?.descriptor || isRegistering}
          className="w-full"
          size="lg"
        >
          {isRegistering ? (
            <div className="flex items-center space-x-2">
              <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Face ID...</span>
            </div>
          ) : (
            <div className="flex items-center space-x-2">
              <Scan className="h-5 w-5" />
              <span>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Face ID</span>
            </div>
          )}
        </Button>

        {/* Instructions */}
        <div className="p-4 bg-gray-50 rounded-lg">
          <h4 className="font-medium text-gray-900 mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h4>
          <ul className="text-sm text-gray-600 space-y-1">
            <li>‚Ä¢ –ü–æ–º–µ—Å—Ç–∏—Ç–µ –ª–∏—Ü–æ –≤ —Ü–µ–Ω—Ç—Ä –∫–∞–¥—Ä–∞</li>
            <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏</li>
            <li>‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–µ–ª–µ–Ω–æ–π —Ä–∞–º–∫–∏</li>
            <li>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Face ID"</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}
