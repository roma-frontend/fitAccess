// components/admin/products/ProductForm.tsx (–∑–∞–º–µ–Ω–∏—Ç–µ –∏–º–ø–æ—Ä—Ç toast)
"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from "@/components/ui/select";
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Package, DollarSign, Hash, Star, Utensils, Loader2 } from "lucide-react";
import { Product, ProductFormData } from "./types";
import { useToast } from "@/hooks/use-toast"; // –ó–∞–º–µ–Ω–∏–ª–∏ –∏–º–ø–æ—Ä—Ç

interface ProductFormProps {
  product?: Product | null;
  isOpen?: boolean;
  onClose?: () => void;
  onSubmit: (data: ProductFormData) => Promise<void>;
  onCancel?: () => void;
  isLoading?: boolean;
}

export function ProductForm({ 
  product = null, 
  isOpen, 
  onClose, 
  onSubmit, 
  onCancel, 
  isLoading = false 
}: ProductFormProps) {
  const { toast } = useToast(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º useToast
  
  const [formData, setFormData] = useState<ProductFormData>({
    name: '',
    description: '',
    category: 'supplements',
    price: 0,
    inStock: 0,
    isPopular: false,
    nutrition: {
      calories: 0,
      protein: 0,
      carbs: 0,
      fat: 0,
      sugar: 0
    }
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –º–æ–¥–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
  const isModal = isOpen !== undefined;
  const handleClose = onClose || onCancel || (() => {});

  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name,
        description: product.description,
        category: product.category,
        price: product.price,
        inStock: product.inStock,
        isPopular: product.isPopular || false,
        nutrition: {
          calories: product.nutrition?.calories || 0,
          protein: product.nutrition?.protein || 0,
          carbs: product.nutrition?.carbs || 0,
          fat: product.nutrition?.fat || 0,
          sugar: product.nutrition?.sugar || 0
        }
      });
    } else {
      setFormData({
        name: '',
        description: '',
        category: 'supplements',
        price: 0,
        inStock: 0,
        isPopular: false,
        nutrition: {
          calories: 0,
          protein: 0,
          carbs: 0,
          fat: 0,
          sugar: 0
        }
      });
    }
  }, [product]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    if (!formData.name.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    if (!formData.description.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    if (formData.price <= 0) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
        variant: "destructive",
      });
      return;
    }

    if (formData.inStock < 0) {
      toast({
        title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
        description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º",
        variant: "destructive",
      });
      return;
    }

    try {
      await onSubmit(formData);
      // –£—Å–ø–µ—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    } catch (error) {
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã",
        description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        variant: "destructive",
      });
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:", error);
    }
  };

  const categories = [
    { value: 'supplements', label: '–î–æ–±–∞–≤–∫–∏' },
    { value: 'drinks', label: '–ù–∞–ø–∏—Ç–∫–∏' },
    { value: 'snacks', label: '–°–Ω–µ–∫–∏' },
    { value: 'merchandise', label: '–ú–µ—Ä—á' }
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const fillTestData = () => {
    const testData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—ã',
      category: 'supplements' as const,
      price: 1500,
      inStock: 50,
      isPopular: true,
      nutrition: {
        calories: 120,
        protein: 25,
        carbs: 5,
        fat: 2,
        sugar: 1
      }
    };
    setFormData(testData);
    toast({
      title: "–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏",
      description: "–ú–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å",
      variant: "default",
    });
  };

  const FormContent = (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏) */}
      {process.env.NODE_ENV === 'development' && !product && (
        <div className="bg-blue-50 p-3 rounded-lg">
          <Button 
            type="button" 
            variant="outline" 
            size="sm"
            onClick={fillTestData}
            disabled={isLoading}
          >
            üß™ –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          </Button>
        </div>
      )}

      {/* Basic Info */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="name" className="flex items-center gap-2">
              <Package className="h-4 w-4" />
              –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *
            </Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData({...formData, name: e.target.value})}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
              required
              disabled={isLoading}
              className={!formData.name.trim() ? "border-red-200" : ""}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="category" className="flex items-center gap-2">
              <Hash className="h-4 w-4" />
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
            </Label>
            <Select 
              value={formData.category} 
              onValueChange={(value: Product['category']) => setFormData({...formData, category: value})}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem key={category.value} value={category.value}>
                    {category.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ *</Label>
          <Textarea
            id="description"
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"
            rows={3}
            required
            disabled={isLoading}
            className={!formData.description.trim() ? "border-red-200" : ""}
          />
        </div>
      </div>

      {/* Price and Stock */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium text-gray-900">–¶–µ–Ω–∞ –∏ –æ—Å—Ç–∞—Ç–∫–∏</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="price" className="flex items-center gap-2">
              <DollarSign className="h-4 w-4" />
              –¶–µ–Ω–∞ (‚ÇΩ) *
            </Label>
            <Input
              id="price"
              type="number"
              min="0"
              step="0.01"
              value={formData.price}
              onChange={(e) => setFormData({...formData, price: parseFloat(e.target.value) || 0})}
              placeholder="0.00"
              required
              disabled={isLoading}
              className={formData.price <= 0 ? "border-red-200" : ""}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="stock" className="flex items-center gap-2">
              <Package className="h-4 w-4" />
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
            </Label>
            <Input
              id="stock"
              type="number"
              min="0"
              value={formData.inStock}
              onChange={(e) => setFormData({...formData, inStock: parseInt(e.target.value) || 0})}
              placeholder="0"
              disabled={isLoading}
            />
          </div>
        </div>

        <div className="flex items-center justify-between p-4 bg-yellow-50 rounded-lg">
          <div className="flex items-center gap-2">
            <Star className="h-4 w-4 text-yellow-600" />
            <Label htmlFor="popular" className="text-sm font-medium">
              –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
            </Label>
          </div>
          <Switch
            id="popular"
            checked={formData.isPopular}
            onCheckedChange={(checked) => setFormData({...formData, isPopular: checked})}
            disabled={isLoading}
          />
        </div>
      </div>

      {/* Nutrition Info */}
      <div className="space-y-4">
        <div className="flex items-center gap-2">
          <Utensils className="h-5 w-5" />
          <h3 className="text-lg font-medium text-gray-900">–ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å</h3>
          <span className="text-sm text-gray-500">(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</span>
        </div>
        
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label htmlFor="calories">–ö–∞–ª–æ—Ä–∏–∏</Label>
            <Input
              id="calories"
              type="number"
              min="0"
              value={formData.nutrition.calories}
              onChange={(e) => setFormData({
                ...formData, 
                nutrition: {...formData.nutrition, calories: parseInt(e.target.value) || 0}
              })}
              placeholder="0"
              disabled={isLoading}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="protein">–ë–µ–ª–∫–∏ (–≥)</Label>
            <Input
              id="protein"
              type="number"
              min="0"
              step="0.1"
              value={formData.nutrition.protein}
              onChange={(e) => setFormData({
                ...formData, 
                nutrition: {...formData.nutrition, protein: parseFloat(e.target.value) || 0}
              })}
              placeholder="0"
              disabled={isLoading}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="carbs">–£–≥–ª–µ–≤–æ–¥—ã (–≥)</Label>
            <Input
              id="carbs"
              type="number"
              min="0"
              step="0.1"
              value={formData.nutrition.carbs}
              onChange={(e) => setFormData({
                ...formData, 
                nutrition: {...formData.nutrition, carbs: parseFloat(e.target.value) || 0}
              })}
              placeholder="0"
              disabled={isLoading}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="fat">–ñ–∏—Ä—ã (–≥)</Label>
            <Input
              id="fat"
              type="number"
              min="0"
              step="0.1"
              value={formData.nutrition.fat}
              onChange={(e) => setFormData({
                ...formData, 
                nutrition: {...formData.nutrition, fat: parseFloat(e.target.value) || 0}
              })}
              placeholder="0"
              disabled={isLoading}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="sugar">–°–∞—Ö–∞—Ä (–≥)</Label>
            <Input
              id="sugar"
              type="number"
              min="0"
              step="0.1"
              value={formData.nutrition.sugar}
              onChange={(e) => setFormData({
                ...formData, 
                nutrition: {...formData.nutrition, sugar: parseFloat(e.target.value) || 0}
              })}
              placeholder="0"
              disabled={isLoading}
            />
          </div>
        </div>
      </div>

      {/* Actions */}
      <div className="flex space-x-3 pt-4 border-t">
        <Button 
          type="submit" 
          disabled={isLoading}
          className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
          >
            {isLoading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
            {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (product ? '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç')}
          </Button>
          <Button 
            type="button"
            variant="outline" 
            onClick={handleClose}
            disabled={isLoading}
            className="flex-1"
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
        </div>
      </form>
    );
  
    // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ Dialog
    if (isModal) {
      return (
        <Dialog open={isOpen} onOpenChange={handleClose}>
          <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <Package className="h-5 w-5" />
                {product ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç'}
              </DialogTitle>
            </DialogHeader>
            {FormContent}
          </DialogContent>
        </Dialog>
      );
    }
  
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–æ–¥–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º—É
    return (
      <div className="bg-white p-6 rounded-lg shadow-lg">
        <div className="mb-6">
          <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
            <Package className="h-6 w-6" />
            {product ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç' : '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç'}
          </h2>
        </div>
        {FormContent}
      </div>
    );
  }
  
