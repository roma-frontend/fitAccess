// components/admin/CreateEventModal.tsx
"use client";

import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar, Clock, Users, MapPin, DollarSign } from "lucide-react";
import { useMessaging } from '@/contexts/MessagingContext';

interface CreateEventModalProps {
  isOpen: boolean;
  onClose: () => void;
  onEventCreated: (event: any) => void;
}

export function CreateEventModal({ isOpen, onClose, onEventCreated }: CreateEventModalProps) {
  const { sendMessage } = useMessaging();
  const [loading, setLoading] = useState(false);
  const [eventData, setEventData] = useState({
    title: '',
    description: '',
    type: 'training',
    startTime: '',
    endTime: '',
    trainerId: '',
    trainerName: '',
    clientId: '',
    clientName: '',
    location: '',
    price: 0,
    duration: 60,
    status: 'scheduled'
  });

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const trainers = [
    { id: 'trainer_1', name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞', specialization: '–§–∏—Ç–Ω–µ—Å' },
    { id: 'trainer_2', name: '–ú–∏—Ö–∞–∏–ª –í–æ–ª–∫–æ–≤', specialization: '–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' },
    { id: 'trainer_3', name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞', specialization: '–ô–æ–≥–∞' }
  ];

  const clients = [
    { id: 'client_1', name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', membership: 'Premium' },
    { id: 'client_2', name: '–ú–∞—Ä–∏—è –°–º–∏—Ä–Ω–æ–≤–∞', membership: 'Standard' },
    { id: 'client_3', name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', membership: 'Basic' }
  ];

  const handleCreateEvent = async () => {
    if (!eventData.title || !eventData.startTime || !eventData.trainerId) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    setLoading(true);
    try {
      // 1. –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
      const newEvent = {
        _id: `event_${Date.now()}`,
        ...eventData,
        createdBy: 'super-admin',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      console.log('üéØ –°–£–ü–ï–† –ê–î–ú–ò–ù: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è', newEvent);

      // 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è)
      await new Promise(resolve => setTimeout(resolve, 500));

      // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–æ—Ä–æ–Ω–∞–º
      await sendEventNotifications(newEvent);

      // 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
      onEventCreated(newEvent);
      
      // 5. –õ–æ–≥–∏—Ä—É–µ–º –≤ debug —Å–∏—Å—Ç–µ–º—É
      if (typeof window !== 'undefined' && window.fitAccessDebug) {
        window.fitAccessDebug.events = window.fitAccessDebug.events || [];
        window.fitAccessDebug.events.push({
          action: 'created',
          event: newEvent,
          timestamp: new Date().toISOString(),
          createdBy: 'super-admin'
        });
      }

      alert('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.');
      onClose();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è');
    } finally {
      setLoading(false);
    }
  };

  const sendEventNotifications = async (event: any) => {
    const notifications = [];

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
    const trainerNotification = {
      type: 'notification' as const,
      subject: 'üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏',
      content: `–î–ª—è –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: "${event.title}"\n\n` +
               `üìÖ –î–∞—Ç–∞: ${new Date(event.startTime).toLocaleDateString('ru')}\n` +
               `‚è∞ –í—Ä–µ–º—è: ${new Date(event.startTime).toLocaleTimeString('ru')} - ${new Date(event.endTime).toLocaleTimeString('ru')}\n` +
               `üë§ –ö–ª–∏–µ–Ω—Ç: ${event.clientName || '–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n` +
               `üìç –ú–µ—Å—Ç–æ: ${event.location || '–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª'}\n\n` +
               `–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∑–∞—Ä–∞–Ω–µ–µ!`,
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞ FitAccess',
      senderRole: 'system' as const,
      recipientIds: [event.trainerId],
      recipientNames: [event.trainerName],
      priority: 'high' as const,
      relatedTo: {
        type: 'event' as const,
        id: event._id,
        title: event.title
      },
      isRead: false, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
      isArchived: false
    };
    notifications.push(trainerNotification);

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (event.clientId && event.clientName) {
      const clientNotification = {
        type: 'notification' as const,
        subject: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        content: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n` +
                 `üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ${event.title}\n` +
                 `üë®‚Äçüíº –¢—Ä–µ–Ω–µ—Ä: ${event.trainerName}\n` +
                 `üìÖ –î–∞—Ç–∞: ${new Date(event.startTime).toLocaleDateString('ru')}\n` +
                 `‚è∞ –í—Ä–µ–º—è: ${new Date(event.startTime).toLocaleTimeString('ru')} - ${new Date(event.endTime).toLocaleTimeString('ru')}\n` +
                 `üìç –ú–µ—Å—Ç–æ: ${event.location || '–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª'}\n` +
                 `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.price} ‚ÇΩ\n\n` +
                 `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!`,
        senderId: 'system',
        senderName: '–°–∏—Å—Ç–µ–º–∞ FitAccess',
        senderRole: 'system' as const,
        recipientIds: [event.clientId],
        recipientNames: [event.clientName],
        priority: 'high' as const,
        relatedTo: {
          type: 'event' as const,
          id: event._id,
          title: event.title
        },
        isRead: false, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        isArchived: false
      };
      notifications.push(clientNotification);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    const managerNotification = {
      type: 'notification' as const,
      subject: 'üìä –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      content: `–°—É–ø–µ—Ä –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–ª –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n` +
               `üèãÔ∏è –°–æ–±—ã—Ç–∏–µ: ${event.title}\n` +
               `üë®‚Äçüíº –¢—Ä–µ–Ω–µ—Ä: ${event.trainerName}\n` +
               `üë§ –ö–ª–∏–µ–Ω—Ç: ${event.clientName || '–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n` +
               `üìÖ –î–∞—Ç–∞: ${new Date(event.startTime).toLocaleDateString('ru')}\n` +
               `‚è∞ –í—Ä–µ–º—è: ${new Date(event.startTime).toLocaleTimeString('ru')}\n` +
               `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${event.price} ‚ÇΩ`,
      senderId: 'system',
      senderName: '–°–∏—Å—Ç–µ–º–∞ FitAccess',
      senderRole: 'system' as const,
      recipientIds: ['manager_1', 'manager_2'], // ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      recipientNames: ['–ú–µ–Ω–µ–¥–∂–µ—Ä 1', '–ú–µ–Ω–µ–¥–∂–µ—Ä 2'],
      priority: 'normal' as const,
      relatedTo: {
        type: 'event' as const,
        id: event._id,
        title: event.title
      },
      isRead: false, // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
      isArchived: false
    };
    notifications.push(managerNotification);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for (const notification of notifications) {
      try {
        await sendMessage(notification);
        console.log(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notification.recipientNames.join(', ')}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ debug —Å–∏—Å—Ç–µ–º—É
    if (typeof window !== 'undefined' && window.fitAccessDebug) {
      window.fitAccessDebug.notifications = window.fitAccessDebug.notifications || [];
      // –î–æ–±–∞–≤–ª—è–µ–º _id –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –¥–ª—è debug —Å–∏—Å—Ç–µ–º—ã
      const debugNotifications = notifications.map(notif => ({
        ...notif,
        _id: `notif_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        status: 'sent' as const,
        createdAt: new Date().toISOString()
      }));
      window.fitAccessDebug.notifications.push(...debugNotifications);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
          </DialogTitle>
        </DialogHeader>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *</label>
              <Input
                value={eventData.title}
                onChange={(e) => setEventData({...eventData, title: e.target.value})}
                placeholder="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
                className="mt-1"
              />
            </div>

            <div>
              <label className="text-sm font-medium">–¢–∏–ø —Å–æ–±—ã—Ç–∏—è</label>
              <Select value={eventData.type} onValueChange={(value) => setEventData({...eventData, type: value})}>
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="training">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</SelectItem>
                  <SelectItem value="group">–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ</SelectItem>
                  <SelectItem value="consultation">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</SelectItem>
                  <SelectItem value="assessment">–û—Ü–µ–Ω–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium">–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <Textarea
                value={eventData.description}
                onChange={(e) => setEventData({...eventData, description: e.target.value})}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"
                rows={3}
                className="mt-1"
              />
            </div>
          </div>

          {/* –í—Ä–µ–º—è –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ */}
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-2">
              <div>
                <label className="text-sm font-medium">–ù–∞—á–∞–ª–æ *</label>
                <Input
                  type="datetime-local"
                  value={eventData.startTime}
                  onChange={(e) => {
                    const startTime = e.target.value;
                    const endTime = new Date(new Date(startTime).getTime() + eventData.duration * 60000).toISOString().slice(0, 16);
                    setEventData({...eventData, startTime, endTime});
                  }}
                  className="mt-1"
                />
              </div>
              <div>
                <label className="text-sm font-medium">–û–∫–æ–Ω—á–∞–Ω–∏–µ</label>
                <Input
                  type="datetime-local"
                  value={eventData.endTime}
                  onChange={(e) => setEventData({...eventData, endTime: e.target.value})}
                  className="mt-1"
                />
              </div>
            </div>

            <div>
              <label className="text-sm font-medium">–¢—Ä–µ–Ω–µ—Ä *</label>
              <Select 
                value={eventData.trainerId} 
                onValueChange={(value) => {
                  const trainer = trainers.find(t => t.id === value);
                  setEventData({
                    ...eventData, 
                    trainerId: value,
                    trainerName: trainer?.name || ''
                  });
                }}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞" />
                </SelectTrigger>
                <SelectContent>
                  {trainers.map(trainer => (
                    <SelectItem key={trainer.id} value={trainer.id}>
                      {trainer.name} - {trainer.specialization}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium">–ö–ª–∏–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
              <Select 
                value={eventData.clientId} 
                onValueChange={(value) => {
                  const client = clients.find(c => c.id === value);
                  setEventData({
                    ...eventData, 
                    clientId: value,
                    clientName: client?.name || ''
                  });
                }}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ</SelectItem>
                  {clients.map(client => (
                    <SelectItem key={client.id} value={client.id}>
                      {client.name} - {client.membership}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="md:col-span-2 grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
              <label className="text-sm font-medium flex items-center gap-2">
                <MapPin className="h-4 w-4" />
                –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
              </label>
              <Input
                value={eventData.location}
                onChange={(e) => setEventData({...eventData, location: e.target.value})}
                placeholder="–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª"
                className="mt-1"
              />
            </div>

            <div>
              <label className="text-sm font-medium flex items-center gap-2">
                <DollarSign className="h-4 w-4" />
                –°—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)
              </label>
              <Input
                type="number"
                value={eventData.price}
                onChange={(e) => setEventData({...eventData, price: Number(e.target.value)})}
                placeholder="0"
                className="mt-1"
              />
            </div>

            <div>
              <label className="text-sm font-medium flex items-center gap-2">
                <Clock className="h-4 w-4" />
                –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)
              </label>
              <Select 
                value={eventData.duration.toString()} 
                onValueChange={(value) => setEventData({...eventData, duration: Number(value)})}
              >
                <SelectTrigger className="mt-1">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="30">30 –º–∏–Ω—É—Ç</SelectItem>
                  <SelectItem value="45">45 –º–∏–Ω—É—Ç</SelectItem>
                  <SelectItem value="60">60 –º–∏–Ω—É—Ç</SelectItem>
                  <SelectItem value="90">90 –º–∏–Ω—É—Ç</SelectItem>
                  <SelectItem value="120">120 –º–∏–Ω—É—Ç</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </div>

        <div className="flex justify-end gap-2 pt-4">
          <Button variant="outline" onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleCreateEvent} disabled={loading}>
            {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}

