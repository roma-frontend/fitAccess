// components/admin/PasswordResetLogs.tsx (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–∏–ø–∞–º–∏)
"use client";

import { useState, useEffect, JSX } from "react";
import { ConvexHttpClient } from "convex/browser";
import { api } from "@/convex/_generated/api";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import {
  Shield,
  AlertTriangle,
  CheckCircle,
  Clock,
  XCircle,
  RefreshCw,
  Download,
  Trash2,
  Search,
  Filter,
  Users,
  Activity,
  TrendingUp,
  Eye,
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQuery } from "convex/react";
import { Id } from "@/convex/_generated/dataModel";

// –¢–∏–ø—ã
interface PasswordResetLog {
  _id: Id<"passwordResetLogs">;
  _creationTime: number;
  userId: string;
  userType: "staff" | "member";
  email: string;
  action: "requested" | "completed" | "failed" | "expired";
  timestamp: number;
  details?: string;
}

type UserTypeFilter = "all" | "staff" | "member";
type ActionFilter = "all" | "requested" | "completed" | "failed" | "expired";
type DateRangeFilter = "all" | "today" | "week" | "month";

export function PasswordResetLogs() {
  const [userTypeFilter, setUserTypeFilter] = useState<UserTypeFilter>("all");
  const [actionFilter, setActionFilter] = useState<ActionFilter>("all");
  const [searchTerm, setSearchTerm] = useState("");
  const [limit, setLimit] = useState(50);
  const [dateRange, setDateRange] = useState<DateRangeFilter>("all");

  const { toast } = useToast();

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ useQuery
  const logsData = useQuery(api.auth.getPasswordResetLogs, {
    limit,
    userType: userTypeFilter === "all" ? undefined : userTypeFilter,
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
  const isLoading = logsData === undefined;
  const logs: PasswordResetLog[] = logsData || [];

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
  const mockLogs: PasswordResetLog[] = [
    {
      _id: "1" as Id<"passwordResetLogs">,
      _creationTime: Date.now() - 1000 * 60 * 30,
      userId: "user1",
      userType: "member",
      email: "test@example.com",
      action: "requested",
      timestamp: Date.now() - 1000 * 60 * 30,
      details: "–ó–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è",
    },
    {
      _id: "2" as Id<"passwordResetLogs">,
      _creationTime: Date.now() - 1000 * 60 * 60,
      userId: "user2",
      userType: "staff",
      email: "admin@example.com",
      action: "completed",
      timestamp: Date.now() - 1000 * 60 * 60,
      details: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
    },
    {
      _id: "3" as Id<"passwordResetLogs">,
      _creationTime: Date.now() - 1000 * 60 * 90,
      userId: "user3",
      userType: "member",
      email: "member@example.com",
      action: "failed",
      timestamp: Date.now() - 1000 * 60 * 90,
      details: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    },
    {
      _id: "4" as Id<"passwordResetLogs">,
      _creationTime: Date.now() - 1000 * 60 * 120,
      userId: "user4",
      userType: "staff",
      email: "trainer@example.com",
      action: "expired",
      timestamp: Date.now() - 1000 * 60 * 120,
      details: "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫",
    },
    {
      _id: "5" as Id<"passwordResetLogs">,
      _creationTime: Date.now() - 1000 * 60 * 15,
      userId: "user5",
      userType: "member",
      email: "athlete@example.com",
      action: "requested",
      timestamp: Date.now() - 1000 * 60 * 15,
      details: "–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
    },
  ];

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–∫ fallback
  const displayLogs: PasswordResetLog[] = logs.length > 0 ? logs : mockLogs;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!isLoading && logs.length === 0) {
      console.log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Convex, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
    }
  }, [isLoading, logs.length]);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  const filteredLogs = displayLogs
    .filter((log: PasswordResetLog) => {
      if (actionFilter !== "all" && log.action !== actionFilter) return false;
      if (
        searchTerm &&
        !log.email.toLowerCase().includes(searchTerm.toLowerCase())
      )
        return false;

      if (dateRange !== "all") {
        const now = Date.now();
        let cutoffTime = 0;

        switch (dateRange) {
          case "today":
            cutoffTime = now - 24 * 60 * 60 * 1000;
            break;
          case "week":
            cutoffTime = now - 7 * 24 * 60 * 60 * 1000;
            break;
          case "month":
            cutoffTime = now - 30 * 24 * 60 * 60 * 1000;
            break;
        }

        if (log.timestamp <= cutoffTime) return false;
      }

      return true;
    })
    .sort((a: PasswordResetLog, b: PasswordResetLog) => b.timestamp - a.timestamp);

  const cleanupMutation = useMutation(api.auth.cleanupExpiredTokens);

  const handleCleanup = async (): Promise<void> => {
    try {
      const result = await cleanupMutation({});

      if (result && typeof result === 'object' && 'success' in result) {
        if (result.success) {
          toast({
            title: "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            description: result.message || "–ò—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã —É–¥–∞–ª–µ–Ω—ã",
          });
        } else {
          toast({
            variant: "destructive",
            title: "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏",
            description: result.error || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ",
          });
        }
      } else {
        toast({
          title: "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
          description: "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:", error);
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–∫–µ–Ω–æ–≤",
      });
    }
  };

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ HTTP –∫–ª–∏–µ–Ω—Ç
  const fetchLogsViaHttp = async (): Promise<PasswordResetLog[] | null> => {
    try {
      const convex = new ConvexHttpClient(
        process.env.NEXT_PUBLIC_CONVEX_URL!
      );
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º query –º–µ—Ç–æ–¥ HTTP –∫–ª–∏–µ–Ω—Ç–∞
      const result = useQuery(api.auth.getPasswordResetLogs, {
        limit,
        userType: userTypeFilter === "all" ? undefined : userTypeFilter,
      });
      
      return result as PasswordResetLog[];
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:", error);
      return null;
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  const formatTimestamp = (timestamp: number): string => {
    return new Date(timestamp).toLocaleString("ru-RU");
  };

  const getRelativeTime = (timestamp: number): string => {
    const now = Date.now();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (minutes < 1) return "—Ç–æ–ª—å–∫–æ —á—Ç–æ";
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    if (days < 7) return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
    return formatTimestamp(timestamp);
  };

  const getActionIcon = (action: PasswordResetLog['action']): JSX.Element => {
    switch (action) {
      case "requested":
        return <Clock className="h-4 w-4 text-blue-600" />;
      case "completed":
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case "failed":
        return <XCircle className="h-4 w-4 text-red-600" />;
      case "expired":
        return <AlertTriangle className="h-4 w-4 text-orange-600" />;
      default:
        return <Shield className="h-4 w-4 text-gray-600" />;
    }
  };

  const getActionBadge = (action: PasswordResetLog['action']): JSX.Element => {
    const styles: Record<PasswordResetLog['action'], string> = {
      requested: "bg-blue-100 text-blue-800 border-blue-200",
      completed: "bg-green-100 text-green-800 border-green-200",
      failed: "bg-red-100 text-red-800 border-red-200",
      expired: "bg-orange-100 text-orange-800 border-orange-200",
    };

    const labels: Record<PasswordResetLog['action'], string> = {
      requested: "–ó–∞–ø—Ä–æ—à–µ–Ω",
      completed: "–ó–∞–≤–µ—Ä—à–µ–Ω",
      failed: "–û—à–∏–±–∫–∞",
      expired: "–ò—Å—Ç–µ–∫",
    };

    return (
      <span
        className={`px-2 py-1 rounded-full text-xs font-medium border ${styles[action]}`}
      >
        {labels[action]}
      </span>
    );
  };

  const getUserTypeBadge = (userType: PasswordResetLog['userType']): JSX.Element => {
    return (
      <Badge
        variant={userType === "staff" ? "secondary" : "outline"}
        className="text-xs"
      >
        {userType === "staff" ? "üë• –ü–µ—Ä—Å–æ–Ω–∞–ª" : "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"}
      </Badge>
    );
  };

  const clearFilters = (): void => {
    setUserTypeFilter("all");
    setActionFilter("all");
    setSearchTerm("");
    setDateRange("all");
  };

  const exportLogs = (): void => {
    if (filteredLogs.length === 0) {
      toast({
        variant: "destructive",
        title: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
        description: "–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
      });
      return;
    }

    const csvContent = [
      ["–í—Ä–µ–º—è", "Email", "–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–î–µ–π—Å—Ç–≤–∏–µ", "–î–µ—Ç–∞–ª–∏"].join(","),
      ...filteredLogs.map((log: PasswordResetLog) =>
        [
          formatTimestamp(log.timestamp),
          log.email,
          log.userType,
          log.action,
          log.details || "",
        ]
          .map((field: string) => `"${String(field).replace(/"/g, '""')}"`)
          .join(",")
      ),
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute(
      "download",
      `password-reset-logs-${new Date().toISOString().split("T")[0]}.csv`
    );
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    toast({
      title: "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
      description: `–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${filteredLogs.length} –∑–∞–ø–∏—Å–µ–π`,
    });
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
  const stats = {
    total: filteredLogs.length,
    requested: filteredLogs.filter((log: PasswordResetLog) => log.action === "requested").length,
    completed: filteredLogs.filter((log: PasswordResetLog) => log.action === "completed").length,
    failed: filteredLogs.filter((log: PasswordResetLog) => log.action === "failed").length,
    expired: filteredLogs.filter((log: PasswordResetLog) => log.action === "expired").length,
    staff: filteredLogs.filter((log: PasswordResetLog) => log.userType === "staff").length,
    members: filteredLogs.filter((log: PasswordResetLog) => log.userType === "member").length,
  };

  const hasFilters: boolean =
    userTypeFilter !== "all" ||
    actionFilter !== "all" ||
    searchTerm !== "" ||
    dateRange !== "all";

  // JSX –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ, –Ω–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –≤ map —Ñ—É–Ω–∫—Ü–∏—è—Ö
  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-r from-blue-50 to-blue-100 border-blue-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-blue-200 rounded-lg">
                <Clock className="h-5 w-5 text-blue-700" />
              </div>
              <div>
                <p className="text-sm font-medium text-blue-900">–ó–∞–ø—Ä–æ—à–µ–Ω–æ</p>
                <p className="text-2xl font-bold text-blue-700">
                  {stats.requested}
                </p>
                <p className="text-xs text-blue-600">—Ç–æ–∫–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ</p>
              </div>
            </div>
          </CardContent>
        </Card>

                <Card className="bg-gradient-to-r from-green-50 to-green-100 border-green-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-green-200 rounded-lg">
                <CheckCircle className="h-5 w-5 text-green-700" />
              </div>
              <div>
                <p className="text-sm font-medium text-green-900">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</p>
                <p className="text-2xl font-bold text-green-700">
                  {stats.completed}
                </p>
                <p className="text-xs text-green-600">–ø–∞—Ä–æ–ª–µ–π –∏–∑–º–µ–Ω–µ–Ω–æ</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-red-50 to-red-100 border-red-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-red-200 rounded-lg">
                <XCircle className="h-5 w-5 text-red-700" />
              </div>
              <div>
                <p className="text-sm font-medium text-red-900">–û—à–∏–±–∫–∏</p>
                <p className="text-2xl font-bold text-red-700">
                  {stats.failed}
                </p>
                <p className="text-xs text-red-600">–Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-r from-orange-50 to-orange-100 border-orange-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-orange-200 rounded-lg">
                <AlertTriangle className="h-5 w-5 text-orange-700" />
              </div>
              <div>
                <p className="text-sm font-medium text-orange-900">–ò—Å—Ç–µ–∫–ª–æ</p>
                <p className="text-2xl font-bold text-orange-700">
                  {stats.expired}
                </p>
                <p className="text-xs text-orange-600">—Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center space-x-2">
              <Shield className="h-5 w-5" />
              <span>–õ–æ–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π</span>
              {hasFilters && (
                <Badge variant="secondary" className="ml-2">
                  –§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã
                </Badge>
              )}
            </CardTitle>

            <div className="flex items-center space-x-2">
              <Button variant="outline" size="sm" onClick={handleCleanup}>
                <Trash2 className="h-4 w-4 mr-2" />
                –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ
              </Button>

              <Button
                variant="outline"
                size="sm"
                onClick={exportLogs}
                disabled={filteredLogs.length === 0}
              >
                <Download className="h-4 w-4 mr-2" />
                –≠–∫—Å–ø–æ—Ä—Ç CSV
              </Button>
            </div>
          </div>

          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 mt-4">
            <div className="relative">
              <Search className="h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <Input
                placeholder="–ü–æ–∏—Å–∫ –ø–æ email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>

            <select
              value={userTypeFilter}
              onChange={(e) =>
                setUserTypeFilter(e.target.value as UserTypeFilter)
              }
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
              <option value="staff">üë• –ü–µ—Ä—Å–æ–Ω–∞–ª</option>
              <option value="member">üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏</option>
            </select>

            <select
              value={actionFilter}
              onChange={(e) => setActionFilter(e.target.value as ActionFilter)}
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è</option>
              <option value="requested">üïí –ó–∞–ø—Ä–æ—à–µ–Ω–æ</option>
              <option value="completed">‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
              <option value="failed">‚ùå –û—à–∏–±–∫–∞</option>
              <option value="expired">‚ö†Ô∏è –ò—Å—Ç–µ–∫–ª–æ</option>
            </select>

            <select
              value={dateRange}
              onChange={(e) => setDateRange(e.target.value as DateRangeFilter)}
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">–í—Å–µ –≤—Ä–µ–º—è</option>
              <option value="today">üìÖ –°–µ–≥–æ–¥–Ω—è</option>
              <option value="week">üìÖ –ù–µ–¥–µ–ª—è</option>
              <option value="month">üìÖ –ú–µ—Å—è—Ü</option>
            </select>

            <select
              value={limit.toString()}
              onChange={(e) => setLimit(parseInt(e.target.value))}
              className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="25">25 –∑–∞–ø–∏—Å–µ–π</option>
              <option value="50">50 –∑–∞–ø–∏—Å–µ–π</option>
              <option value="100">100 –∑–∞–ø–∏—Å–µ–π</option>
              <option value="200">200 –∑–∞–ø–∏—Å–µ–π</option>
              <option value="500">500 –∑–∞–ø–∏—Å–µ–π</option>
            </select>

            <Button
              variant="outline"
              size="sm"
              onClick={clearFilters}
              disabled={!hasFilters}
              className="flex items-center"
            >
              <Filter className="h-4 w-4 mr-2" />
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö */}
          {hasFilters && (
            <div className="flex items-center justify-between p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="flex items-center space-x-2">
                <Filter className="h-4 w-4 text-blue-600" />
                <span className="text-sm text-blue-800">
                  –ü–æ–∫–∞–∑–∞–Ω–æ {stats.total} –∏–∑ {displayLogs.length} –∑–∞–ø–∏—Å–µ–π
                </span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={clearFilters}
                className="text-blue-600 hover:text-blue-700"
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
              </Button>
            </div>
          )}
        </CardHeader>

        <CardContent>
          {isLoading ? (
            <div className="flex items-center justify-center py-12">
              <div className="text-center">
                <RefreshCw className="h-8 w-8 animate-spin mx-auto mb-4 text-blue-600" />
                <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...</p>
                <p className="text-sm text-gray-400 mt-1">
                  –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
                </p>
              </div>
            </div>
          ) : filteredLogs.length === 0 ? (
            <div className="text-center py-12">
              <Shield className="h-16 w-16 mx-auto mb-4 text-gray-300" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                {hasFilters ? "–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" : "–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}
              </h3>
              <p className="text-gray-500 mb-4">
                {hasFilters
                  ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"
                  : "–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∞–ª–∏"}
              </p>
              {hasFilters && (
                <Button variant="outline" onClick={clearFilters}>
                  –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </Button>
              )}
            </div>
          ) : (
            <div className="space-y-4">
              {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∫–∞—Ä—Ç–æ—á–∫–∏ */}
              <div className="block md:hidden space-y-3">
                {filteredLogs.map((log: PasswordResetLog) => (
                  <Card
                    key={log._id}
                    className="p-4 hover:shadow-md transition-shadow"
                  >
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          {getActionIcon(log.action)}
                          {getActionBadge(log.action)}
                        </div>
                        <div className="text-xs text-gray-500">
                          {getRelativeTime(log.timestamp)}
                        </div>
                      </div>

                      <div>
                        <div
                          className="font-medium text-sm truncate"
                          title={log.email}
                        >
                          {log.email}
                        </div>
                        <div className="flex items-center space-x-2 mt-1">
                          {getUserTypeBadge(log.userType)}
                        </div>
                      </div>

                      {log.details && (
                        <div className="text-xs text-gray-600 bg-gray-50 p-2 rounded border-l-2 border-gray-200">
                          {log.details}
                        </div>
                      )}

                      <div className="text-xs text-gray-400 font-mono">
                        {formatTimestamp(log.timestamp)}
                      </div>
                    </div>
                  </Card>
                ))}
              </div>

              {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–∞–±–ª–∏—Ü–∞ */}
              <div className="hidden md:block overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –í—Ä–µ–º—è
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Email
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –¢–∏–ø
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –î–µ–π—Å—Ç–≤–∏–µ
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –î–µ—Ç–∞–ª–∏
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredLogs.map((log: PasswordResetLog) => (
                      <tr key={log._id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-mono">
                          <div className="space-y-1">
                            <div>
                              {formatTimestamp(log.timestamp).split(" ")[0]}
                            </div>
                            <div className="text-xs text-gray-500">
                              {formatTimestamp(log.timestamp).split(" ")[1]}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="max-w-xs">
                            <div
                              className="truncate font-medium text-sm"
                              title={log.email}
                            >
                              {log.email}
                            </div>
                            {log.userId && log.userId !== "unknown" && (
                              <div className="text-xs text-gray-500 font-mono">
                                ID: {log.userId.slice(-8)}
                              </div>
                            )}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {getUserTypeBadge(log.userType)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center space-x-2">
                            {getActionIcon(log.action)}
                            {getActionBadge(log.action)}
                          </div>
                        </td>
                        <td className="px-6 py-4 text-sm text-gray-500 max-w-xs">
                          {log.details ? (
                            <div
                              className="truncate cursor-help"
                              title={log.details}
                            >
                              {log.details}
                            </div>
                          ) : (
                            <span className="text-gray-400">‚Äî</span>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-xs text-gray-500">
                          {getRelativeTime(log.timestamp)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="bg-gray-50">
          <CardHeader>
            <CardTitle className="text-sm flex items-center space-x-2">
              <Eye className="h-4 w-4" />
              <span>–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <div className="flex items-center space-x-2">
              <Clock className="h-4 w-4 text-blue-600" />
              <span className="text-sm">–°–∏–Ω–∏–π - –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>
            </div>
            <div className="flex items-center space-x-2">
                            <CheckCircle className="h-4 w-4 text-green-600" />
              <span className="text-sm">–ó–µ–ª–µ–Ω—ã–π - –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω</span>
            </div>
            <div className="flex items-center space-x-2">
              <XCircle className="h-4 w-4 text-red-600" />
              <span className="text-sm">–ö—Ä–∞—Å–Ω—ã–π - –æ—à–∏–±–∫–∞</span>
            </div>
            <div className="flex items-center space-x-2">
              <AlertTriangle className="h-4 w-4 text-orange-600" />
              <span className="text-sm">–û—Ä–∞–Ω–∂–µ–≤—ã–π - —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫</span>
            </div>
          </CardContent>
        </Card>

        <Card className="bg-gray-50">
          <CardHeader>
            <CardTitle className="text-sm flex items-center space-x-2">
              <Filter className="h-4 w-4" />
              <span>–ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <Button
              variant="outline"
              size="sm"
              className="w-full justify-start"
              onClick={() => setActionFilter("failed")}
            >
              <XCircle className="h-4 w-4 mr-2" />
              –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="w-full justify-start"
              onClick={() => setDateRange("today")}
            >
              <Clock className="h-4 w-4 mr-2" />
              –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            </Button>
            <Button
              variant="outline"
              size="sm"
              className="w-full justify-start"
              onClick={() => {
                setActionFilter("completed");
                setDateRange("week");
              }}
            >
              <CheckCircle className="h-4 w-4 mr-2" />
              –£—Å–ø–µ—à–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            </Button>
          </CardContent>
        </Card>

        <Card className="bg-gray-50">
          <CardHeader>
            <CardTitle className="text-sm flex items-center space-x-2">
              <Activity className="h-4 w-4" />
              <span>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Users className="h-4 w-4 text-blue-600" />
                <span className="text-sm">–ü–µ—Ä—Å–æ–Ω–∞–ª</span>
              </div>
              <Badge variant="secondary">{stats.staff}</Badge>
            </div>
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Users className="h-4 w-4 text-green-600" />
                <span className="text-sm">–£—á–∞—Å—Ç–Ω–∏–∫–∏</span>
              </div>
              <Badge variant="outline">{stats.members}</Badge>
            </div>
            <div className="pt-2 border-t">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</span>
                <span className="text-sm font-bold text-green-600">
                  {stats.total > 0
                    ? Math.round((stats.completed / stats.total) * 100)
                    : 0}
                  %
                </span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2 mt-1">
                <div
                  className="bg-green-600 h-2 rounded-full transition-all duration-300"
                  style={{
                    width: `${stats.total > 0 ? (stats.completed / stats.total) * 100 : 0}%`,
                  }}
                ></div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card className="border-blue-200 bg-blue-50">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <div className="p-2 bg-blue-200 rounded-lg">
                <Shield className="h-5 w-5 text-blue-700" />
              </div>
              <div>
                <h4 className="font-medium text-blue-900 mb-1">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h4>
                <p className="text-sm text-blue-700 mb-2">
                  –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª–µ–π –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –¥–ª—è
                  –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                </p>
                <ul className="text-xs text-blue-600 space-y-1">
                  <li>‚Ä¢ –¢–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ 1 —á–∞—Å</li>
                  <li>‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤</li>
                  <li>‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ (1 –∑–∞–ø—Ä–æ—Å –≤ 5 –º–∏–Ω—É—Ç)</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="border-green-200 bg-green-50">
          <CardContent className="p-4">
            <div className="flex items-start space-x-3">
              <div className="p-2 bg-green-200 rounded-lg">
                <TrendingUp className="h-5 w-5 text-green-700" />
              </div>
              <div>
                <h4 className="font-medium text-green-900 mb-1">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h4>
                <p className="text-sm text-green-700 mb-2">
                  –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤—ã—è–≤–ª—è–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
                </p>
                <ul className="text-xs text-green-600 space-y-1">
                  <li>‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ</li>
                  <li>‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</li>
                  <li>‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <Card
        className={`${logs.length > 0 ? "bg-green-50 border-green-200" : "bg-yellow-50 border-yellow-200"}`}
      >
        <CardContent className="p-4">
          <div className="flex items-center space-x-2">
            {logs.length > 0 ? (
              <>
                <CheckCircle className="h-4 w-4 text-green-600" />
                <div>
                  <p className="text-sm font-medium text-green-900">
                    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Convex –∞–∫—Ç–∏–≤–Ω–æ
                  </p>
                  <p className="text-xs text-green-700">
                    –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:{" "}
                    {new Date().toLocaleTimeString("ru-RU")}
                  </p>
                </div>
              </>
            ) : (
              <>
                <AlertTriangle className="h-4 w-4 text-yellow-600" />
                <div>
                  <p className="text-sm font-medium text-yellow-900">
                    –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
                  </p>
                  <p className="text-xs text-yellow-700">
                    –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Convex –¥–ª—è
                    –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
                  </p>
                </div>
              </>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


