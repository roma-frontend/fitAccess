// components/admin/AdminHeader.tsx
"use client";

import { useState } from "react";
import { useRouter, usePathname } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { ThemeToggle } from "@/components/ui/theme-toggle";
import { useToast } from "@/hooks/use-toast";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useAdmin } from "@/contexts/AdminContext";
import {
  Dumbbell,
  Users,
  Calendar,
  BarChart3,
  Bell,
  Plus,
  Menu,
  X,
  Settings,
  UserCheck,
  LogOut,
  ChevronDown,
  Loader2,
  Shield,
  Database,
  Activity,
  AlertTriangle,
} from "lucide-react";

export default function AdminHeader() {
  const router = useRouter();
  const pathname = usePathname();
  const { stats, loading } = useAdmin();
  const { toast } = useToast();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [notificationsOpen, setNotificationsOpen] = useState(false);
  const [isLoggingOut, setIsLoggingOut] = useState(false);

  // –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = {
    name: "–ú–∞–∫—Å–∏–º –ê–¥–º–∏–Ω",
    email: "max.admin@fitaccess.com",
    avatar: "/avatars/admin-max.jpg",
    role: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const handleLogout = async () => {
    setIsLoggingOut(true);
    
    try {
      console.log("üö™ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...");
      
      const response = await fetch("/api/auth/logout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const data = await response.json();

      if (response.ok && data.success) {
        console.log("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
        
        toast({
          title: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω",
          description: "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
        });

        setTimeout(() => {
          window.location.href = "/";
        }, 1000);
      } else {
        throw new Error(data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
      
      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
      });
      
      setTimeout(() => {
        window.location.href = "/";
      }, 2000);
    } finally {
      setIsLoggingOut(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—É—Ç–∏
  const isActivePath = (href: string) => {
    if (href === "/admin") {
      return pathname === "/admin";
    }
    return pathname.startsWith(href);
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const navItems = [
    {
      label: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
      href: "/admin/users",
      icon: Users,
      badge: `${stats.totalUsers}`,
    },
    {
      label: "–ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
      href: "/admin/managers",
      icon: Shield,
      badge: `${stats.totalManagers}`,
    },
    {
      label: "–°–∏—Å—Ç–µ–º–∞",
      href: "/admin/system",
      icon: Database,
      badge: stats.systemAlerts > 0 ? stats.systemAlerts.toString() : undefined,
    },
    {
      label: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
      href: "/admin/analytics",
      icon: BarChart3,
    },
  ];

  // –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è header
  const headerStats = [
    {
      value: stats.totalUsers.toString(),
      label: "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      color: "text-blue-600 dark:text-blue-400",
      icon: Users,
    },
    {
      value: stats.totalManagers.toString(),
      label: "–ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤",
      color: "text-green-600 dark:text-green-400",
      icon: Shield,
    },
    {
      value: `${(stats.systemLoad * 100).toFixed(0)}%`,
      label: "–ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
      color: stats.systemLoad > 0.8 ? "text-red-600 dark:text-red-400" : "text-purple-600 dark:text-purple-400",
      icon: Activity,
    },
    {
      value: stats.systemAlerts.toString(),
      label: "–°–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
      color: stats.systemAlerts > 0 ? "text-orange-600 dark:text-orange-400" : "text-gray-600 dark:text-gray-400",
      icon: AlertTriangle,
    },
  ];

  const unreadNotifications = stats.systemAlerts + 1;

  if (loading) {
    return (
      <header className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 sticky top-0 z-50 shadow-sm transition-colors duration-300">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-xl animate-pulse"></div>
              <div className="w-32 h-6 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-32 h-10 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
              <div className="w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse"></div>
            </div>
          </div>
        </div>
      </header>
    );
  }

  return (
    <>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π header */}
      <header className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 sticky top-0 z-50 shadow-sm transition-colors duration-300">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8">
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –õ–æ–≥–æ—Ç–∏–ø */}
            <div className="flex items-center space-x-4">
              <div
                className="flex items-center space-x-3 cursor-pointer group"
                onClick={() => router.push("/")}
              >
                <div className="w-10 h-10 bg-gradient-to-r from-red-600 to-purple-600 rounded-xl flex items-center justify-center transition-all duration-300 group-hover:scale-110 shadow-lg">
                  <Dumbbell className="h-6 w-6 text-white" />
                </div>
                <div className="hidden sm:block">
                  <h1 className="text-xl font-bold text-gray-900 dark:text-gray-100 group-hover:text-red-600 dark:group-hover:text-red-400 transition-colors duration-300">
                    FitAccess
                  </h1>
                  <p className="text-xs text-gray-500 dark:text-gray-400">–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
                </div>
              </div>
            </div>

            {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - –ù–∞–≤–∏–≥–∞—Ü–∏—è (—Å–∫—Ä—ã—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö) */}
            <nav className="hidden lg:flex items-center space-x-1">
              {navItems.map((item) => {
                const IconComponent = item.icon;
                const isActive = isActivePath(item.href);

                return (
                  <Button
                    key={item.href}
                    variant={isActive ? "default" : "ghost"}
                    onClick={() => router.push(item.href)}
                    className={`relative flex items-center gap-2 px-4 py-2 transition-all duration-200 ${
                      isActive
                        ? "bg-red-600 text-white shadow-md"
                        : "text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-100 dark
