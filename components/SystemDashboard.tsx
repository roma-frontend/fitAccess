// components/SystemDashboard.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { useUnifiedData, useSyncStatus } from '@/contexts/UnifiedDataContext';
import { useMessaging } from '@/contexts/MessagingContext';

interface SystemDashboardProps {
  userRole: 'super-admin' | 'admin' | 'manager' | 'trainer' | 'client';
  userId: string;
}

export default function SystemDashboard({ userRole, userId }: SystemDashboardProps) {
  const {
    trainers,
    clients,
    events,
    products,
    analytics,
    syncAllData,
    forceRefresh
  } = useUnifiedData();

  const {
    loading,
    error,
    isOnline,
    lastSync,
    isAnySyncing,
    syncQueue,
    currentSyncOperation,
    clearError
  } = useSyncStatus();

  const {
    messages,
    eventLogs,
    messageQueue,
    isProcessingMessages,
    getDebugData
  } = useMessaging();

  const [showDebugInfo, setShowDebugInfo] = useState(false);
  const [systemStats, setSystemStats] = useState<any>(null);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const updateStats = () => {
      setSystemStats({
        totalTrainers: trainers.length,
        activeTrainers: trainers.filter(t => t.status === 'active').length,
        totalClients: clients.length,
        activeClients: clients.filter(c => c.status === 'active').length,
        totalEvents: events.length,
        upcomingEvents: events.filter(e => new Date(e.startTime) > new Date()).length,
        totalProducts: products.length,
        lowStockProducts: products.filter(p => p.inStock <= p.minStock).length,
        unreadMessages: messages.filter(m => !m.isRead).length,
        recentEventLogs: eventLogs.slice(0, 5),
        lastUpdate: new Date().toLocaleTimeString('ru')
      });
    };

    updateStats();
    const interval = setInterval(updateStats, 30000);
    return () => clearInterval(interval);
  }, [trainers, clients, events, products, messages, eventLogs]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'online': return 'text-green-600';
      case 'syncing': return 'text-blue-600';
      case 'error': return 'text-red-600';
            default: return 'text-gray-600';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'online': return 'üü¢';
      case 'syncing': return 'üîÑ';
      case 'error': return 'üî¥';
      case 'offline': return '‚ö´';
      default: return '‚ö™';
    }
  };

  const formatSyncTime = (date: Date | null) => {
    if (!date) return '–ù–∏–∫–æ–≥–¥–∞';
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / 60000);
    
    if (minutes < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (minutes < 60) return `${minutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours} —á –Ω–∞–∑–∞–¥`;
    
    const days = Math.floor(hours / 24);
    return `${days} –¥–Ω –Ω–∞–∑–∞–¥`;
  };

  const handleEmergencySync = async () => {
    if (window.confirm('–í—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')) {
      await forceRefresh();
    }
  };

  const debugData = getDebugData();

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
        </h1>
        <p className="text-gray-600">
          –†–æ–ª—å: <span className="font-semibold">{userRole}</span> | 
          ID: <span className="font-mono text-sm">{userId}</span>
        </p>
      </div>

      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</p>
              <p className={`text-lg font-semibold ${getStatusColor(isOnline ? 'online' : 'offline')}`}>
                {getStatusIcon(isOnline ? 'online' : 'offline')} {isOnline ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω'}
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</p>
              <p className={`text-lg font-semibold ${getStatusColor(isAnySyncing ? 'syncing' : 'online')}`}>
                {getStatusIcon(isAnySyncing ? 'syncing' : 'online')} 
                {isAnySyncing ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...' : '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ'}
              </p>
              {currentSyncOperation && (
                <p className="text-xs text-gray-500">–û–ø–µ—Ä–∞—Ü–∏—è: {currentSyncOperation}</p>
              )}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è</p>
              <p className="text-lg font-semibold text-gray-900">
                {formatSyncTime(lastSync)}
              </p>
              {syncQueue.length > 0 && (
                <p className="text-xs text-blue-600">–í –æ—á–µ—Ä–µ–¥–∏: {syncQueue.length}</p>
              )}
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">–°–æ–æ–±—â–µ–Ω–∏—è</p>
              <p className="text-lg font-semibold text-gray-900">
                {systemStats?.unreadMessages || 0} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
              </p>
              {isProcessingMessages && (
                <p className="text-xs text-blue-600">–û–±—Ä–∞–±–æ—Ç–∫–∞: {messageQueue.length}</p>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <span className="text-red-600 mr-2">‚ö†Ô∏è</span>
              <div>
                <h3 className="text-red-800 font-medium">–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h3>
                <p className="text-red-700 text-sm">{error}</p>
              </div>
            </div>
            <button
              onClick={clearError}
              className="text-red-600 hover:text-red-800 text-sm font-medium"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-blue-100 text-blue-600 mr-4">
              üë•
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">–¢—Ä–µ–Ω–µ—Ä—ã</p>
              <p className="text-2xl font-bold text-gray-900">
                {systemStats?.activeTrainers || 0}
              </p>
              <p className="text-xs text-gray-500">
                –∏–∑ {systemStats?.totalTrainers || 0} –≤—Å–µ–≥–æ
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-green-100 text-green-600 mr-4">
              üë§
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">–ö–ª–∏–µ–Ω—Ç—ã</p>
              <p className="text-2xl font-bold text-gray-900">
                {systemStats?.activeClients || 0}
              </p>
              <p className="text-xs text-gray-500">
                –∏–∑ {systemStats?.totalClients || 0} –≤—Å–µ–≥–æ
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-purple-100 text-purple-600 mr-4">
              üìÖ
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">–°–æ–±—ã—Ç–∏—è</p>
              <p className="text-2xl font-bold text-gray-900">
                {systemStats?.upcomingEvents || 0}
              </p>
              <p className="text-xs text-gray-500">
                –∏–∑ {systemStats?.totalEvents || 0} –≤—Å–µ–≥–æ
              </p>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center">
            <div className="p-3 rounded-full bg-orange-100 text-orange-600 mr-4">
              üì¶
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">–ü—Ä–æ–¥—É–∫—Ç—ã</p>
              <p className="text-2xl font-bold text-gray-900">
                {systemStats?.totalProducts || 0}
              </p>
              <p className="text-xs text-red-500">
                {systemStats?.lowStockProducts || 0} –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</h3>
          </div>
          <div className="p-6">
            {systemStats?.recentEventLogs?.length > 0 ? (
              <div className="space-y-4">
                {systemStats.recentEventLogs.map((log: any, index: number) => (
                  <div key={index} className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <span className="inline-block w-2 h-2 bg-blue-400 rounded-full mt-2"></span>
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">
                        {log.event.title}
                      </p>
                      <p className="text-sm text-gray-500">
                        {log.action} ‚Ä¢ {log.createdBy} ‚Ä¢ 
                        {new Date(log.timestamp).toLocaleString('ru')}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-4">–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π</p>
            )}
          </div>
        </div>

        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
          </div>
          <div className="p-6">
            {messages.slice(0, 5).length > 0 ? (
              <div className="space-y-4">
                {messages.slice(0, 5).map((message) => (
                  <div key={message._id} className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      <span className={`inline-block w-2 h-2 rounded-full mt-2 ${
                        message.isRead ? 'bg-gray-400' : 'bg-blue-400'
                      }`}></span>
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">
                        {message.subject || '–ë–µ–∑ —Ç–µ–º—ã'}
                      </p>
                      <p className="text-sm text-gray-500">
                        –æ—Ç {message.senderName} ‚Ä¢ 
                        {new Date(message.createdAt).toLocaleString('ru')}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-4">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
            )}
          </div>
        </div>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <div className="bg-white rounded-lg shadow mb-8">
        <div className="p-6 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</h3>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button
              onClick={syncAllData}
              disabled={isAnySyncing}
              className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isAnySyncing ? (
                <>
                  <span className="animate-spin mr-2">üîÑ</span>
                  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...
                </>
              ) : (
                <>
                  <span className="mr-2">üîÑ</span>
                  –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                </>
              )}
            </button>

            <button
              onClick={handleEmergencySync}
              disabled={isAnySyncing}
              className="flex items-center justify-center px-4 py-2 border border-red-300 rounded-md shadow-sm text-sm font-medium text-red-700 bg-red-50 hover:bg-red-100 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span className="mr-2">‚ö°</span>
              –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            </button>

            <button
              onClick={() => setShowDebugInfo(!showDebugInfo)}
              className="flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              <span className="mr-2">üîß</span>
              {showDebugInfo ? '–°–∫—Ä—ã—Ç—å –æ—Ç–ª–∞–¥–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–∫—É'}
            </button>
          </div>
        </div>
      </div>

      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {showDebugInfo && (
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</h4>
                <div className="bg-gray-50 rounded-lg p-4">
                  <pre className="text-xs text-gray-600 whitespace-pre-wrap">
                    {JSON.stringify({
                      isOnline,
                      loading,
                      isAnySyncing,
                      syncQueue,
                      currentSyncOperation,
                      lastSync: lastSync?.toISOString(),
                      error
                    }, null, 2)}
                  </pre>
                </div>
              </div>

              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h4>
                <div className="bg-gray-50 rounded-lg p-4">
                  <pre className="text-xs text-gray-600 whitespace-pre-wrap">
                    {JSON.stringify({
                      totalMessages: messages.length,
                                            unreadMessages: messages.filter(m => !m.isRead).length,
                      messageQueue: messageQueue.length,
                      isProcessingMessages,
                      eventLogs: eventLogs.length,
                      debugData: {
                        events: debugData.events.length,
                        notifications: debugData.notifications.length,
                        syncStatus: debugData.syncStatus
                      }
                    }, null, 2)}
                  </pre>
                </div>
              </div>

              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">–î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã</h4>
                <div className="bg-gray-50 rounded-lg p-4">
                  <pre className="text-xs text-gray-600 whitespace-pre-wrap">
                    {JSON.stringify({
                      trainers: trainers.length,
                      clients: clients.length,
                      events: events.length,
                      products: products.length,
                      analytics: analytics ? '–ó–∞–≥—Ä—É–∂–µ–Ω—ã' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                      lastUpdate: systemStats?.lastUpdate
                    }, null, 2)}
                  </pre>
                </div>
              </div>

              <div>
                <h4 className="text-md font-medium text-gray-900 mb-3">–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h4>
                <div className="bg-gray-50 rounded-lg p-4">
                  <pre className="text-xs text-gray-600 whitespace-pre-wrap">
                    {JSON.stringify({
                      memoryUsage: typeof window !== 'undefined' ? {
                        used: Math.round((performance as any).memory?.usedJSHeapSize / 1024 / 1024) || 'N/A',
                        total: Math.round((performance as any).memory?.totalJSHeapSize / 1024 / 1024) || 'N/A',
                        limit: Math.round((performance as any).memory?.jsHeapSizeLimit / 1024 / 1024) || 'N/A'
                      } : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                      userAgent: typeof window !== 'undefined' ? navigator.userAgent.substring(0, 50) + '...' : '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                      timestamp: new Date().toISOString()
                    }, null, 2)}
                  </pre>
                </div>
              </div>
            </div>

            {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π */}
            <div className="mt-6">
              <h4 className="text-md font-medium text-gray-900 mb-3">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–æ–±—ã—Ç–∏–π</h4>
              <div className="bg-gray-50 rounded-lg p-4 max-h-64 overflow-y-auto">
                {eventLogs.slice(0, 10).map((log, index) => (
                  <div key={index} className="text-xs text-gray-600 mb-2 border-b border-gray-200 pb-2">
                    <div className="font-mono">
                      [{new Date(log.timestamp).toLocaleString('ru')}] 
                      <span className="font-semibold"> {log.action.toUpperCase()}</span> - 
                      {log.event.title}
                    </div>
                    <div className="ml-4 text-gray-500">
                      –°–æ–∑–¥–∞–Ω–æ: {log.createdBy} | –¢–∏–ø: {log.event.type} | 
                      –¢—Ä–µ–Ω–µ—Ä: {log.event.trainerName}
                      {log.event.clientName && ` | –ö–ª–∏–µ–Ω—Ç: ${log.event.clientName}`}
                    </div>
                  </div>
                ))}
                {eventLogs.length === 0 && (
                  <p className="text-gray-500 text-center py-4">–ù–µ—Ç –ª–æ–≥–æ–≤ —Å–æ–±—ã—Ç–∏–π</p>
                )}
              </div>
            </div>

            {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ */}
            <div className="mt-6">
              <h4 className="text-md font-medium text-gray-900 mb-3">–î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π</h4>
              <div className="bg-gray-50 rounded-lg p-4 max-h-64 overflow-y-auto">
                {messages.slice(0, 5).map((message, index) => (
                  <div key={index} className="text-xs text-gray-600 mb-3 border-b border-gray-200 pb-3">
                    <div className="font-mono">
                      [{new Date(message.createdAt).toLocaleString('ru')}] 
                      <span className="font-semibold"> {message.priority.toUpperCase()}</span>
                    </div>
                    <div className="ml-4">
                      <div><strong>–û—Ç:</strong> {message.senderName} ({message.senderId})</div>
                      <div><strong>–ö–æ–º—É:</strong> {message.recipientNames.join(', ')}</div>
                      <div><strong>–¢–µ–º–∞:</strong> {message.subject || '–ë–µ–∑ —Ç–µ–º—ã'}</div>
                      <div><strong>–°—Ç–∞—Ç—É—Å:</strong> {message.status} | 
                        <strong> –ü—Ä–æ—á–∏—Ç–∞–Ω–æ:</strong> {message.isRead ? '–î–∞' : '–ù–µ—Ç'}
                      </div>
                      {message.relatedTo && (
                        <div><strong>–°–≤—è–∑–∞–Ω–æ —Å:</strong> {message.relatedTo.type} - {message.relatedTo.title}</div>
                      )}
                    </div>
                  </div>
                ))}
                {messages.length === 0 && (
                  <p className="text-gray-500 text-center py-4">–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –§—É—Ç–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏—Å—Ç–µ–º–µ */}
      <div className="mt-8 text-center text-sm text-gray-500">
        <p>
          –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–æ–º | 
          –í–µ—Ä—Å–∏—è: 2.0.0 | 
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {systemStats?.lastUpdate || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
        </p>
        <p className="mt-1">
          –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {userRole} | 
          –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ | 
          {isOnline ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 'üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}
        </p>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
export function SystemTestPanel() {
  const { logEvent } = useMessaging();
  const [testResults, setTestResults] = useState<string[]>([]);

  const addTestResult = (result: string) => {
    setTestResults(prev => [`[${new Date().toLocaleTimeString()}] ${result}`, ...prev.slice(0, 9)]);
  };

  const createTestEvent = async () => {
    try {
      await logEvent({
        action: 'created',
        createdBy: 'test-user',
        event: {
          _id: `test_${Date.now()}`,
          title: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
          type: 'personal',
          startTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞
          endTime: new Date(Date.now() + 3 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
          trainerName: '–¢–µ—Å—Ç –¢—Ä–µ–Ω–µ—Ä',
          trainerId: 'trainer_test',
          clientName: '–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç',
          clientId: 'client_test',
          location: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ª',
          price: 1500,
          status: 'confirmed'
        }
      });
      addTestResult('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: ${error}`);
    }
  };

  const createTestGroupEvent = async () => {
    try {
      await logEvent({
        action: 'created',
        createdBy: 'test-user',
        event: {
          _id: `test_group_${Date.now()}`,
          title: '–ì—Ä—É–ø–ø–æ–≤–∞—è –π–æ–≥–∞',
          type: 'group',
          startTime: new Date(Date.now() + 4 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞
          endTime: new Date(Date.now() + 5 * 60 * 60 * 1000).toISOString(), // —á–µ—Ä–µ–∑ 5 —á–∞—Å–æ–≤
          trainerName: '–ê–Ω–Ω–∞ –ô–æ–≥–∏–Ω–∞',
          trainerId: 'trainer_yoga',
          location: '–ó–∞–ª –≥—Ä—É–ø–ø–æ–≤—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º',
          price: 800,
          status: 'open'
        }
      });
      addTestResult('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      addTestResult(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: ${error}`);
    }
  };

  const simulateSystemLoad = async () => {
    addTestResult('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –Ω–∞–≥—Ä—É–∑–∫–∏...');
    
    for (let i = 0; i < 5; i++) {
      try {
        await logEvent({
          action: 'created',
          createdBy: `load-test-${i}`,
          event: {
            _id: `load_test_${Date.now()}_${i}`,
            title: `–ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç ${i + 1}`,
            type: i % 2 === 0 ? 'personal' : 'group',
            startTime: new Date(Date.now() + (i + 1) * 60 * 60 * 1000).toISOString(),
            endTime: new Date(Date.now() + (i + 2) * 60 * 60 * 1000).toISOString(),
            trainerName: `–¢—Ä–µ–Ω–µ—Ä ${i + 1}`,
            trainerId: `trainer_${i}`,
            clientName: i % 2 === 0 ? `–ö–ª–∏–µ–Ω—Ç ${i + 1}` : undefined,
            clientId: i % 2 === 0 ? `client_${i}` : undefined,
            location: `–ó–∞–ª ${i + 1}`,
            price: 1000 + i * 100,
            status: 'confirmed'
          }
        });
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏–π
        await new Promise(resolve => setTimeout(resolve, 200));
        
      } catch (error) {
        addTestResult(`‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º —Ç–µ—Å—Ç–µ ${i + 1}: ${error}`);
      }
    }
    
    addTestResult('‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  };

  return (
    <div className="bg-white rounded-lg shadow p-6 mt-8">
      <div className="border-b border-gray-200 pb-4 mb-4">
        <h3 className="text-lg font-medium text-gray-900">–ü–∞–Ω–µ–ª—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã</h3>
        <p className="text-sm text-gray-600">–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <button
          onClick={createTestEvent}
          className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
        >
          <span className="mr-2">üë§</span>
          –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        </button>

        <button
          onClick={createTestGroupEvent}
          className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700"
        >
          <span className="mr-2">üë•</span>
          –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        </button>

        <button
          onClick={simulateSystemLoad}
          className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-orange-600 hover:bg-orange-700"
        >
          <span className="mr-2">‚ö°</span>
          –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç
        </button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ */}
      <div>
        <h4 className="text-md font-medium text-gray-900 mb-3">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤</h4>
        <div className="bg-gray-50 rounded-lg p-4 max-h-48 overflow-y-auto">
          {testResults.length > 0 ? (
            <div className="space-y-1">
              {testResults.map((result, index) => (
                <div key={index} className="text-sm font-mono text-gray-700">
                  {result}
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500 text-center py-4">–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤</p>
          )}
        </div>
      </div>
    </div>
  );
}


