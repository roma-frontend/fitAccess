"use client";

import { useState } from "react";
import { loadStripe } from "@stripe/stripe-js";
import {
  Elements,
  CardElement,
  useStripe,
  useElements,
} from "@stripe/react-stripe-js";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { AlertCircle, CreditCard, Lock } from "lucide-react";

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!
);

interface PaymentFormProps {
  items: any[];
  totalAmount: number;
  pickupType: string;
  notes: string;
  onSuccess: (receipt: any) => void;
  onError: (error: string) => void;
}

function CheckoutForm({
  items,
  totalAmount,
  pickupType,
  notes,
  onSuccess,
  onError,
}: PaymentFormProps) {
  const stripe = useStripe();
  const elements = useElements();
  const [processing, setProcessing] = useState(false);
  const [error, setError] = useState<string>("");
  const { toast } = useToast();

  const handleSubmit = async (event: React.FormEvent) => {
  event.preventDefault();
  setError('');

  console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
  try {
    const authCheck = await fetch('/api/auth/check');
    const authData = await authCheck.json();
    console.log('üë§ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', authData);
    
    if (!authData.authenticated) {
      setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
      return;
    }
    
    if (authData.user.role !== 'member') {
      setError('–ü–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞.');
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    setError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    return;
  }

    if (!stripe || !elements) {
      setError("–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
      return;
    }

    const cardElement = elements.getElement(CardElement);
    if (!cardElement) {
      setError("–§–æ—Ä–º–∞ –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    setProcessing(true);

    try {
      console.log("üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã...");

      // –°–æ–∑–¥–∞–µ–º Payment Intent
      const response = await fetch("/api/payments/create-payment-intent", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          items,
          totalAmount,
          pickupType,
          notes,
        }),
      });

      const responseData = await response.json();

      if (!response.ok) {
        throw new Error(responseData.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞");
      }

      const { clientSecret, paymentIntentId } = responseData;

      if (!clientSecret) {
        throw new Error("–ù–µ –ø–æ–ª—É—á–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –ø–ª–∞—Ç–µ–∂–∞");
      }

      console.log("‚úÖ Payment Intent —Å–æ–∑–¥–∞–Ω, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...");

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const { error: stripeError, paymentIntent } =
        await stripe.confirmCardPayment(clientSecret, {
          payment_method: {
            card: cardElement,
          },
        });

      if (stripeError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Stripe:", stripeError);
        throw new Error(getStripeErrorMessage(stripeError));
      }

      if (paymentIntent?.status === "succeeded") {
        console.log("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...");

        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const orderResponse = await fetch("/api/orders/create", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            items,
            totalAmount,
            pickupType,
            paymentMethod: "card",
            notes,
            status: "confirmed",
            paymentIntentId,
          }),
        });

        const orderData = await orderResponse.json();

        if (!orderResponse.ok) {
          throw new Error(orderData.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞");
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ–∫
        const receipt = {
          receiptId: `PAY-${paymentIntentId.slice(-8)}`,
          orderId: orderData.orderId,
          paymentId: paymentIntentId,
          amount: totalAmount,
          currency: "RUB",
          paidAt: new Date().toISOString(),
          paymentMethod: "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
          items: items.map((item) => ({
            name: item.productName,
            quantity: item.quantity,
            price: item.price,
            total: item.totalPrice,
          })),
          company: {
            name: "FitAccess",
            address: "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, –¥. 1",
            inn: "1234567890",
            phone: "+7 (495) 123-45-67",
          },
        };

        console.log("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –≤—ã–∑—ã–≤–∞–µ–º onSuccess");
        onSuccess(receipt);

        toast({
          title: "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
          description: "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        });
      } else {
        throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${paymentIntent?.status}`);
      }
    } catch (error) {
      console.error("üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:", error);
      const errorMessage =
        error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞";
      setError(errorMessage);
      onError(errorMessage);

      toast({
        variant: "destructive",
        title: "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã",
        description: errorMessage,
      });
    } finally {
      setProcessing(false);
    }
  };

  const getStripeErrorMessage = (error: any): string => {
    switch (error.code) {
      case "card_declined":
        return "–ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É.";
      case "expired_card":
        return "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –∏—Å—Ç–µ–∫.";
      case "incorrect_cvc":
        return "–ù–µ–≤–µ—Ä–Ω—ã–π CVC –∫–æ–¥.";
      case "insufficient_funds":
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ.";
      case "invalid_expiry_month":
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.";
      case "invalid_expiry_year":
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.";
      case "invalid_number":
        return "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã.";
      case "processing_error":
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      default:
        return error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞";
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <CreditCard className="h-5 w-5" />
          –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π
        </CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <div className="space-y-2">
            <label className="text-sm font-medium">–î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</label>
            <div className="p-4 border rounded-lg bg-white">
              <CardElement
                options={{
                  style: {
                    base: {
                      fontSize: "16px",
                      color: "#424770",
                      fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                      "::placeholder": {
                        color: "#aab7c4",
                      },
                    },
                    invalid: {
                      color: "#9e2146",
                    },
                  },
                  hidePostalCode: true,
                }}
              />
            </div>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg">
            <div className="flex justify-between items-center mb-2">
              <span className="font-medium">–ö –æ–ø–ª–∞—Ç–µ:</span>
              <span className="text-xl font-bold">{totalAmount} ‚ÇΩ</span>
            </div>
            <div className="text-sm text-gray-600">
              <p>
                –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:{" "}
                {pickupType === "counter"
                  ? "–ù–∞ —Å—Ç–æ–π–∫–µ —Ä–µ—Å–µ–ø—à–Ω"
                  : pickupType === "locker"
                    ? "–í –∞–≤—Ç–æ–º–∞—Ç–µ"
                    : "–ó–∞ —Å—Ç–æ–ª–∏–∫–æ–º"}
              </p>
              {notes && <p>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {notes}</p>}
            </div>
          </div>

          <Button
            type="submit"
            disabled={!stripe || processing}
            className="w-full"
            size="lg"
          >
            {processing ? (
              <div className="flex items-center gap-2">
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...
              </div>
            ) : (
              `–û–ø–ª–∞—Ç–∏—Ç—å ${totalAmount} ‚ÇΩ`
            )}
          </Button>

          <div className="flex items-center justify-center gap-2 text-xs text-gray-600">
            <Lock className="h-3 w-3" />
            <span>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º</span>
          </div>

          <div className="text-center">
            <p className="text-xs text-gray-500">
              –ù–∞–∂–∏–º–∞—è "–û–ø–ª–∞—Ç–∏—Ç—å", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã.
              <br />
              –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.
            </p>
          </div>
        </form>
      </CardContent>
    </Card>
  );
}

export default function PaymentForm(props: PaymentFormProps) {
  return (
    <Elements stripe={stripePromise}>
      <CheckoutForm {...props} />
    </Elements>
  );
}
