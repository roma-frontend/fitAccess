"use client";

import React, { useState, useEffect } from 'react';
import { Elements } from '@stripe/react-stripe-js';
import { stripePromise } from '@/lib/stripe';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Loader2, RefreshCw, User, Mail } from 'lucide-react';
import { ShopPaymentItem } from '@/types/payment';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/useAuth';
import CheckoutForm from './Checkout/CheckoutForm';

interface PaymentFormProps {
  items: ShopPaymentItem[];
  totalAmount: number;
  pickupType: string;
  notes?: string;
  onSuccess: (receipt: any) => void;
  onError: (error: string) => void;
}

export default function PaymentForm({
  items,
  totalAmount,
  pickupType,
  notes,
  onSuccess,
  onError
}: PaymentFormProps) {
  const [clientSecret, setClientSecret] = useState<string>('');
  const [paymentIntentId, setPaymentIntentId] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  
  // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [customerData, setCustomerData] = useState({
    email: '',
    name: '',
    phone: ''
  });
  const [showCustomerForm, setShowCustomerForm] = useState(false);
  const [dataReady, setDataReady] = useState(false);
  
  const { toast } = useToast();
  const { user, loading: authLoading } = useAuth();

  // ‚úÖ –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  console.log('üîç PaymentForm state:', {
    user,
    authLoading,
    customerData,
    showCustomerForm,
    dataReady,
    clientSecret: !!clientSecret
  });

  // ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    console.log('üîÑ PaymentForm: useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', { user, authLoading });
    
    if (!authLoading) {
      if (user && user.email && user.name) {
        console.log('üë§ PaymentForm: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', user);
        setCustomerData({
          email: user.email,
          name: user.name,
          phone: '' // ‚úÖ –í—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ user.phone –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        });
        setShowCustomerForm(false);
        setDataReady(true);
      } else if (user) {
        console.log('‚ö†Ô∏è PaymentForm: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ:', user);
        setCustomerData({
          email: user.email || '',
          name: user.name || '',
          phone: ''
        });
        setShowCustomerForm(true);
        setDataReady(false);
      } else {
        console.log('üë§ PaymentForm: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É');
        setCustomerData({
          email: '',
          name: '',
          phone: ''
        });
        setShowCustomerForm(true);
        setDataReady(false);
      }
    }
  }, [user, authLoading]);

  // ‚úÖ –°–æ–∑–¥–∞–µ–º PaymentIntent —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã
  useEffect(() => {
    console.log('üîÑ PaymentForm: useEffect –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent', {
      dataReady,
      clientSecret: !!clientSecret,
      loading,
      customerData
    });

    if (dataReady && !clientSecret && !loading) {
      console.log('üöÄ PaymentForm: —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º PaymentIntent');
      createPaymentIntent();
    }
  }, [dataReady, clientSecret, loading]);

  const createPaymentIntent = async () => {
    console.log('üí≥ PaymentForm: –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ PaymentIntent');
    console.log('üìã PaymentForm: —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', {
      user,
      customerData,
      finalEmail: user?.email || customerData.email,
      finalName: user?.name || customerData.name
    });

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const finalEmail = user?.email || customerData.email;
    const finalName = user?.name || customerData.name;
    const finalPhone = customerData.phone; // ‚úÖ –¢–æ–ª—å–∫–æ –∏–∑ —Ñ–æ—Ä–º—ã
    
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!finalEmail || !finalName) {
      const errorMsg = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: email="${finalEmail}", name="${finalName}"`;
      console.error('‚ùå PaymentForm:', errorMsg);
      setError(errorMsg);
      return;
    }

    setLoading(true);
    setError('');

    try {
      toast({
        title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–ª–∞—Ç–µ",
        description: "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É...",
      });

      // ‚úÖ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const requestData = {
        items,
        totalAmount,
        pickupType,
        notes: notes || '',
        userId: user?.id || 'guest',
        memberId: user?.id || undefined,
        memberEmail: finalEmail,
        customerName: finalName,
        customerPhone: finalPhone || undefined,
      };

      console.log('üì° PaymentForm: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏:', requestData);

      const response = await fetch('/api/payments/create-payment-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      console.log('üì° PaymentForm: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', {
        status: response.status,
        ok: response.ok
      });

      const data = await response.json();
      console.log('üì° PaymentForm: –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }

      setClientSecret(data.clientSecret);
      setPaymentIntentId(data.paymentIntentId);

      toast({
        title: "–ì–æ—Ç–æ–≤–æ –∫ –æ–ø–ª–∞—Ç–µ",
        description: "–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
      console.error('‚ùå PaymentForm: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PaymentIntent:', errorMessage);
      setError(errorMessage);
      onError(errorMessage);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCustomerDataSubmit = () => {
    console.log('‚úÖ PaymentForm: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∫–ª–∏–µ–Ω—Ç–∞:', customerData);

    if (!customerData.email || !customerData.name) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ",
        description: "Email –∏ –∏–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
        variant: "destructive",
      });
      return;
    }

    console.log('‚úÖ PaymentForm: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dataReady = true');
    setDataReady(true);
  };

  const appearance = {
    theme: 'stripe' as const,
    variables: {
      colorPrimary: '#3b82f6',
      colorBackground: '#ffffff',
      colorText: '#1f2937',
      colorDanger: '#ef4444',
      fontFamily: 'system-ui, sans-serif',
      spacingUnit: '4px',
      borderRadius: '8px',
    },
  };

  const options = {
    clientSecret,
    appearance,
    locale: 'ru' as const,
  };

  // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (authLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin mr-2" />
            <span>–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
  if (showCustomerForm && !dataReady) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-sm text-gray-600">
            –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
          </p>
          
          {/* ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development) */}
          {process.env.NODE_ENV === 'development' && (
            <div className="text-xs text-gray-500 bg-gray-50 p-2 rounded">
              <strong>–û—Ç–ª–∞–¥–∫–∞:</strong><br/>
              User: {user ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}<br/>
              User email: {user?.email || '–Ω–µ—Ç'}<br/>
              User name: {user?.name || '–Ω–µ—Ç'}<br/>
              Form email: {customerData.email}<br/>
              Form name: {customerData.name}
            </div>
          )}
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="email">Email *</Label>
              <div className="relative">
                <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="email"
                  type="email"
                  placeholder="your@email.com"
                  value={customerData.email}
                  onChange={(e) => {
                    console.log('üìù Email –∏–∑–º–µ–Ω–µ–Ω:', e.target.value);
                    setCustomerData(prev => ({ ...prev, email: e.target.value }));
                  }}
                  className="pl-10"
                  required
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="name">–ò–º—è *</Label>
              <div className="relative">
                <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="name"
                  type="text"
                  placeholder="–í–∞—à–µ –∏–º—è"
                  value={customerData.name}
                  onChange={(e) => {
                    console.log('üìù –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ:', e.target.value);
                    setCustomerData(prev => ({ ...prev, name: e.target.value }));
                  }}
                  className="pl-10"
                  required
                />
              </div>
            </div>
            
            <div>
              <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
              <Input
                id="phone"
                type="tel"
                placeholder="+7 (999) 123-45-67"
                value={customerData.phone}
                onChange={(e) => {
                  console.log('üìù –¢–µ–ª–µ—Ñ–æ–Ω –∏–∑–º–µ–Ω–µ–Ω:', e.target.value);
                  setCustomerData(prev => ({ ...prev, phone: e.target.value }));
                }}
              />
            </div>
          </div>
          
          <Button 
            onClick={handleCustomerDataSubmit}
            disabled={loading || !customerData.email.trim() || !customerData.name.trim()}
            className="w-full"
          >
            {loading ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...
              </>
            ) : (
              '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ'
            )}
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–ª–∞—Ç–µ</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin mr-2" />
            <span>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-red-600 mb-4">{error}</div>
          
          {/* ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –≤ development) */}
          {process.env.NODE_ENV === 'development' && (
            <div className="space-y-2 text-sm text-gray-600 mb-4 bg-gray-50 p-3 rounded">
              <p><strong>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong></p>
              <p>User: {user ? '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'}</p>
              <p>User ID: {user?.id || '–Ω–µ—Ç'}</p>
              <p>User Email: {user?.email || '–Ω–µ—Ç'}</p>
              <p>User Name: {user?.name || '–Ω–µ—Ç'}</p>
              <p>Form Email: {customerData.email || '–Ω–µ—Ç'}</p>
              <p>Form Name: {customerData.name || '–Ω–µ—Ç'}</p>
              <p>Form Phone: {customerData.phone || '–Ω–µ—Ç'}</p>
              <p>Show Form: {showCustomerForm ? '–¥–∞' : '–Ω–µ—Ç'}</p>
              <p>Data Ready: {dataReady ? '–¥–∞' : '–Ω–µ—Ç'}</p>
            </div>
          )}
          
          <Button
            onClick={() => {
              console.log('üîÑ PaymentForm: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞');
              setError('');
              if (dataReady) {
                createPaymentIntent();
              } else {
                setShowCustomerForm(true);
              }
            }}
            disabled={loading}
            className="w-full"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (!clientSecret) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>–ó–∞–≥—Ä—É–∑–∫–∞...</CardTitle>
        </CardHeader>
        <CardContent>
                    <div className="flex items-center justify-center py-8">
            <Loader2 className="w-8 h-8 animate-spin" />
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞</CardTitle>
        {/* ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ user.phone) */}
        <div className="text-sm text-gray-600">
          <p>üë§ {user?.name || customerData.name}</p>
          <p>üìß {user?.email || customerData.email}</p>
          {customerData.phone && (
            <p>üìû {customerData.phone}</p>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <Elements options={options} stripe={stripePromise}>
          <CheckoutForm
            paymentIntentId={paymentIntentId}
            onSuccess={onSuccess}
            onError={onError}
          />
        </Elements>
      </CardContent>
    </Card>
  );
}

