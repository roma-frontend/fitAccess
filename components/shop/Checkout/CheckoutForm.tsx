"use client";

import React, { useState } from 'react';
import {
  useStripe,
  useElements,
  PaymentElement,
} from '@stripe/react-stripe-js';
import { Button } from '@/components/ui/button';
import { Loader2, CreditCard } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface CheckoutFormProps {
  paymentIntentId: string;
  onSuccess: (receipt: any) => void;
  onError: (error: string) => void;
}

export default function CheckoutForm({
  paymentIntentId,
  onSuccess,
  onError
}: CheckoutFormProps) {
  const stripe = useStripe();
  const elements = useElements();
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  const handleSubmit = async (event: React.FormEvent) => {
    event.preventDefault();

    if (!stripe || !elements) {
      onError('Stripe –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
      return;
    }

    setLoading(true);

    try {
      console.log('üí≥ CheckoutForm: –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...');

      // ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
      const { error: submitError } = await elements.submit();
      if (submitError) {
        throw new Error(submitError.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã');
      }

      // ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º Payment Intent
      const { error, paymentIntent } = await stripe.confirmPayment({
        elements,
        confirmParams: {
          return_url: `${window.location.origin}/shop/success`,
        },
        redirect: 'if_required',
      });

      if (error) {
        throw new Error(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
      }

      if (paymentIntent && paymentIntent.status === 'succeeded') {
        console.log('‚úÖ CheckoutForm: –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω:', paymentIntent.id);

        toast({
          title: "–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω!",
          description: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑...",
        });

        // ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ API
        const confirmResponse = await fetch('/api/payments/confirm-payment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            paymentIntentId: paymentIntent.id,
            orderId: paymentIntentId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
          }),
        });

        const confirmData = await confirmResponse.json();

        if (!confirmResponse.ok) {
          throw new Error(confirmData.error || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        }

        console.log('‚úÖ CheckoutForm: –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', confirmData);

        toast({
          title: "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
          description: "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é...",
        });

        // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —á–µ–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        onSuccess(confirmData.receipt);
      } else {
        throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      console.error('‚ùå CheckoutForm: –æ—à–∏–±–∫–∞:', errorMessage);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞",
        description: errorMessage,
        variant: "destructive",
      });
      
      onError(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="p-4 border rounded-lg">
        <PaymentElement 
          options={{
            layout: 'tabs',
            paymentMethodOrder: ['card'],
          }}
        />
      </div>
      
      <Button
        type="submit"
        disabled={!stripe || loading}
        className="w-full"
        size="lg"
      >
        {loading ? (
          <>
            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...
          </>
        ) : (
          <>
            <CreditCard className="w-4 h-4 mr-2" />
            –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑
          </>
        )}
      </Button>
      
      <p className="text-xs text-gray-500 text-center">
        –ù–∞–∂–∏–º–∞—è "–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
      </p>
    </form>
  );
}
