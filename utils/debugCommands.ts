// utils/debugCommands.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import { GlobalDebugCommands } from '@/types/debug';

export const initDebugCommands = (contexts: {
  schedule?: any;
  dashboard?: any;
  superAdmin?: any;
}): GlobalDebugCommands => {
  const { schedule, dashboard, superAdmin } = contexts;

  return {
    schedule,
    dashboard,
    superAdmin,
    
    // ‚úÖ –†–ï–ê–õ–ò–ó–£–ï–ú –í–°–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´
    help: () => {
      console.log(`
üîß FitAccess Debug System - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üìä –û–ë–©–ò–ï –ö–û–ú–ê–ù–î–´:
  fitAccessDebug.help()           - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  fitAccessDebug.stats()          - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  fitAccessDebug.check()          - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  fitAccessDebug.checkSync()      - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  fitAccessDebug.sync()           - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  fitAccessDebug.clear()          - –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  fitAccessDebug.refreshAll()     - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤

üóìÔ∏è SCHEDULE –ö–û–ú–ê–ù–î–´:
  fitAccessDebug.schedule.events           - –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
  fitAccessDebug.schedule.getStats()       - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  fitAccessDebug.schedule.refreshData()    - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  fitAccessDebug.schedule.clearAllEvents() - –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏—è

üìà DASHBOARD –ö–û–ú–ê–ù–î–´:
  fitAccessDebug.dashboard.events          - –°–æ–±—ã—Ç–∏—è dashboard
  fitAccessDebug.dashboard.getStats()      - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ dashboard
  fitAccessDebug.dashboard.syncAllData()   - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  fitAccessDebug.dashboard.refreshStats()  - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

üë• SUPERADMIN –ö–û–ú–ê–ù–î–´:
  fitAccessDebug.superAdmin.trainers       - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  fitAccessDebug.superAdmin.clients        - –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
  fitAccessDebug.superAdmin.getStats()     - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  fitAccessDebug.superAdmin.refreshData()  - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

üß™ –¢–ï–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´:
  fitAccessDebug.test(5)          - –°–æ–∑–¥–∞—Ç—å 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
  fitAccessDebug.addEvents(10)    - –î–æ–±–∞–≤–∏—Ç—å 10 —Å–æ–±—ã—Ç–∏–π
  fitAccessDebug.stressTest(100)  - –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å 100 —Å–æ–±—ã—Ç–∏—è–º–∏
  fitAccessDebug.simulateDesync() - –ò–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é

üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
  fitAccessDebug.diagnoseSync()   - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  fitAccessDebug.forceSyncContexts() - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  diagnoseContexts()              - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)
      `);
    },

    checkSync: () => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤...');
      
      const scheduleEvents = schedule?.events?.length || 0;
      const dashboardEvents = dashboard?.events?.length || 0;
      
      console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:', {
        schedule: {
          events: scheduleEvents,
          trainers: schedule?.trainers?.length || 0,
          loading: schedule?.loading || false
        },
        dashboard: {
          events: dashboardEvents,
          trainers: dashboard?.trainers?.length || 0,
          clients: dashboard?.clients?.length || 0,
          loading: dashboard?.loading || false
        },
        superAdmin: {
          trainers: superAdmin?.trainers?.length || 0,
          clients: superAdmin?.clients?.length || 0,
          loading: superAdmin?.loading || false
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      const syncStatus = scheduleEvents === dashboardEvents;
      console.log(syncStatus ? '‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã' : '‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      
      if (!syncStatus) {
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: fitAccessDebug.sync()');
      }
    },

    sync: async () => {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤...');
      
      try {
        if (schedule?.refreshData) {
          await schedule.refreshData();
        }
        if (dashboard?.syncAllData) {
          await dashboard.syncAllData();
        }
        if (superAdmin?.refreshData) {
          await superAdmin.refreshData();
        }
        
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setTimeout(() => {
          if (window.fitAccessDebug?.checkSync) {
            window.fitAccessDebug.checkSync();
          }
        }, 1000);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      }
    },

    clear: async () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö...');
      
      if (schedule?.clearAllEvents) {
        schedule.clearAllEvents();
      }
      if (dashboard?.clearAllEvents) {
        dashboard.clearAllEvents();
      }
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    },

    test: async (count = 5) => {
      console.log(`üß™ –°–æ–∑–¥–∞–Ω–∏–µ ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...`);
      
      if (schedule?.createEvent) {
        for (let i = 0; i < count; i++) {
          const testEvent = {
            title: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ${i + 1}`,
            description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`,
            type: 'training' as const,
            startTime: new Date(Date.now() + (i + 1) * 60 * 60 * 1000).toISOString(),
            endTime: new Date(Date.now() + (i + 1) * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(),
            trainerId: 'trainer1',
            location: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ª'
          };
          
          try {
            await schedule.createEvent(testEvent);
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${i + 1}/${count}`);
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ${i + 1}:`, error);
          }
        }
      } else {
        console.warn('‚ö†Ô∏è Schedule.createEvent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    },

    stats: () => {
      const stats = {
        schedule: schedule?.getStats?.() || { error: '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' },
        dashboard: dashboard?.getStats?.() || { error: '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' },
        superAdmin: superAdmin?.getStats?.() || { error: '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ' },
        timestamp: new Date().toISOString()
      };
      
      console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
      return stats;
    },

    check: () => {
      console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:');
      console.log({
        schedule: !!schedule,
        dashboard: !!dashboard,
        superAdmin: !!superAdmin,
        scheduleEvents: schedule?.events?.length || 0,
        dashboardEvents: dashboard?.events?.length || 0,
        superAdminTrainers: superAdmin?.trainers?.length || 0
      });
    },

    addEvents: async (count = 3) => {
      return await window.fitAccessDebug.test(count);
    },

    updateLastEvent: async () => {
      console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è...');
      const events = schedule?.events || [];
      if (events.length > 0) {
        const lastEvent = events[events.length - 1];
        if (schedule?.updateEvent) {
          await schedule.updateEvent(lastEvent._id, {
            title: `${lastEvent.title} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)`,
            description: `–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ ${new Date().toLocaleTimeString()}`
          });
          console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
        }
      } else {
        console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      }
    },

    deleteLastEvent: async () => {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è...');
      const events = schedule?.events || [];
      if (events.length > 0) {
        const lastEvent = events[events.length - 1];
        if (schedule?.deleteEvent) {
          await schedule.deleteEvent(lastEvent._id);
          console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        }
      } else {
        console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      }
    },

    clearEvents: async () => {
      return await window.fitAccessDebug.clear();
    },

    refreshAll: async () => {
      return await window.fitAccessDebug.sync();
    },

    stressTest: async (count = 50) => {
      console.log(`üöÄ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ ${count} —Å–æ–±—ã—Ç–∏–π...`);
      const startTime = Date.now();
      
      await window.fitAccessDebug.test(count);
      
      const endTime = Date.now();
      console.log(`‚è±Ô∏è –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${endTime - startTime}–º—Å`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
      setTimeout(() => {
        window.fitAccessDebug.checkSync();
      }, 2000);
    },

    simulateDesync: () => {
      console.log('‚ö†Ô∏è –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      
      if (schedule?.events && dashboard?.events) {
        // –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        const fakeEvent = {
          _id: 'fake_event',
          title: '–§–∞–ª—å—à–∏–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',
          type: 'training',
          startTime: new Date().toISOString(),
          endTime: new Date(Date.now() + 60 * 60 * 1000).toISOString(),
          trainerId: 'trainer1',
          trainerName: '–¢–µ—Å—Ç',
          status: 'scheduled',
          createdAt: new Date().toISOString(),
          createdBy: 'test'
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –≤ schedule, –Ω–æ –Ω–µ –≤ dashboard
        schedule.events.push(fakeEvent);
        
        console.log('‚úÖ –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: fitAccessDebug.checkSync()');
        console.log('üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ: fitAccessDebug.sync()');
      } else {
        console.warn('‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é - –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }
    },

    getStats: () => {
      return window.fitAccessDebug.stats();
    },

    forceSyncContexts: async () => {
      console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      if (typeof window !== 'undefined') {
        const syncEvent = new CustomEvent('force-sync', {
          detail: { timestamp: Date.now() }
        });
        window.dispatchEvent(syncEvent);
        
        // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º schedule-updated —Å–æ–±—ã—Ç–∏–µ
        const scheduleEvent = new CustomEvent('schedule-updated', {
          detail: { 
            events: schedule?.events || [],
            timestamp: Date.now()
          }
        });
        window.dispatchEvent(scheduleEvent);
        
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
      }
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      await window.fitAccessDebug.sync();
    },

    diagnoseSync: () => {
      console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –¢–ò–ü–´ –î–õ–Ø RECOMMENDATIONS
      const recommendations: string[] = [];
      
      const diagnosis = {
        contexts: {
          schedule: {
            available: !!schedule,
            events: schedule?.events?.length || 0,
            trainers: schedule?.trainers?.length || 0,
            loading: schedule?.loading || false,
            error: schedule?.error || null,
            methods: schedule ? Object.keys(schedule).filter(key => typeof schedule[key] === 'function') : []
          },
          dashboard: {
            available: !!dashboard,
            events: dashboard?.events?.length || 0,
            trainers: dashboard?.trainers?.length || 0,
            clients: dashboard?.clients?.length || 0,
            loading: dashboard?.loading || false,
            error: dashboard?.error || null,
            methods: dashboard ? Object.keys(dashboard).filter(key => typeof dashboard[key] === 'function') : []
          },
          superAdmin: {
            available: !!superAdmin,
            trainers: superAdmin?.trainers?.length || 0,
            clients: superAdmin?.clients?.length || 0,
            loading: superAdmin?.loading || false,
            error: superAdmin?.error || null,
            methods: superAdmin ? Object.keys(superAdmin).filter(key => typeof superAdmin[key] === 'function') : []
          }
        },
        sync: {
          scheduleVsDashboard: {
            eventsMatch: (schedule?.events?.length || 0) === (dashboard?.events?.length || 0),
            scheduleEvents: schedule?.events?.length || 0,
            dashboardEvents: dashboard?.events?.length || 0,
            difference: Math.abs((schedule?.events?.length || 0) - (dashboard?.events?.length || 0))
          }
        },
        recommendations
      };
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (!diagnosis.contexts.schedule.available) {
        recommendations.push('Schedule –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ScheduleProvider');
      }
      if (!diagnosis.contexts.dashboard.available) {
        recommendations.push('Dashboard –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ DashboardProvider');
      }
      if (!diagnosis.contexts.superAdmin.available) {
        recommendations.push('SuperAdmin –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ SuperAdminProvider');
      }
      if (!diagnosis.sync.scheduleVsDashboard.eventsMatch) {
        recommendations.push('–°–æ–±—ã—Ç–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ fitAccessDebug.sync()');
      }
      if (diagnosis.contexts.schedule.error) {
        recommendations.push(`–û—à–∏–±–∫–∞ –≤ Schedule: ${diagnosis.contexts.schedule.error}`);
      }
      if (diagnosis.contexts.dashboard.error) {
        recommendations.push(`–û—à–∏–±–∫–∞ –≤ Dashboard: ${diagnosis.contexts.dashboard.error}`);
      }
      
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', diagnosis);
      
      if (diagnosis.recommendations.length === 0) {
                console.log('‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      } else {
        console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:', diagnosis.recommendations);
      }
      
      return diagnosis;
    },

    clearAllEvents: async () => {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π...');
      
      if (schedule?.clearAllEvents) {
        schedule.clearAllEvents();
        console.log('‚úÖ –°–æ–±—ã—Ç–∏—è Schedule –æ—á–∏—â–µ–Ω—ã');
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º dashboard –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      if (typeof window !== 'undefined') {
        const updateEvent = new CustomEvent('schedule-updated', {
          detail: { 
            events: [],
            timestamp: Date.now()
          }
        });
        window.dispatchEvent(updateEvent);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É dashboard
      if (dashboard?.refreshStats) {
        await dashboard.refreshStats();
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Dashboard –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      }
      
      console.log('‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—á–∏—â–µ–Ω—ã');
    }
  };
};

export const registerGlobalDebugCommands = (commands: GlobalDebugCommands) => {
  if (typeof window !== 'undefined') {
    // ‚úÖ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –í–°–ï –ö–û–ú–ê–ù–î–´ –í WINDOW
    window.fitAccessDebug = commands;
    
    // ‚úÖ –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    window.diagnoseContexts = () => {
      console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤:');
      
      const fitAccessDebug = window.fitAccessDebug;
      
      if (!fitAccessDebug) {
        console.log('‚ùå fitAccessDebug –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å');
        return;
      }

      console.log('‚úÖ fitAccessDebug –¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞:', Object.keys(fitAccessDebug));

      // ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ö–û–ù–¢–ï–ö–°–¢–û–í –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –¢–ò–ü–ê–ú–ò
      const contextNames = ['schedule', 'dashboard', 'superAdmin'] as const;
      
      contextNames.forEach(contextName => {
        // ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ô –î–û–°–¢–£–ü –ö –°–í–û–ô–°–¢–í–ê–ú
        const context = (fitAccessDebug as any)[contextName];
        if (context && typeof context === 'object') {
          console.log(`‚úÖ ${contextName} –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω:`, {
            events: context.events?.length || 0,
            trainers: context.trainers?.length || 0,
            clients: context.clients?.length || 0,
            loading: context.loading,
            error: context.error,
            methods: Object.keys(context).filter(key => typeof context[key] === 'function')
          });
        } else {
          console.log(`‚ùå ${contextName} –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }
      });

      // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
      console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      if (!(fitAccessDebug as any).schedule) {
        console.log('  - Schedule –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ScheduleProvider –≤ layout.tsx');
      }
      if (!(fitAccessDebug as any).dashboard) {
        console.log('  - Dashboard –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DashboardProvider –≤ layout.tsx');
      }
      if (!(fitAccessDebug as any).superAdmin) {
        console.log('  - SuperAdmin –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SuperAdminProvider –≤ layout.tsx');
      }
      
      console.log('  - –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ diagnoseContexts()');
      console.log('  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤');
      console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: fitAccessDebug.help()');
    };

    window.forceRegisterContexts = () => {
      console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤...');
      console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ContextRegistrar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      console.log('üí° –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: fitAccessDebug.forceSyncContexts()');
    };
    
    console.log('‚úÖ Debug –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ');
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: fitAccessDebug.help()');
  }
};

