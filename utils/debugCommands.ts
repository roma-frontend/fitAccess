// utils/debugCommands.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"use client";

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
declare global {
  interface Window {
    fitAccessDebug: {
      addEvents: (count: number) => void;
      clearEvents: () => void;
      simulateError: () => void;
      checkSync: () => void;
      stressTest: () => void;
      refreshAll: () => void;
    };
  }
}

export const initDebugCommands = (
  schedule: any,
  dashboard: any,
  superAdmin: any
) => {
  if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
    window.fitAccessDebug = {
      addEvents: async (count: number = 5) => {
        console.log(`üß™ –î–æ–±–∞–≤–ª—è–µ–º ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...`);
        
        const promises = Array.from({ length: count }, (_, i) =>
          schedule.createEvent({
            title: `Debug —Å–æ–±—ã—Ç–∏–µ ${i + 1}`,
            description: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ #${i + 1}`,
            type: 'training',
            startTime: new Date(Date.now() + (i * 60 * 60 * 1000)).toISOString(),
            endTime: new Date(Date.now() + ((i + 1) * 60 * 60 * 1000)).toISOString(),
            trainerId: `trainer${(i % 3) + 1}`,
            clientId: `client${(i % 5) + 1}`,
            location: `Debug –∑–∞–ª ${i + 1}`
          })
        );
        
        try {
          await Promise.all(promises);
          console.log(`‚úÖ ${count} —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
        }
      },

      clearEvents: async () => {
        console.log('üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è...');
        try {
          const events = schedule.events || [];
          const promises = events.map((event: any) => schedule.deleteEvent(event._id));
          await Promise.all(promises);
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${events.length} —Å–æ–±—ã—Ç–∏–π`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
        }
      },

      simulateError: () => {
        console.log('üí• –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É...');
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      },

      checkSync: () => {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
        console.table({
          'Dashboard Events': dashboard.events?.length || 0,
          'Schedule Events': schedule.events?.length || 0,
          'SuperAdmin Trainers': superAdmin.trainers?.length || 0,
          'Dashboard Trainers': dashboard.trainers?.length || 0,
          'Dashboard Clients': dashboard.clients?.length || 0
        });
        
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                const scheduleEventsCount = schedule.events?.length || 0;
                const dashboardEventsCount = dashboard.events?.length || 0;
                
                if (scheduleEventsCount !== dashboardEventsCount) {
                  console.warn(`‚ö†Ô∏è –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π: Schedule(${scheduleEventsCount}) ‚â† Dashboard(${dashboardEventsCount})`);
                } else {
                  console.log(`‚úÖ –°–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${scheduleEventsCount} –≤ –æ–±–æ–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö`);
                }
                
                const superAdminTrainersCount = superAdmin.trainers?.length || 0;
                const dashboardTrainersCount = dashboard.trainers?.length || 0;
                
                if (superAdminTrainersCount !== dashboardTrainersCount) {
                  console.warn(`‚ö†Ô∏è –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤: SuperAdmin(${superAdminTrainersCount}) ‚â† Dashboard(${dashboardTrainersCount})`);
                } else {
                  console.log(`‚úÖ –¢—Ä–µ–Ω–µ—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${superAdminTrainersCount} –≤ –æ–±–æ–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö`);
                }
              },
        
              stressTest: async () => {
                console.log('üî• –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞...');
                const start = performance.now();
                
                try {
                  // –î–æ–±–∞–≤–ª—è–µ–º 50 —Å–æ–±—ã—Ç–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                  const promises = Array.from({ length: 50 }, (_, i) =>
                    schedule.createEvent({
                      title: `–°—Ç—Ä–µ—Å—Å ${i}`,
                      description: `–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å–æ–±—ã—Ç–∏–µ #${i}`,
                      type: 'training',
                      startTime: new Date(Date.now() + (i * 1000)).toISOString(),
                      endTime: new Date(Date.now() + ((i + 1) * 1000)).toISOString(),
                      trainerId: `trainer${(i % 3) + 1}`,
                      clientId: `client${(i % 5) + 1}`,
                      location: `–°—Ç—Ä–µ—Å—Å –∑–∞–ª ${i % 3 + 1}`
                    })
                  );
                  
                  await Promise.all(promises);
                  const end = performance.now();
                  console.log(`‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${(end - start).toFixed(2)}ms`);
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
                  setTimeout(() => {
                    window.fitAccessDebug.checkSync();
                  }, 1000);
                  
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:', error);
                }
              },
        
              refreshAll: async () => {
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã...');
                try {
                  const promises = [];
                  
                  if (schedule.refreshData) promises.push(schedule.refreshData());
                  if (dashboard.syncAllData) promises.push(dashboard.syncAllData());
                  if (superAdmin.refreshData) promises.push(superAdmin.refreshData());
                  
                  await Promise.all(promises);
                  console.log('‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                  setTimeout(() => {
                    window.fitAccessDebug.checkSync();
                  }, 500);
                  
                } catch (error) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤:', error);
                }
              }
            };
        
            console.log(`
        üéØ FitAccess Debug Commands:
        ‚Ä¢ fitAccessDebug.addEvents(5) - –¥–æ–±–∞–≤–∏—Ç—å 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        ‚Ä¢ fitAccessDebug.clearEvents() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è  
        ‚Ä¢ fitAccessDebug.simulateError() - —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
        ‚Ä¢ fitAccessDebug.checkSync() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        ‚Ä¢ fitAccessDebug.stressTest() - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç (50 —Å–æ–±—ã—Ç–∏–π)
        ‚Ä¢ fitAccessDebug.refreshAll() - –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        
        üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        ‚Ä¢ console.log(schedule) - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å Schedule –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ‚Ä¢ console.log(dashboard) - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å Dashboard –∫–æ–Ω—Ç–µ–∫—Å—Ç
        ‚Ä¢ console.log(superAdmin) - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å SuperAdmin –∫–æ–Ω—Ç–µ–∫—Å—Ç
            `);
          }
        };
        
