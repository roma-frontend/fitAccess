// utils/debugCommands.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import { toast } from "@/hooks/use-toast";

interface DebugCommands {
  addEvents: (count?: number) => Promise<void>;
  updateLastEvent: () => Promise<void>;
  deleteLastEvent: () => Promise<void>;
  clearEvents: () => Promise<void>;
  checkSync: () => void;
  refreshAll: () => Promise<void>;
  stressTest: (count?: number) => Promise<void>;
  simulateDesync: () => void;
  getStats: () => object;
}

export const initDebugCommands = (contexts: {
  dashboard?: any;
  schedule?: any;
  superAdmin?: any;
  admin?: any;
  manager?: any;
  trainer?: any;
}): DebugCommands => {
  const { dashboard, schedule, superAdmin, admin, manager, trainer } = contexts;

  const addEvents = async (count = 1) => {
    if (!schedule) {
      console.error('‚ùå Schedule context –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      return;
    }
  
    try {
      console.log(`üîÑ –î–æ–±–∞–≤–ª—è–µ–º ${count} —Å–æ–±—ã—Ç–∏–π...`);
      
      // üîç –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
      if (schedule.events && schedule.events.length > 0) {
        console.log('üìã –ü—Ä–∏–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è:', schedule.events[0]);
      }
      
      const promises = [];
      
      for (let i = 0; i < count; i++) {
        const now = new Date();
        const startTime = new Date(now.getTime() + (i + 1) * 60 * 60 * 1000);
        const endTime = new Date(startTime.getTime() + 60 * 60 * 1000);
  
        // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï –§–û–†–ú–ê–¢ –ö–ê–ö –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–û–ë–´–¢–ò–Ø
        const eventData = {
          title: `Debug —Å–æ–±—ã—Ç–∏–µ ${i + 1} ${now.toLocaleTimeString()}`,
          description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ #${i + 1}`,
          type: 'training',
          startTime: startTime.toISOString(),
          endTime: endTime.toISOString(),
          trainerId: 'trainer1',
          trainerName: 'Debug –¢—Ä–µ–Ω–µ—Ä', // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º trainerName
          clientId: 'client1',
          clientName: 'Debug –ö–ª–∏–µ–Ω—Ç', // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º clientName
          location: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ª',
          status: 'scheduled', // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º status
          createdBy: 'trainer1' // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º createdBy
        };
  
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ ${i + 1}:`, eventData);
        promises.push(schedule.createEvent(eventData));
      }
  
      await Promise.all(promises);
      console.log(`‚úÖ ${count} —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
      
      toast({
        title: "–°–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        description: `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π`,
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
      
      // üîç –ü–û–î–†–û–ë–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–®–ò–ë–ö–ò
      if (error instanceof Response) {
        console.error('üìã HTTP —Å—Ç–∞—Ç—É—Å:', error.status);
        console.error('üìã HTTP —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:', error.statusText);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        error.text().then(text => {
          console.error('üìã –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', text);
        }).catch(() => {
          console.error('üìã –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞');
        });
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.",
        variant: "destructive",
      });
    }
  };

  const updateLastEvent = async () => {
    if (!schedule?.events?.length) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      return;
    }

    try {
      const lastEvent = schedule.events[schedule.events.length - 1];
      const updatedData = {
        ...lastEvent,
        title: `${lastEvent.title} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)`,
        description: `${lastEvent.description} - –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ ${new Date().toLocaleTimeString()}`,
      };

      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (schedule.updateEvent) {
        await schedule.updateEvent(lastEvent._id, updatedData);
      } else if (schedule.update) {
        await schedule.update(lastEvent._id, updatedData);
      } else {
        console.error('‚ùå –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      toast({
        title: "–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
        description: "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    }
  };

  const deleteLastEvent = async () => {
    if (!schedule?.events?.length) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
      return;
    }

    try {
      const lastEvent = schedule.events[schedule.events.length - 1];
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
      if (schedule.deleteEvent) {
        await schedule.deleteEvent(lastEvent._id);
      } else if (schedule.remove) {
        await schedule.remove(lastEvent._id);
      } else if (schedule.delete) {
        await schedule.delete(lastEvent._id);
      } else {
        console.error('‚ùå –ú–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      toast({
        title: "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ",
        description: "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:', error);
    }
  };

  const clearEvents = async () => {
    if (!schedule?.events?.length) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏');
      return;
    }

    try {
      console.log('üîÑ –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è...');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–æ –æ–¥–Ω–æ–º—É
      const events = [...schedule.events];
      for (const event of events) {
        if (schedule.deleteEvent) {
          await schedule.deleteEvent(event._id);
        } else if (schedule.remove) {
          await schedule.remove(event._id);
        }
      }

      console.log('‚úÖ –í—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—á–∏—â–µ–Ω—ã');
      toast({
        title: "–°–æ–±—ã—Ç–∏—è –æ—á–∏—â–µ–Ω—ã",
        description: "–í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω—ã",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    }
  };

  const checkSync = () => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
    console.table({
      'Dashboard Events': dashboard?.events?.length || 0,
      'Schedule Events': schedule?.events?.length || 0,
      'SuperAdmin Trainers': superAdmin?.trainers?.length || 0,
      'Dashboard Trainers': dashboard?.trainers?.length || 0,
      'Dashboard Clients': dashboard?.clients?.length || 0,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
    const dashboardEvents = dashboard?.events?.length || 0;
    const scheduleEvents = schedule?.events?.length || 0;
    
    if (dashboardEvents === scheduleEvents) {
      console.log(`‚úÖ –°–æ–±—ã—Ç–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${dashboardEvents} –≤ –æ–±–æ–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö`);
    } else {
      console.warn(`‚ö†Ô∏è –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π: Dashboard(${dashboardEvents}) ‚â† Schedule(${scheduleEvents})`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    const dashboardTrainers = dashboard?.trainers?.length || 0;
    const superAdminTrainers = superAdmin?.trainers?.length || 0;
    
    if (dashboardTrainers === superAdminTrainers) {
      console.log(`‚úÖ –¢—Ä–µ–Ω–µ—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: ${dashboardTrainers} –≤ –æ–±–æ–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö`);
    } else {
      console.warn(`‚ö†Ô∏è –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤: Dashboard(${dashboardTrainers}) ‚â† SuperAdmin(${superAdminTrainers})`);
    }
  };

  const refreshAll = async () => {
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã...');
    
    try {
      const promises = [];
      
      if (schedule?.refreshData) promises.push(schedule.refreshData());
      if (dashboard?.syncAllData) promises.push(dashboard.syncAllData());
      if (superAdmin?.refreshData) promises.push(superAdmin.refreshData());
      if (admin?.refreshData) promises.push(admin.refreshData());
      if (manager?.refreshData) promises.push(manager.refreshData());
      if (trainer?.refreshData) promises.push(trainer.refreshData());
      
      await Promise.all(promises);
      console.log('‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
      toast({
        title: "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        description: "–í—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤:', error);
    }
  };

  const stressTest = async (count = 10) => {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç: ${count} —Å–æ–±—ã—Ç–∏–π...`);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ addEvents
      await addEvents(count);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      checkSync();
      
      console.log('‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
      toast({
        title: "–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
        description: `–°–æ–∑–¥–∞–Ω–æ ${count} —Å–æ–±—ã—Ç–∏–π, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞`,
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞",
        variant: "destructive",
      });
    }
  };

  const simulateDesync = () => {
    console.log('üé≠ –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫
    console.warn('‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è: –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    toast({
      title: "–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
      description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö",
      variant: "destructive",
    });
  };

  const getStats = () => {
    const stats = {
      contexts: {
        dashboard: !!dashboard,
        schedule: !!schedule,
        superAdmin: !!superAdmin,
        admin: !!admin,
        manager: !!manager,
        trainer: !!trainer,
      },
      data: {
        events: schedule?.events?.length || 0,
        trainers: superAdmin?.trainers?.length || 0,
        clients: superAdmin?.clients?.length || 0,
      },
      methods: {
        schedule: schedule ? Object.keys(schedule) : [],
        dashboard: dashboard ? Object.keys(dashboard) : [],
      }
    };
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ debug —Å–∏—Å—Ç–µ–º—ã:', stats);
    return stats;
  };

  return {
    addEvents,
    updateLastEvent,
    deleteLastEvent,
    clearEvents,
    checkSync,
    refreshAll,
    stressTest,
    simulateDesync,
    getStats,
  };
};
