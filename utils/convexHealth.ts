// utils/convexHealth.ts (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–∏–ø–∞–º–∏)
import { ConvexHttpClient } from "convex/browser";

// ‚úÖ –¢–ò–ü–´ –î–õ–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ü–†–û–í–ï–†–ö–ò
interface FunctionTestResult {
  success: boolean;
  data?: string;
  error?: string;
}

interface FunctionTestResults {
  [functionName: string]: FunctionTestResult;
}

export const checkConvexHealth = async () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Convex...');
  
  if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
    console.error('‚ùå NEXT_PUBLIC_CONVEX_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return false;
  }
  
  try {
    const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL);
    
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò
    const result = await convex.query("trainers:getAllTrainers");
    
    console.log('‚úÖ Convex –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', result?.length || 0);
    return true;
  } catch (error: any) {
    console.error('‚ùå Convex –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    
    if (error.message?.includes('Could not find public function')) {
      console.error('üí° –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ:');
      console.error('   1. npx convex dev');
      console.error('   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ convex/trainers.ts —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.error('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è getAllTrainers —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    return false;
  }
};

// ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –§–£–ù–ö–¶–ò–ô –° –¢–ò–ü–ê–ú–ò
export const checkConvexFunctions = async (): Promise<FunctionTestResults> => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Convex...');
  
  if (!process.env.NEXT_PUBLIC_CONVEX_URL) {
    console.error('‚ùå NEXT_PUBLIC_CONVEX_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return {};
  }
  
  const convex = new ConvexHttpClient(process.env.NEXT_PUBLIC_CONVEX_URL);
  
  const functionsToTest = [
    'trainers:getAllTrainers',
    'trainers:getActiveTrainers', 
    'trainers:getAll',
    'trainers:getStats'
  ];
  
  const results: FunctionTestResults = {};
  
  for (const functionName of functionsToTest) {
    try {
      console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é: ${functionName}`);
      const result = await convex.query(functionName);
      results[functionName] = {
        success: true,
        data: Array.isArray(result) ? `${result.length} –∑–∞–ø–∏—Å–µ–π` : '–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'
      };
      console.log(`‚úÖ ${functionName}: —É—Å–ø–µ—à–Ω–æ`);
    } catch (error: any) {
      results[functionName] = {
        success: false,
        error: error.message
      };
      console.error(`‚ùå ${functionName}: ${error.message}`);
    }
  }
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π:', results);
  return results;
};

// ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –í DEVELOPMENT
if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
  setTimeout(() => {
    checkConvexHealth();
  }, 2000);
  
  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    checkConvexFunctions();
  }, 5000);
}
